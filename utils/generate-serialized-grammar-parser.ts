import { writeFileSync } from "fs";
import {
  grammarParserFactory,
  entry,
} from "../src/parser/ELR/advanced/utils/grammar-parser-factory";
import prettier from "prettier";
import util from "node:util";

// Usage: ts-node utils/generate-serialized-grammar-parser.ts

// use these to generate serialized grammar parser
const { parserBuilder } = grammarParserFactory("__");
const { serializable } = parserBuilder.build({
  entry,
  checkAll: true,
  serialize: true,
});
const content = [
  `// generated by utils/generate-serialized-grammar-parser.ts`,
  "",
  "// comment all lines and uncomment the next line to re-generate the data",
  "// export const data = undefined;",
  "",
  `import type { SerializableParserData } from "../../model";`,
  "",
  `export const data: SerializableParserData<"gr", {
    kind: "";
    data: never;
} | {
    kind: "rename" | "grammar";
    data: never;
} | {
    kind: "literal";
    data: {
        unclosed: boolean;
    };
} | {
    kind: "";
    data: never;
}> = ${util.inspect(serializable, {
    // depth should be infinity, set it to a limited number in case of circular references
    depth: 10,
  })};`,
].join("\n");

prettier.format(content, { parser: "typescript" }).then((content) => {
  writeFileSync(
    "src/parser/ELR/advanced/utils/serialized-grammar-parser-data.ts",
    content,
    "utf-8",
  );
});
