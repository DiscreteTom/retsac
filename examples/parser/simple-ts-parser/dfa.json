{
  "hash": -34538921,
  "data": {
    "dfa": {
      "NTs": [
        "type_name",
        "exps",
        "exp",
        "object",
        "object_entry",
        "array",
        "exp_stmt",
        "const_stmt",
        "export_stmt",
        "stmt",
        "import_stmt",
        "__0",
        "__1",
        "__2"
      ],
      "entryNTs": [
        "import_stmt",
        "const_stmt",
        "exp_stmt",
        "export_stmt"
      ],
      "grammars": [
        {
          "type": 0,
          "kind": "identifier",
          "name": "identifier",
          "str": "Grammar({ type: \"T\", kind: \"identifier\", name: \"identifier\", text: undefined })",
          "strWithName": "identifier",
          "strWithoutName": "identifier",
          "grammarStrWithName": "identifier",
          "grammarStrWithoutName": "identifier"
        },
        {
          "type": 0,
          "kind": "readonly",
          "name": "readonly",
          "str": "Grammar({ type: \"T\", kind: \"readonly\", name: \"readonly\", text: undefined })",
          "strWithName": "readonly",
          "strWithoutName": "readonly",
          "grammarStrWithName": "readonly",
          "grammarStrWithoutName": "readonly"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "[",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"[\" })",
          "strWithName": "<anonymous>: \"[\"",
          "strWithoutName": "<anonymous>: \"[\"",
          "grammarStrWithName": "\"[\"",
          "grammarStrWithoutName": "\"[\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "]",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"]\" })",
          "strWithName": "<anonymous>: \"]\"",
          "strWithoutName": "<anonymous>: \"]\"",
          "grammarStrWithName": "\"]\"",
          "grammarStrWithoutName": "\"]\""
        },
        {
          "type": 0,
          "kind": "const",
          "name": "const",
          "str": "Grammar({ type: \"T\", kind: \"const\", name: \"const\", text: undefined })",
          "strWithName": "const",
          "strWithoutName": "const",
          "grammarStrWithName": "const",
          "grammarStrWithoutName": "const"
        },
        {
          "type": 1,
          "kind": "exp",
          "name": "exp",
          "str": "Grammar({ type: \"NT\", kind: \"exp\", name: \"exp\", text: undefined })",
          "strWithName": "exp",
          "strWithoutName": "exp",
          "grammarStrWithName": "exp",
          "grammarStrWithoutName": "exp"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ",",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \",\" })",
          "strWithName": "<anonymous>: \",\"",
          "strWithoutName": "<anonymous>: \",\"",
          "grammarStrWithName": "\",\"",
          "grammarStrWithoutName": "\",\""
        },
        {
          "type": 1,
          "kind": "exps",
          "name": "exps",
          "str": "Grammar({ type: \"NT\", kind: \"exps\", name: \"exps\", text: undefined })",
          "strWithName": "exps",
          "strWithoutName": "exps",
          "grammarStrWithName": "exps",
          "grammarStrWithoutName": "exps"
        },
        {
          "type": 0,
          "kind": "string",
          "name": "string",
          "str": "Grammar({ type: \"T\", kind: \"string\", name: \"string\", text: undefined })",
          "strWithName": "string",
          "strWithoutName": "string",
          "grammarStrWithName": "string",
          "grammarStrWithoutName": "string"
        },
        {
          "type": 0,
          "kind": "regex",
          "name": "regex",
          "str": "Grammar({ type: \"T\", kind: \"regex\", name: \"regex\", text: undefined })",
          "strWithName": "regex",
          "strWithoutName": "regex",
          "grammarStrWithName": "regex",
          "grammarStrWithoutName": "regex"
        },
        {
          "type": 0,
          "kind": "true",
          "name": "true",
          "str": "Grammar({ type: \"T\", kind: \"true\", name: \"true\", text: undefined })",
          "strWithName": "true",
          "strWithoutName": "true",
          "grammarStrWithName": "true",
          "grammarStrWithoutName": "true"
        },
        {
          "type": 0,
          "kind": "false",
          "name": "false",
          "str": "Grammar({ type: \"T\", kind: \"false\", name: \"false\", text: undefined })",
          "strWithName": "false",
          "strWithoutName": "false",
          "grammarStrWithName": "false",
          "grammarStrWithoutName": "false"
        },
        {
          "type": 1,
          "kind": "object",
          "name": "object",
          "str": "Grammar({ type: \"NT\", kind: \"object\", name: \"object\", text: undefined })",
          "strWithName": "object",
          "strWithoutName": "object",
          "grammarStrWithName": "object",
          "grammarStrWithoutName": "object"
        },
        {
          "type": 1,
          "kind": "array",
          "name": "array",
          "str": "Grammar({ type: \"NT\", kind: \"array\", name: \"array\", text: undefined })",
          "strWithName": "array",
          "strWithoutName": "array",
          "grammarStrWithName": "array",
          "grammarStrWithoutName": "array"
        },
        {
          "type": 0,
          "kind": "null",
          "name": "null",
          "str": "Grammar({ type: \"T\", kind: \"null\", name: \"null\", text: undefined })",
          "strWithName": "null",
          "strWithoutName": "null",
          "grammarStrWithName": "null",
          "grammarStrWithoutName": "null"
        },
        {
          "type": 0,
          "kind": "undefined",
          "name": "undefined",
          "str": "Grammar({ type: \"T\", kind: \"undefined\", name: \"undefined\", text: undefined })",
          "strWithName": "undefined",
          "strWithoutName": "undefined",
          "grammarStrWithName": "undefined",
          "grammarStrWithoutName": "undefined"
        },
        {
          "type": 0,
          "kind": "as",
          "name": "as",
          "str": "Grammar({ type: \"T\", kind: \"as\", name: \"as\", text: undefined })",
          "strWithName": "as",
          "strWithoutName": "as",
          "grammarStrWithName": "as",
          "grammarStrWithoutName": "as"
        },
        {
          "type": 1,
          "kind": "type_name",
          "name": "type_name",
          "str": "Grammar({ type: \"NT\", kind: \"type_name\", name: \"type_name\", text: undefined })",
          "strWithName": "type_name",
          "strWithoutName": "type_name",
          "grammarStrWithName": "type_name",
          "grammarStrWithoutName": "type_name"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "(",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"(\" })",
          "strWithName": "<anonymous>: \"(\"",
          "strWithoutName": "<anonymous>: \"(\"",
          "grammarStrWithName": "\"(\"",
          "grammarStrWithoutName": "\"(\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ")",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \")\" })",
          "strWithName": "<anonymous>: \")\"",
          "strWithoutName": "<anonymous>: \")\"",
          "grammarStrWithName": "\")\"",
          "grammarStrWithoutName": "\")\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "{",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"{\" })",
          "strWithName": "<anonymous>: \"{\"",
          "strWithoutName": "<anonymous>: \"{\"",
          "grammarStrWithName": "\"{\"",
          "grammarStrWithoutName": "\"{\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "}",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"}\" })",
          "strWithName": "<anonymous>: \"}\"",
          "strWithoutName": "<anonymous>: \"}\"",
          "grammarStrWithName": "\"}\"",
          "grammarStrWithoutName": "\"}\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "=>",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"=>\" })",
          "strWithName": "<anonymous>: \"=>\"",
          "strWithoutName": "<anonymous>: \"=>\"",
          "grammarStrWithName": "\"=>\"",
          "grammarStrWithoutName": "\"=>\""
        },
        {
          "type": 1,
          "kind": "__0",
          "name": "__0",
          "str": "Grammar({ type: \"NT\", kind: \"__0\", name: \"__0\", text: undefined })",
          "strWithName": "__0",
          "strWithoutName": "__0",
          "grammarStrWithName": "__0",
          "grammarStrWithoutName": "__0"
        },
        {
          "type": 0,
          "kind": "new",
          "name": "new",
          "str": "Grammar({ type: \"T\", kind: \"new\", name: \"new\", text: undefined })",
          "strWithName": "new",
          "strWithoutName": "new",
          "grammarStrWithName": "new",
          "grammarStrWithoutName": "new"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "!",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"!\" })",
          "strWithName": "<anonymous>: \"!\"",
          "strWithoutName": "<anonymous>: \"!\"",
          "grammarStrWithName": "\"!\"",
          "grammarStrWithoutName": "\"!\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "...",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"...\" })",
          "strWithName": "<anonymous>: \"...\"",
          "strWithoutName": "<anonymous>: \"...\"",
          "grammarStrWithName": "\"...\"",
          "grammarStrWithoutName": "\"...\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "?",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"?\" })",
          "strWithName": "<anonymous>: \"?\"",
          "strWithoutName": "<anonymous>: \"?\"",
          "grammarStrWithName": "\"?\"",
          "grammarStrWithoutName": "\"?\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ".",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \".\" })",
          "strWithName": "<anonymous>: \".\"",
          "strWithoutName": "<anonymous>: \".\"",
          "grammarStrWithName": "\".\"",
          "grammarStrWithoutName": "\".\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "!=",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"!=\" })",
          "strWithName": "<anonymous>: \"!=\"",
          "strWithoutName": "<anonymous>: \"!=\"",
          "grammarStrWithName": "\"!=\"",
          "grammarStrWithoutName": "\"!=\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "&&",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"&&\" })",
          "strWithName": "<anonymous>: \"&&\"",
          "strWithoutName": "<anonymous>: \"&&\"",
          "grammarStrWithName": "\"&&\"",
          "grammarStrWithoutName": "\"&&\""
        },
        {
          "type": 1,
          "kind": "object_entry",
          "name": "object_entry",
          "str": "Grammar({ type: \"NT\", kind: \"object_entry\", name: \"object_entry\", text: undefined })",
          "strWithName": "object_entry",
          "strWithoutName": "object_entry",
          "grammarStrWithName": "object_entry",
          "grammarStrWithoutName": "object_entry"
        },
        {
          "type": 1,
          "kind": "__1",
          "name": "__1",
          "str": "Grammar({ type: \"NT\", kind: \"__1\", name: \"__1\", text: undefined })",
          "strWithName": "__1",
          "strWithoutName": "__1",
          "grammarStrWithName": "__1",
          "grammarStrWithoutName": "__1"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ":",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \":\" })",
          "strWithName": "<anonymous>: \":\"",
          "strWithoutName": "<anonymous>: \":\"",
          "grammarStrWithName": "\":\"",
          "grammarStrWithoutName": "\":\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ";",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \";\" })",
          "strWithName": "<anonymous>: \";\"",
          "strWithoutName": "<anonymous>: \";\"",
          "grammarStrWithName": "\";\"",
          "grammarStrWithoutName": "\";\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "=",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"=\" })",
          "strWithName": "<anonymous>: \"=\"",
          "strWithoutName": "<anonymous>: \"=\"",
          "grammarStrWithName": "\"=\"",
          "grammarStrWithoutName": "\"=\""
        },
        {
          "type": 1,
          "kind": "exp_stmt",
          "name": "exp_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"exp_stmt\", name: \"exp_stmt\", text: undefined })",
          "strWithName": "exp_stmt",
          "strWithoutName": "exp_stmt",
          "grammarStrWithName": "exp_stmt",
          "grammarStrWithoutName": "exp_stmt"
        },
        {
          "type": 0,
          "kind": "export",
          "name": "export",
          "str": "Grammar({ type: \"T\", kind: \"export\", name: \"export\", text: undefined })",
          "strWithName": "export",
          "strWithoutName": "export",
          "grammarStrWithName": "export",
          "grammarStrWithoutName": "export"
        },
        {
          "type": 1,
          "kind": "const_stmt",
          "name": "const_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"const_stmt\", name: \"const_stmt\", text: undefined })",
          "strWithName": "const_stmt",
          "strWithoutName": "const_stmt",
          "grammarStrWithName": "const_stmt",
          "grammarStrWithoutName": "const_stmt"
        },
        {
          "type": 0,
          "kind": "import",
          "name": "import",
          "str": "Grammar({ type: \"T\", kind: \"import\", name: \"import\", text: undefined })",
          "strWithName": "import",
          "strWithoutName": "import",
          "grammarStrWithName": "import",
          "grammarStrWithoutName": "import"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "*",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"*\" })",
          "strWithName": "<anonymous>: \"*\"",
          "strWithoutName": "<anonymous>: \"*\"",
          "grammarStrWithName": "\"*\"",
          "grammarStrWithoutName": "\"*\""
        },
        {
          "type": 0,
          "kind": "from",
          "name": "from",
          "str": "Grammar({ type: \"T\", kind: \"from\", name: \"from\", text: undefined })",
          "strWithName": "from",
          "strWithoutName": "from",
          "grammarStrWithName": "from",
          "grammarStrWithoutName": "from"
        },
        {
          "type": 1,
          "kind": "__2",
          "name": "__2",
          "str": "Grammar({ type: \"NT\", kind: \"__2\", name: \"__2\", text: undefined })",
          "strWithName": "__2",
          "strWithoutName": "__2",
          "grammarStrWithName": "__2",
          "grammarStrWithoutName": "__2"
        },
        {
          "type": 1,
          "kind": "stmt",
          "name": "stmt",
          "str": "Grammar({ type: \"NT\", kind: \"stmt\", name: \"stmt\", text: undefined })",
          "strWithName": "stmt",
          "strWithoutName": "stmt",
          "grammarStrWithName": "stmt",
          "grammarStrWithoutName": "stmt"
        },
        {
          "type": 1,
          "kind": "import_stmt",
          "name": "import_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"import_stmt\", name: \"import_stmt\", text: undefined })",
          "strWithName": "import_stmt",
          "strWithoutName": "import_stmt",
          "grammarStrWithName": "import_stmt",
          "grammarStrWithoutName": "import_stmt"
        },
        {
          "type": 1,
          "kind": "export_stmt",
          "name": "export_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"export_stmt\", name: \"export_stmt\", text: undefined })",
          "strWithName": "export_stmt",
          "strWithoutName": "export_stmt",
          "grammarStrWithName": "export_stmt",
          "grammarStrWithoutName": "export_stmt"
        }
      ],
      "grammarRules": [
        {
          "NT": "type_name",
          "rule": [
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ type_name: `readonly identifier \"[\" \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ type_name: `const` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ type_name: `identifier` }",
          "strWithGrammarName": "{ type_name: `identifier` }",
          "strWithoutGrammarName": "{ type_name: `identifier` }",
          "hydrationId": 0
        },
        {
          "NT": "type_name",
          "rule": [
            "readonly",
            "identifier",
            "\"[\"",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ type_name: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ type_name: `const` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "strWithGrammarName": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "strWithoutGrammarName": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "hydrationId": 0
        },
        {
          "NT": "type_name",
          "rule": [
            "const"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ type_name: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ type_name: `readonly identifier \"[\" \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ type_name: `const` }",
          "strWithGrammarName": "{ type_name: `const` }",
          "strWithoutGrammarName": "{ type_name: `const` }",
          "hydrationId": 0
        },
        {
          "NT": "exps",
          "rule": [
            "exp",
            "\",\"",
            "exps"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exps: `exp \",\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exps: `exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exps: `exp \",\" exps` }",
          "strWithGrammarName": "{ exps: `exp \",\" exps` }",
          "strWithoutGrammarName": "{ exps: `exp \",\" exps` }",
          "hydrationId": 1
        },
        {
          "NT": "exps",
          "rule": [
            "exp",
            "\",\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exps: `exp \",\" exps` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exps: `exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exps: `exp \",\"` }",
          "strWithGrammarName": "{ exps: `exp \",\"` }",
          "strWithoutGrammarName": "{ exps: `exp \",\"` }",
          "hydrationId": 1
        },
        {
          "NT": "exps",
          "rule": [
            "exp"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exps: `exp \",\" exps` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exps: `exp \",\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exps: `exp` }",
          "strWithGrammarName": "{ exps: `exp` }",
          "strWithoutGrammarName": "{ exps: `exp` }",
          "hydrationId": 1
        },
        {
          "NT": "exp",
          "rule": [
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `identifier` }",
          "strWithGrammarName": "{ exp: `identifier` }",
          "strWithoutGrammarName": "{ exp: `identifier` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "string"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `string` }",
          "strWithGrammarName": "{ exp: `string` }",
          "strWithoutGrammarName": "{ exp: `string` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "regex"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `regex` }",
          "strWithGrammarName": "{ exp: `regex` }",
          "strWithoutGrammarName": "{ exp: `regex` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "true"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `true` }",
          "strWithGrammarName": "{ exp: `true` }",
          "strWithoutGrammarName": "{ exp: `true` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "false"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `false` }",
          "strWithGrammarName": "{ exp: `false` }",
          "strWithoutGrammarName": "{ exp: `false` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "object"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `object` }",
          "strWithGrammarName": "{ exp: `object` }",
          "strWithoutGrammarName": "{ exp: `object` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "array"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `array` }",
          "strWithGrammarName": "{ exp: `array` }",
          "strWithoutGrammarName": "{ exp: `array` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "null"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `undefined` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `null` }",
          "strWithGrammarName": "{ exp: `null` }",
          "strWithoutGrammarName": "{ exp: `null` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "undefined"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `string` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `regex` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `true` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `false` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `object` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `array` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `null` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `undefined` }",
          "strWithGrammarName": "{ exp: `undefined` }",
          "strWithoutGrammarName": "{ exp: `undefined` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "as",
            "type_name"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp as type_name` }",
          "strWithGrammarName": "{ exp: `exp as type_name` }",
          "strWithoutGrammarName": "{ exp: `exp as type_name` }",
          "hydrationId": 3
        },
        {
          "NT": "exp",
          "rule": [
            "\"(\"",
            "exp",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `\"(\" exp \")\"` }",
          "strWithGrammarName": "{ exp: `\"(\" exp \")\"` }",
          "strWithoutGrammarName": "{ exp: `\"(\" exp \")\"` }",
          "hydrationId": 4
        },
        {
          "NT": "exp",
          "rule": [
            "\"(\"",
            "\"{\"",
            "identifier",
            "\"}\"",
            "\")\"",
            "\"=>\"",
            "\"{\"",
            "__0",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "strWithGrammarName": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "strWithoutGrammarName": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "hydrationId": 5
        },
        {
          "NT": "exp",
          "rule": [
            "\"(\"",
            "\"{\"",
            "identifier",
            "\"}\"",
            "\")\"",
            "\"=>\"",
            "\"{\"",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "strWithGrammarName": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "strWithoutGrammarName": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "hydrationId": 5
        },
        {
          "NT": "exp",
          "rule": [
            "new",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `new identifier` }",
          "strWithGrammarName": "{ exp: `new identifier` }",
          "strWithoutGrammarName": "{ exp: `new identifier` }",
          "hydrationId": 6
        },
        {
          "NT": "exp",
          "rule": [
            "\"!\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "next": [
                "as"
              ],
              "handleEnd": false,
              "resolvers": [
                15
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "resolvers": [
                2
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "resolvers": [
                9
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "resolvers": [
                11
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "resolvers": [
                13
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `\"!\" exp` }",
          "strWithGrammarName": "{ exp: `\"!\" exp` }",
          "strWithoutGrammarName": "{ exp: `\"!\" exp` }",
          "hydrationId": 7
        },
        {
          "NT": "exp",
          "rule": [
            "\"...\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "next": [
                "as"
              ],
              "handleEnd": false,
              "resolvers": [
                15
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "resolvers": [
                2
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "resolvers": [
                9
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "resolvers": [
                11
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "resolvers": [
                13
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `\"...\" exp` }",
          "strWithGrammarName": "{ exp: `\"...\" exp` }",
          "strWithoutGrammarName": "{ exp: `\"...\" exp` }",
          "hydrationId": 7
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"?\"",
            "\".\"",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"?\" \".\" identifier` }",
          "strWithGrammarName": "{ exp: `exp \"?\" \".\" identifier` }",
          "strWithoutGrammarName": "{ exp: `exp \"?\" \".\" identifier` }",
          "hydrationId": 8
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\".\"",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \".\" identifier` }",
          "strWithGrammarName": "{ exp: `exp \".\" identifier` }",
          "strWithoutGrammarName": "{ exp: `exp \".\" identifier` }",
          "hydrationId": 8
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"(\"",
            "exps",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"(\" exps \")\"` }",
          "strWithGrammarName": "{ exp: `exp \"(\" exps \")\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"(\" exps \")\"` }",
          "hydrationId": 9
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"(\"",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"(\" \")\"` }",
          "strWithGrammarName": "{ exp: `exp \"(\" \")\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"(\" \")\"` }",
          "hydrationId": 9
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"[\"",
            "exp",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"[\" exp \"]\"` }",
          "strWithGrammarName": "{ exp: `exp \"[\" exp \"]\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"[\" exp \"]\"` }",
          "hydrationId": 10
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"!=\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "next": [
                "as"
              ],
              "handleEnd": false,
              "resolvers": [
                15
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "resolvers": [
                2
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "resolvers": [
                9
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "resolvers": [
                17
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "resolvers": [
                0,
                18,
                20
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"!=\" exp` }",
          "strWithGrammarName": "{ exp: `exp \"!=\" exp` }",
          "strWithoutGrammarName": "{ exp: `exp \"!=\" exp` }",
          "hydrationId": 11
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"&&\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "next": [
                "as"
              ],
              "handleEnd": false,
              "resolvers": [
                15
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "resolvers": [
                2
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "resolvers": [
                9
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "resolvers": [
                0,
                17,
                19
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "resolvers": [
                21
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exps \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp as type_name` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"&&\" exp` }",
          "strWithGrammarName": "{ exp: `exp \"&&\" exp` }",
          "strWithoutGrammarName": "{ exp: `exp \"&&\" exp` }",
          "hydrationId": 11
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "object_entry",
            "__1",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" object_entry \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "hydrationId": 12
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "object_entry",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" object_entry __1 \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object: `\"{\" object_entry \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" object_entry \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" object_entry \"}\"` }",
          "hydrationId": 12
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" object_entry __1 \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ object: `\"{\" object_entry \"}\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object: `\"{\" \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" \"}\"` }",
          "hydrationId": 12
        },
        {
          "NT": "object_entry",
          "rule": [
            "identifier",
            "\":\"",
            "exp"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object_entry: `identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object_entry: `identifier \":\" exp` }",
          "strWithGrammarName": "{ object_entry: `identifier \":\" exp` }",
          "strWithoutGrammarName": "{ object_entry: `identifier \":\" exp` }",
          "hydrationId": 13
        },
        {
          "NT": "object_entry",
          "rule": [
            "identifier"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
              "next": [
                "\"}\""
              ],
              "handleEnd": false,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
              "next": [
                "\"}\""
              ],
              "handleEnd": false,
              "resolvers": []
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object_entry: `identifier \":\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object_entry: `identifier` }",
          "strWithGrammarName": "{ object_entry: `identifier` }",
          "strWithoutGrammarName": "{ object_entry: `identifier` }",
          "hydrationId": 13
        },
        {
          "NT": "array",
          "rule": [
            "\"[\"",
            "exps",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ array: `\"[\" \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ array: `\"[\" exps \"]\"` }",
          "strWithGrammarName": "{ array: `\"[\" exps \"]\"` }",
          "strWithoutGrammarName": "{ array: `\"[\" exps \"]\"` }",
          "hydrationId": 14
        },
        {
          "NT": "array",
          "rule": [
            "\"[\"",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ array: `\"[\" exps \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ array: `\"[\" \"]\"` }",
          "strWithGrammarName": "{ array: `\"[\" \"]\"` }",
          "strWithoutGrammarName": "{ array: `\"[\" \"]\"` }",
          "hydrationId": 14
        },
        {
          "NT": "exp_stmt",
          "rule": [
            "exp",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp_stmt: `exp \";\"` }",
          "strWithGrammarName": "{ exp_stmt: `exp \";\"` }",
          "strWithoutGrammarName": "{ exp_stmt: `exp \";\"` }",
          "hydrationId": 15
        },
        {
          "NT": "const_stmt",
          "rule": [
            "const",
            "identifier",
            "\"=\"",
            "exp_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "strWithGrammarName": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "strWithoutGrammarName": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "hydrationId": 16
        },
        {
          "NT": "export_stmt",
          "rule": [
            "export",
            "const_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ export_stmt: `export const_stmt` }",
          "strWithGrammarName": "{ export_stmt: `export const_stmt` }",
          "strWithoutGrammarName": "{ export_stmt: `export const_stmt` }",
          "hydrationId": 17
        },
        {
          "NT": "stmt",
          "rule": [
            "exp_stmt"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ stmt: `const_stmt` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ stmt: `exp_stmt` }",
          "strWithGrammarName": "{ stmt: `exp_stmt` }",
          "strWithoutGrammarName": "{ stmt: `exp_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "const_stmt"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ stmt: `exp_stmt` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ stmt: `const_stmt` }",
          "strWithGrammarName": "{ stmt: `const_stmt` }",
          "strWithoutGrammarName": "{ stmt: `const_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"*\"",
            "as",
            "identifier",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"{\"",
            "identifier",
            "__2",
            "\"}\"",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"{\"",
            "identifier",
            "\"}\"",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "__0",
          "rule": [
            "stmt"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __0: `stmt __0` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __0: `stmt` }",
          "strWithGrammarName": "{ __0: `stmt` }",
          "strWithoutGrammarName": "{ __0: `stmt` }",
          "hydrationId": 264
        },
        {
          "NT": "__0",
          "rule": [
            "stmt",
            "__0"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __0: `stmt __0` }",
          "strWithGrammarName": "{ __0: `stmt __0` }",
          "strWithoutGrammarName": "{ __0: `stmt __0` }",
          "hydrationId": 264
        },
        {
          "NT": "__1",
          "rule": [
            "\",\"",
            "object_entry"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __1: `\",\" object_entry __1` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __1: `\",\" object_entry` }",
          "strWithGrammarName": "{ __1: `\",\" object_entry` }",
          "strWithoutGrammarName": "{ __1: `\",\" object_entry` }",
          "hydrationId": 265
        },
        {
          "NT": "__1",
          "rule": [
            "\",\"",
            "object_entry",
            "__1"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __1: `\",\" object_entry __1` }",
          "strWithGrammarName": "{ __1: `\",\" object_entry __1` }",
          "strWithoutGrammarName": "{ __1: `\",\" object_entry __1` }",
          "hydrationId": 265
        },
        {
          "NT": "__2",
          "rule": [
            "\",\"",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __2: `\",\" identifier __2` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __2: `\",\" identifier` }",
          "strWithGrammarName": "{ __2: `\",\" identifier` }",
          "strWithoutGrammarName": "{ __2: `\",\" identifier` }",
          "hydrationId": 266
        },
        {
          "NT": "__2",
          "rule": [
            "\",\"",
            "identifier",
            "__2"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __2: `\",\" identifier __2` }",
          "strWithGrammarName": "{ __2: `\",\" identifier __2` }",
          "strWithoutGrammarName": "{ __2: `\",\" identifier __2` }",
          "hydrationId": 266
        }
      ],
      "candidates": [
        {
          "gr": "{ type_name: `identifier` }",
          "digested": 0,
          "nextMap": {
            "identifier": "type_name := identifier #"
          },
          "str": "type_name := # identifier",
          "strWithGrammarName": "type_name := # identifier"
        },
        {
          "gr": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "digested": 0,
          "nextMap": {
            "readonly": "type_name := readonly # identifier \"[\" \"]\""
          },
          "str": "type_name := # readonly identifier \"[\" \"]\"",
          "strWithGrammarName": "type_name := # readonly identifier \"[\" \"]\""
        },
        {
          "gr": "{ type_name: `const` }",
          "digested": 0,
          "nextMap": {
            "const": "type_name := const #"
          },
          "str": "type_name := # const",
          "strWithGrammarName": "type_name := # const"
        },
        {
          "gr": "{ exps: `exp \",\" exps` }",
          "digested": 0,
          "nextMap": {
            "exp": "exps := exp # \",\" exps"
          },
          "str": "exps := # exp \",\" exps",
          "strWithGrammarName": "exps := # exp \",\" exps"
        },
        {
          "gr": "{ exps: `exp \",\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exps := exp # \",\""
          },
          "str": "exps := # exp \",\"",
          "strWithGrammarName": "exps := # exp \",\""
        },
        {
          "gr": "{ exps: `exp` }",
          "digested": 0,
          "nextMap": {
            "exp": "exps := exp #"
          },
          "str": "exps := # exp",
          "strWithGrammarName": "exps := # exp"
        },
        {
          "gr": "{ exp: `identifier` }",
          "digested": 0,
          "nextMap": {
            "identifier": "exp := identifier #"
          },
          "str": "exp := # identifier",
          "strWithGrammarName": "exp := # identifier"
        },
        {
          "gr": "{ exp: `string` }",
          "digested": 0,
          "nextMap": {
            "string": "exp := string #"
          },
          "str": "exp := # string",
          "strWithGrammarName": "exp := # string"
        },
        {
          "gr": "{ exp: `regex` }",
          "digested": 0,
          "nextMap": {
            "regex": "exp := regex #"
          },
          "str": "exp := # regex",
          "strWithGrammarName": "exp := # regex"
        },
        {
          "gr": "{ exp: `true` }",
          "digested": 0,
          "nextMap": {
            "true": "exp := true #"
          },
          "str": "exp := # true",
          "strWithGrammarName": "exp := # true"
        },
        {
          "gr": "{ exp: `false` }",
          "digested": 0,
          "nextMap": {
            "false": "exp := false #"
          },
          "str": "exp := # false",
          "strWithGrammarName": "exp := # false"
        },
        {
          "gr": "{ exp: `object` }",
          "digested": 0,
          "nextMap": {
            "object": "exp := object #"
          },
          "str": "exp := # object",
          "strWithGrammarName": "exp := # object"
        },
        {
          "gr": "{ exp: `array` }",
          "digested": 0,
          "nextMap": {
            "array": "exp := array #"
          },
          "str": "exp := # array",
          "strWithGrammarName": "exp := # array"
        },
        {
          "gr": "{ exp: `null` }",
          "digested": 0,
          "nextMap": {
            "null": "exp := null #"
          },
          "str": "exp := # null",
          "strWithGrammarName": "exp := # null"
        },
        {
          "gr": "{ exp: `undefined` }",
          "digested": 0,
          "nextMap": {
            "undefined": "exp := undefined #"
          },
          "str": "exp := # undefined",
          "strWithGrammarName": "exp := # undefined"
        },
        {
          "gr": "{ exp: `exp as type_name` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # as type_name"
          },
          "str": "exp := # exp as type_name",
          "strWithGrammarName": "exp := # exp as type_name"
        },
        {
          "gr": "{ exp: `\"(\" exp \")\"` }",
          "digested": 0,
          "nextMap": {
            "\"(\"": "exp := \"(\" # exp \")\""
          },
          "str": "exp := # \"(\" exp \")\"",
          "strWithGrammarName": "exp := # \"(\" exp \")\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"(\"": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\""
          },
          "str": "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"(\"": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\""
          },
          "str": "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 0,
          "nextMap": {
            "new": "exp := new # identifier"
          },
          "str": "exp := # new identifier",
          "strWithGrammarName": "exp := # new identifier"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 0,
          "nextMap": {
            "\"!\"": "exp := \"!\" # exp"
          },
          "str": "exp := # \"!\" exp",
          "strWithGrammarName": "exp := # \"!\" exp"
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 0,
          "nextMap": {
            "\"...\"": "exp := \"...\" # exp"
          },
          "str": "exp := # \"...\" exp",
          "strWithGrammarName": "exp := # \"...\" exp"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"?\" \".\" identifier"
          },
          "str": "exp := # exp \"?\" \".\" identifier",
          "strWithGrammarName": "exp := # exp \"?\" \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \".\" identifier"
          },
          "str": "exp := # exp \".\" identifier",
          "strWithGrammarName": "exp := # exp \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \"(\" exps \")\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"(\" exps \")\""
          },
          "str": "exp := # exp \"(\" exps \")\"",
          "strWithGrammarName": "exp := # exp \"(\" exps \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"(\" \")\""
          },
          "str": "exp := # exp \"(\" \")\"",
          "strWithGrammarName": "exp := # exp \"(\" \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"[\" exp \"]\""
          },
          "str": "exp := # exp \"[\" exp \"]\"",
          "strWithGrammarName": "exp := # exp \"[\" exp \"]\""
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"!=\" exp"
          },
          "str": "exp := # exp \"!=\" exp",
          "strWithGrammarName": "exp := # exp \"!=\" exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"&&\" exp"
          },
          "str": "exp := # exp \"&&\" exp",
          "strWithGrammarName": "exp := # exp \"&&\" exp"
        },
        {
          "gr": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # object_entry __1 \"}\""
          },
          "str": "object := # \"{\" object_entry __1 \"}\"",
          "strWithGrammarName": "object := # \"{\" object_entry __1 \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_entry \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # object_entry \"}\""
          },
          "str": "object := # \"{\" object_entry \"}\"",
          "strWithGrammarName": "object := # \"{\" object_entry \"}\""
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # \"}\""
          },
          "str": "object := # \"{\" \"}\"",
          "strWithGrammarName": "object := # \"{\" \"}\""
        },
        {
          "gr": "{ object_entry: `identifier \":\" exp` }",
          "digested": 0,
          "nextMap": {
            "identifier": "object_entry := identifier # \":\" exp"
          },
          "str": "object_entry := # identifier \":\" exp",
          "strWithGrammarName": "object_entry := # identifier \":\" exp"
        },
        {
          "gr": "{ object_entry: `identifier` }",
          "digested": 0,
          "nextMap": {
            "identifier": "object_entry := identifier #"
          },
          "str": "object_entry := # identifier",
          "strWithGrammarName": "object_entry := # identifier"
        },
        {
          "gr": "{ array: `\"[\" exps \"]\"` }",
          "digested": 0,
          "nextMap": {
            "\"[\"": "array := \"[\" # exps \"]\""
          },
          "str": "array := # \"[\" exps \"]\"",
          "strWithGrammarName": "array := # \"[\" exps \"]\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 0,
          "nextMap": {
            "\"[\"": "array := \"[\" # \"]\""
          },
          "str": "array := # \"[\" \"]\"",
          "strWithGrammarName": "array := # \"[\" \"]\""
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp_stmt := exp # \";\""
          },
          "str": "exp_stmt := # exp \";\"",
          "strWithGrammarName": "exp_stmt := # exp \";\""
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 0,
          "nextMap": {
            "const": "const_stmt := const # identifier \"=\" exp_stmt"
          },
          "str": "const_stmt := # const identifier \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := # const identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ export_stmt: `export const_stmt` }",
          "digested": 0,
          "nextMap": {
            "export": "export_stmt := export # const_stmt"
          },
          "str": "export_stmt := # export const_stmt",
          "strWithGrammarName": "export_stmt := # export const_stmt"
        },
        {
          "gr": "{ stmt: `exp_stmt` }",
          "digested": 0,
          "nextMap": {
            "exp_stmt": "stmt := exp_stmt #"
          },
          "str": "stmt := # exp_stmt",
          "strWithGrammarName": "stmt := # exp_stmt"
        },
        {
          "gr": "{ stmt: `const_stmt` }",
          "digested": 0,
          "nextMap": {
            "const_stmt": "stmt := const_stmt #"
          },
          "str": "stmt := # const_stmt",
          "strWithGrammarName": "stmt := # const_stmt"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"*\" as identifier from string \";\""
          },
          "str": "import_stmt := # import \"*\" as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"*\" as identifier from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"{\" identifier __2 \"}\" from string \";\""
          },
          "str": "import_stmt := # import \"{\" identifier __2 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"{\" identifier __2 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"{\" identifier \"}\" from string \";\""
          },
          "str": "import_stmt := # import \"{\" identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"{\" identifier \"}\" from string \";\""
        },
        {
          "gr": "{ __0: `stmt` }",
          "digested": 0,
          "nextMap": {
            "stmt": "__0 := stmt #"
          },
          "str": "__0 := # stmt",
          "strWithGrammarName": "__0 := # stmt"
        },
        {
          "gr": "{ __0: `stmt __0` }",
          "digested": 0,
          "nextMap": {
            "stmt": "__0 := stmt # __0"
          },
          "str": "__0 := # stmt __0",
          "strWithGrammarName": "__0 := # stmt __0"
        },
        {
          "gr": "{ __1: `\",\" object_entry` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__1 := \",\" # object_entry"
          },
          "str": "__1 := # \",\" object_entry",
          "strWithGrammarName": "__1 := # \",\" object_entry"
        },
        {
          "gr": "{ __1: `\",\" object_entry __1` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__1 := \",\" # object_entry __1"
          },
          "str": "__1 := # \",\" object_entry __1",
          "strWithGrammarName": "__1 := # \",\" object_entry __1"
        },
        {
          "gr": "{ __2: `\",\" identifier` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__2 := \",\" # identifier"
          },
          "str": "__2 := # \",\" identifier",
          "strWithGrammarName": "__2 := # \",\" identifier"
        },
        {
          "gr": "{ __2: `\",\" identifier __2` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__2 := \",\" # identifier __2"
          },
          "str": "__2 := # \",\" identifier __2",
          "strWithGrammarName": "__2 := # \",\" identifier __2"
        },
        {
          "gr": "{ exp: `identifier` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := identifier #",
          "strWithGrammarName": "exp := identifier #"
        },
        {
          "gr": "{ array: `\"[\" exps \"]\"` }",
          "digested": 1,
          "nextMap": {
            "exps": "array := \"[\" exps # \"]\""
          },
          "str": "array := \"[\" # exps \"]\"",
          "strWithGrammarName": "array := \"[\" # exps \"]\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 1,
          "nextMap": {
            "\"]\"": "array := \"[\" \"]\" #"
          },
          "str": "array := \"[\" # \"]\"",
          "strWithGrammarName": "array := \"[\" # \"]\""
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 1,
          "nextMap": {
            "identifier": "const_stmt := const identifier # \"=\" exp_stmt"
          },
          "str": "const_stmt := const # identifier \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := const # identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 1,
          "nextMap": {
            "\";\"": "exp_stmt := exp \";\" #"
          },
          "str": "exp_stmt := exp # \";\"",
          "strWithGrammarName": "exp_stmt := exp # \";\""
        },
        {
          "gr": "{ exp: `exp as type_name` }",
          "digested": 1,
          "nextMap": {
            "as": "exp := exp as # type_name"
          },
          "str": "exp := exp # as type_name",
          "strWithGrammarName": "exp := exp # as type_name"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 1,
          "nextMap": {
            "\"?\"": "exp := exp \"?\" # \".\" identifier"
          },
          "str": "exp := exp # \"?\" \".\" identifier",
          "strWithGrammarName": "exp := exp # \"?\" \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 1,
          "nextMap": {
            "\".\"": "exp := exp \".\" # identifier"
          },
          "str": "exp := exp # \".\" identifier",
          "strWithGrammarName": "exp := exp # \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \"(\" exps \")\"` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "exp := exp \"(\" # exps \")\""
          },
          "str": "exp := exp # \"(\" exps \")\"",
          "strWithGrammarName": "exp := exp # \"(\" exps \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "exp := exp \"(\" # \")\""
          },
          "str": "exp := exp # \"(\" \")\"",
          "strWithGrammarName": "exp := exp # \"(\" \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 1,
          "nextMap": {
            "\"[\"": "exp := exp \"[\" # exp \"]\""
          },
          "str": "exp := exp # \"[\" exp \"]\"",
          "strWithGrammarName": "exp := exp # \"[\" exp \"]\""
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 1,
          "nextMap": {
            "\"!=\"": "exp := exp \"!=\" # exp"
          },
          "str": "exp := exp # \"!=\" exp",
          "strWithGrammarName": "exp := exp # \"!=\" exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 1,
          "nextMap": {
            "\"&&\"": "exp := exp \"&&\" # exp"
          },
          "str": "exp := exp # \"&&\" exp",
          "strWithGrammarName": "exp := exp # \"&&\" exp"
        },
        {
          "gr": "{ exp: `string` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := string #",
          "strWithGrammarName": "exp := string #"
        },
        {
          "gr": "{ exp: `regex` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := regex #",
          "strWithGrammarName": "exp := regex #"
        },
        {
          "gr": "{ exp: `true` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := true #",
          "strWithGrammarName": "exp := true #"
        },
        {
          "gr": "{ exp: `false` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := false #",
          "strWithGrammarName": "exp := false #"
        },
        {
          "gr": "{ exp: `object` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := object #",
          "strWithGrammarName": "exp := object #"
        },
        {
          "gr": "{ exp: `array` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := array #",
          "strWithGrammarName": "exp := array #"
        },
        {
          "gr": "{ exp: `null` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := null #",
          "strWithGrammarName": "exp := null #"
        },
        {
          "gr": "{ exp: `undefined` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := undefined #",
          "strWithGrammarName": "exp := undefined #"
        },
        {
          "gr": "{ exp: `\"(\" exp \")\"` }",
          "digested": 1,
          "nextMap": {
            "exp": "exp := \"(\" exp # \")\""
          },
          "str": "exp := \"(\" # exp \")\"",
          "strWithGrammarName": "exp := \"(\" # exp \")\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\""
          },
          "str": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\""
          },
          "str": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "digested": 1,
          "nextMap": {
            "object_entry": "object := \"{\" object_entry # __1 \"}\""
          },
          "str": "object := \"{\" # object_entry __1 \"}\"",
          "strWithGrammarName": "object := \"{\" # object_entry __1 \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_entry \"}\"` }",
          "digested": 1,
          "nextMap": {
            "object_entry": "object := \"{\" object_entry # \"}\""
          },
          "str": "object := \"{\" # object_entry \"}\"",
          "strWithGrammarName": "object := \"{\" # object_entry \"}\""
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 1,
          "nextMap": {
            "\"}\"": "object := \"{\" \"}\" #"
          },
          "str": "object := \"{\" # \"}\"",
          "strWithGrammarName": "object := \"{\" # \"}\""
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 1,
          "nextMap": {
            "identifier": "exp := new identifier #"
          },
          "str": "exp := new # identifier",
          "strWithGrammarName": "exp := new # identifier"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 1,
          "nextMap": {
            "exp": "exp := \"!\" exp #"
          },
          "str": "exp := \"!\" # exp",
          "strWithGrammarName": "exp := \"!\" # exp"
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 1,
          "nextMap": {
            "exp": "exp := \"...\" exp #"
          },
          "str": "exp := \"...\" # exp",
          "strWithGrammarName": "exp := \"...\" # exp"
        },
        {
          "gr": "{ export_stmt: `export const_stmt` }",
          "digested": 1,
          "nextMap": {
            "const_stmt": "export_stmt := export const_stmt #"
          },
          "str": "export_stmt := export # const_stmt",
          "strWithGrammarName": "export_stmt := export # const_stmt"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"*\"": "import_stmt := import \"*\" # as identifier from string \";\""
          },
          "str": "import_stmt := import # \"*\" as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"*\" as identifier from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "import_stmt := import \"{\" # identifier __2 \"}\" from string \";\""
          },
          "str": "import_stmt := import # \"{\" identifier __2 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"{\" identifier __2 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "import_stmt := import \"{\" # identifier \"}\" from string \";\""
          },
          "str": "import_stmt := import # \"{\" identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"{\" identifier \"}\" from string \";\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "array := \"[\" \"]\" #",
          "strWithGrammarName": "array := \"[\" \"]\" #"
        },
        {
          "gr": "{ exps: `exp \",\" exps` }",
          "digested": 1,
          "nextMap": {
            "\",\"": "exps := exp \",\" # exps"
          },
          "str": "exps := exp # \",\" exps",
          "strWithGrammarName": "exps := exp # \",\" exps"
        },
        {
          "gr": "{ exps: `exp \",\"` }",
          "digested": 1,
          "nextMap": {
            "\",\"": "exps := exp \",\" #"
          },
          "str": "exps := exp # \",\"",
          "strWithGrammarName": "exps := exp # \",\""
        },
        {
          "gr": "{ exps: `exp` }",
          "digested": 1,
          "nextMap": {},
          "str": "exps := exp #",
          "strWithGrammarName": "exps := exp #"
        },
        {
          "gr": "{ array: `\"[\" exps \"]\"` }",
          "digested": 2,
          "nextMap": {
            "\"]\"": "array := \"[\" exps \"]\" #"
          },
          "str": "array := \"[\" exps # \"]\"",
          "strWithGrammarName": "array := \"[\" exps # \"]\""
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 2,
          "nextMap": {
            "\"=\"": "const_stmt := const identifier \"=\" # exp_stmt"
          },
          "str": "const_stmt := const identifier # \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := const identifier # \"=\" exp_stmt"
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"[\" exp # \"]\""
          },
          "str": "exp := exp \"[\" # exp \"]\"",
          "strWithGrammarName": "exp := exp \"[\" # exp \"]\""
        },
        {
          "gr": "{ exp: `exp as type_name` }",
          "digested": 2,
          "nextMap": {
            "type_name": "exp := exp as type_name #"
          },
          "str": "exp := exp as # type_name",
          "strWithGrammarName": "exp := exp as # type_name"
        },
        {
          "gr": "{ exp: `exp \"(\" exps \")\"` }",
          "digested": 2,
          "nextMap": {
            "exps": "exp := exp \"(\" exps # \")\""
          },
          "str": "exp := exp \"(\" # exps \")\"",
          "strWithGrammarName": "exp := exp \"(\" # exps \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 2,
          "nextMap": {
            "\")\"": "exp := exp \"(\" \")\" #"
          },
          "str": "exp := exp \"(\" # \")\"",
          "strWithGrammarName": "exp := exp \"(\" # \")\""
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 2,
          "nextMap": {
            "\".\"": "exp := exp \"?\" \".\" # identifier"
          },
          "str": "exp := exp \"?\" # \".\" identifier",
          "strWithGrammarName": "exp := exp \"?\" # \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 2,
          "nextMap": {
            "identifier": "exp := exp \".\" identifier #"
          },
          "str": "exp := exp \".\" # identifier",
          "strWithGrammarName": "exp := exp \".\" # identifier"
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"!=\" exp #"
          },
          "str": "exp := exp \"!=\" # exp",
          "strWithGrammarName": "exp := exp \"!=\" # exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"&&\" exp #"
          },
          "str": "exp := exp \"&&\" # exp",
          "strWithGrammarName": "exp := exp \"&&\" # exp"
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp_stmt := exp \";\" #",
          "strWithGrammarName": "exp_stmt := exp \";\" #"
        },
        {
          "gr": "{ exp: `\"(\" exp \")\"` }",
          "digested": 2,
          "nextMap": {
            "\")\"": "exp := \"(\" exp \")\" #"
          },
          "str": "exp := \"(\" exp # \")\"",
          "strWithGrammarName": "exp := \"(\" exp # \")\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\""
          },
          "str": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\""
          },
          "str": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ object_entry: `identifier \":\" exp` }",
          "digested": 1,
          "nextMap": {
            "\":\"": "object_entry := identifier \":\" # exp"
          },
          "str": "object_entry := identifier # \":\" exp",
          "strWithGrammarName": "object_entry := identifier # \":\" exp"
        },
        {
          "gr": "{ object_entry: `identifier` }",
          "digested": 1,
          "nextMap": {},
          "str": "object_entry := identifier #",
          "strWithGrammarName": "object_entry := identifier #"
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "object := \"{\" \"}\" #",
          "strWithGrammarName": "object := \"{\" \"}\" #"
        },
        {
          "gr": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "digested": 2,
          "nextMap": {
            "__1": "object := \"{\" object_entry __1 # \"}\""
          },
          "str": "object := \"{\" object_entry # __1 \"}\"",
          "strWithGrammarName": "object := \"{\" object_entry # __1 \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_entry \"}\"` }",
          "digested": 2,
          "nextMap": {
            "\"}\"": "object := \"{\" object_entry \"}\" #"
          },
          "str": "object := \"{\" object_entry # \"}\"",
          "strWithGrammarName": "object := \"{\" object_entry # \"}\""
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := new identifier #",
          "strWithGrammarName": "exp := new identifier #"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := \"!\" exp #",
          "strWithGrammarName": "exp := \"!\" exp #"
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := \"...\" exp #",
          "strWithGrammarName": "exp := \"...\" exp #"
        },
        {
          "gr": "{ export_stmt: `export const_stmt` }",
          "digested": 2,
          "nextMap": {},
          "str": "export_stmt := export const_stmt #",
          "strWithGrammarName": "export_stmt := export const_stmt #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "import_stmt := import \"{\" identifier # __2 \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" # identifier __2 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" # identifier __2 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "import_stmt := import \"{\" identifier # \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" # identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" # identifier \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "as": "import_stmt := import \"*\" as # identifier from string \";\""
          },
          "str": "import_stmt := import \"*\" # as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" # as identifier from string \";\""
        },
        {
          "gr": "{ exps: `exp \",\" exps` }",
          "digested": 2,
          "nextMap": {
            "exps": "exps := exp \",\" exps #"
          },
          "str": "exps := exp \",\" # exps",
          "strWithGrammarName": "exps := exp \",\" # exps"
        },
        {
          "gr": "{ exps: `exp \",\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "exps := exp \",\" #",
          "strWithGrammarName": "exps := exp \",\" #"
        },
        {
          "gr": "{ array: `\"[\" exps \"]\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "array := \"[\" exps \"]\" #",
          "strWithGrammarName": "array := \"[\" exps \"]\" #"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 3,
          "nextMap": {
            "exp_stmt": "const_stmt := const identifier \"=\" exp_stmt #"
          },
          "str": "const_stmt := const identifier \"=\" # exp_stmt",
          "strWithGrammarName": "const_stmt := const identifier \"=\" # exp_stmt"
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 3,
          "nextMap": {
            "\"]\"": "exp := exp \"[\" exp \"]\" #"
          },
          "str": "exp := exp \"[\" exp # \"]\"",
          "strWithGrammarName": "exp := exp \"[\" exp # \"]\""
        },
        {
          "gr": "{ type_name: `identifier` }",
          "digested": 1,
          "nextMap": {},
          "str": "type_name := identifier #",
          "strWithGrammarName": "type_name := identifier #"
        },
        {
          "gr": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "digested": 1,
          "nextMap": {
            "identifier": "type_name := readonly identifier # \"[\" \"]\""
          },
          "str": "type_name := readonly # identifier \"[\" \"]\"",
          "strWithGrammarName": "type_name := readonly # identifier \"[\" \"]\""
        },
        {
          "gr": "{ type_name: `const` }",
          "digested": 1,
          "nextMap": {},
          "str": "type_name := const #",
          "strWithGrammarName": "type_name := const #"
        },
        {
          "gr": "{ exp: `exp as type_name` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp as type_name #",
          "strWithGrammarName": "exp := exp as type_name #"
        },
        {
          "gr": "{ exp: `exp \"(\" exps \")\"` }",
          "digested": 3,
          "nextMap": {
            "\")\"": "exp := exp \"(\" exps \")\" #"
          },
          "str": "exp := exp \"(\" exps # \")\"",
          "strWithGrammarName": "exp := exp \"(\" exps # \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"(\" \")\" #",
          "strWithGrammarName": "exp := exp \"(\" \")\" #"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 3,
          "nextMap": {
            "identifier": "exp := exp \"?\" \".\" identifier #"
          },
          "str": "exp := exp \"?\" \".\" # identifier",
          "strWithGrammarName": "exp := exp \"?\" \".\" # identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \".\" identifier #",
          "strWithGrammarName": "exp := exp \".\" identifier #"
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"!=\" exp #",
          "strWithGrammarName": "exp := exp \"!=\" exp #"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"&&\" exp #",
          "strWithGrammarName": "exp := exp \"&&\" exp #"
        },
        {
          "gr": "{ exp: `\"(\" exp \")\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := \"(\" exp \")\" #",
          "strWithGrammarName": "exp := \"(\" exp \")\" #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ object_entry: `identifier \":\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "object_entry := identifier \":\" exp #"
          },
          "str": "object_entry := identifier \":\" # exp",
          "strWithGrammarName": "object_entry := identifier \":\" # exp"
        },
        {
          "gr": "{ __1: `\",\" object_entry` }",
          "digested": 1,
          "nextMap": {
            "object_entry": "__1 := \",\" object_entry #"
          },
          "str": "__1 := \",\" # object_entry",
          "strWithGrammarName": "__1 := \",\" # object_entry"
        },
        {
          "gr": "{ __1: `\",\" object_entry __1` }",
          "digested": 1,
          "nextMap": {
            "object_entry": "__1 := \",\" object_entry # __1"
          },
          "str": "__1 := \",\" # object_entry __1",
          "strWithGrammarName": "__1 := \",\" # object_entry __1"
        },
        {
          "gr": "{ object: `\"{\" object_entry \"}\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "object := \"{\" object_entry \"}\" #",
          "strWithGrammarName": "object := \"{\" object_entry \"}\" #"
        },
        {
          "gr": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "object := \"{\" object_entry __1 \"}\" #"
          },
          "str": "object := \"{\" object_entry __1 # \"}\"",
          "strWithGrammarName": "object := \"{\" object_entry __1 # \"}\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "__2": "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier # __2 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier # __2 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier # \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier # \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "identifier": "import_stmt := import \"*\" as identifier # from string \";\""
          },
          "str": "import_stmt := import \"*\" as # identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as # identifier from string \";\""
        },
        {
          "gr": "{ exps: `exp \",\" exps` }",
          "digested": 3,
          "nextMap": {},
          "str": "exps := exp \",\" exps #",
          "strWithGrammarName": "exps := exp \",\" exps #"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 4,
          "nextMap": {},
          "str": "const_stmt := const identifier \"=\" exp_stmt #",
          "strWithGrammarName": "const_stmt := const identifier \"=\" exp_stmt #"
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"[\" exp \"]\" #",
          "strWithGrammarName": "exp := exp \"[\" exp \"]\" #"
        },
        {
          "gr": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "digested": 2,
          "nextMap": {
            "\"[\"": "type_name := readonly identifier \"[\" # \"]\""
          },
          "str": "type_name := readonly identifier # \"[\" \"]\"",
          "strWithGrammarName": "type_name := readonly identifier # \"[\" \"]\""
        },
        {
          "gr": "{ exp: `exp \"(\" exps \")\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"(\" exps \")\" #",
          "strWithGrammarName": "exp := exp \"(\" exps \")\" #"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"?\" \".\" identifier #",
          "strWithGrammarName": "exp := exp \"?\" \".\" identifier #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 4,
          "nextMap": {
            "\")\"": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 4,
          "nextMap": {
            "\")\"": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ object_entry: `identifier \":\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "object_entry := identifier \":\" exp #",
          "strWithGrammarName": "object_entry := identifier \":\" exp #"
        },
        {
          "gr": "{ __1: `\",\" object_entry` }",
          "digested": 2,
          "nextMap": {},
          "str": "__1 := \",\" object_entry #",
          "strWithGrammarName": "__1 := \",\" object_entry #"
        },
        {
          "gr": "{ __1: `\",\" object_entry __1` }",
          "digested": 2,
          "nextMap": {
            "__1": "__1 := \",\" object_entry __1 #"
          },
          "str": "__1 := \",\" object_entry # __1",
          "strWithGrammarName": "__1 := \",\" object_entry # __1"
        },
        {
          "gr": "{ object: `\"{\" object_entry __1 \"}\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "object := \"{\" object_entry __1 \"}\" #",
          "strWithGrammarName": "object := \"{\" object_entry __1 \"}\" #"
        },
        {
          "gr": "{ __2: `\",\" identifier` }",
          "digested": 1,
          "nextMap": {
            "identifier": "__2 := \",\" identifier #"
          },
          "str": "__2 := \",\" # identifier",
          "strWithGrammarName": "__2 := \",\" # identifier"
        },
        {
          "gr": "{ __2: `\",\" identifier __2` }",
          "digested": 1,
          "nextMap": {
            "identifier": "__2 := \",\" identifier # __2"
          },
          "str": "__2 := \",\" # identifier __2",
          "strWithGrammarName": "__2 := \",\" # identifier __2"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "from": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
          },
          "str": "import_stmt := import \"{\" identifier \"}\" # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "\"}\"": "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "from": "import_stmt := import \"*\" as identifier from # string \";\""
          },
          "str": "import_stmt := import \"*\" as identifier # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier # from string \";\""
        },
        {
          "gr": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "digested": 3,
          "nextMap": {
            "\"]\"": "type_name := readonly identifier \"[\" \"]\" #"
          },
          "str": "type_name := readonly identifier \"[\" # \"]\"",
          "strWithGrammarName": "type_name := readonly identifier \"[\" # \"]\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 5,
          "nextMap": {
            "\"=>\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 5,
          "nextMap": {
            "\"=>\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\""
        },
        {
          "gr": "{ __1: `\",\" object_entry __1` }",
          "digested": 3,
          "nextMap": {},
          "str": "__1 := \",\" object_entry __1 #",
          "strWithGrammarName": "__1 := \",\" object_entry __1 #"
        },
        {
          "gr": "{ __2: `\",\" identifier` }",
          "digested": 2,
          "nextMap": {},
          "str": "__2 := \",\" identifier #",
          "strWithGrammarName": "__2 := \",\" identifier #"
        },
        {
          "gr": "{ __2: `\",\" identifier __2` }",
          "digested": 2,
          "nextMap": {
            "__2": "__2 := \",\" identifier __2 #"
          },
          "str": "__2 := \",\" identifier # __2",
          "strWithGrammarName": "__2 := \",\" identifier # __2"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "string": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "from": "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\""
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "string": "import_stmt := import \"*\" as identifier from string # \";\""
          },
          "str": "import_stmt := import \"*\" as identifier from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from # string \";\""
        },
        {
          "gr": "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "type_name := readonly identifier \"[\" \"]\" #",
          "strWithGrammarName": "type_name := readonly identifier \"[\" \"]\" #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 6,
          "nextMap": {
            "\"{\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 6,
          "nextMap": {
            "\"{\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\""
        },
        {
          "gr": "{ __2: `\",\" identifier __2` }",
          "digested": 3,
          "nextMap": {},
          "str": "__2 := \",\" identifier __2 #",
          "strWithGrammarName": "__2 := \",\" identifier __2 #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "\";\"": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "string": "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\""
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "\";\"": "import_stmt := import \"*\" as identifier from string \";\" #"
          },
          "str": "import_stmt := import \"*\" as identifier from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from string # \";\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 7,
          "nextMap": {
            "__0": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\""
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\""
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 7,
          "nextMap": {
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #"
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 7,
          "nextMap": {},
          "str": "import_stmt := import \"{\" identifier \"}\" from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 7,
          "nextMap": {
            "\";\"": "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #"
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 7,
          "nextMap": {},
          "str": "import_stmt := import \"*\" as identifier from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from string \";\" #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "digested": 8,
          "nextMap": {},
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 8,
          "nextMap": {
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #"
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\"",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\""
        },
        {
          "gr": "{ stmt: `exp_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := exp_stmt #",
          "strWithGrammarName": "stmt := exp_stmt #"
        },
        {
          "gr": "{ stmt: `const_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := const_stmt #",
          "strWithGrammarName": "stmt := const_stmt #"
        },
        {
          "gr": "{ __0: `stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "__0 := stmt #",
          "strWithGrammarName": "__0 := stmt #"
        },
        {
          "gr": "{ __0: `stmt __0` }",
          "digested": 1,
          "nextMap": {
            "__0": "__0 := stmt __0 #"
          },
          "str": "__0 := stmt # __0",
          "strWithGrammarName": "__0 := stmt # __0"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "digested": 8,
          "nextMap": {},
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #"
        },
        {
          "gr": "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "digested": 9,
          "nextMap": {},
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #",
          "strWithGrammarName": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #"
        },
        {
          "gr": "{ __0: `stmt __0` }",
          "digested": 2,
          "nextMap": {},
          "str": "__0 := stmt __0 #",
          "strWithGrammarName": "__0 := stmt __0 #"
        }
      ],
      "states": {
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nexport_stmt := # export const_stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __2 \"}\" from string \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp_stmt := # exp \";\"",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "export_stmt := # export const_stmt",
            "import_stmt := # import \"*\" as identifier from string \";\"",
            "import_stmt := # import \"{\" identifier __2 \"}\" from string \";\"",
            "import_stmt := # import \"{\" identifier \"}\" from string \";\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\"",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": "const_stmt := # const identifier \"=\" exp_stmt\nexport_stmt := export # const_stmt",
            "const_stmt": null,
            "import": "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __2 \"}\" from string \";\"",
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nexport_stmt := # export const_stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __2 \"}\" from string \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "exp := identifier #": {
          "candidates": [
            "exp := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := identifier #"
        },
        "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "array := \"[\" # exps \"]\"",
            "array := \"[\" # \"]\"",
            "exps := # exp \",\" exps",
            "exps := # exp \",\"",
            "exps := # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": "array := \"[\" \"]\" #",
            "const": null,
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexps := exp #\nexps := exp # \",\"\nexps := exp # \",\" exps",
            "\",\"": null,
            "exps": "array := \"[\" exps # \"]\"",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "const_stmt := const # identifier \"=\" exp_stmt": {
          "candidates": [
            "const_stmt := const # identifier \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": "const_stmt := const identifier # \"=\" exp_stmt",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "const_stmt := const # identifier \"=\" exp_stmt"
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\"": {
          "candidates": [
            "exp_stmt := exp # \";\"",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "exp_stmt := exp \";\" #",
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\""
        },
        "exp := string #": {
          "candidates": [
            "exp := string #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := string #"
        },
        "exp := regex #": {
          "candidates": [
            "exp := regex #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := regex #"
        },
        "exp := true #": {
          "candidates": [
            "exp := true #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := true #"
        },
        "exp := false #": {
          "candidates": [
            "exp := false #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := false #"
        },
        "exp := object #": {
          "candidates": [
            "exp := object #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := object #"
        },
        "exp := array #": {
          "candidates": [
            "exp := array #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := array #"
        },
        "exp := null #": {
          "candidates": [
            "exp := null #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := null #"
        },
        "exp := undefined #": {
          "candidates": [
            "exp := undefined #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := undefined #"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := \"(\" # exp \")\"",
            "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := \"(\" exp # \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp": {
          "candidates": [
            "object := \"{\" # object_entry __1 \"}\"",
            "object := \"{\" # object_entry \"}\"",
            "object := \"{\" # \"}\"",
            "object_entry := # identifier \":\" exp",
            "object_entry := # identifier"
          ],
          "nextMap": {
            "identifier": "object_entry := identifier #\nobject_entry := identifier # \":\" exp",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "object := \"{\" \"}\" #",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": "__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1\nobject := \"{\" object_entry # \"}\"\nobject := \"{\" object_entry # __1 \"}\"",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp"
        },
        "exp := new # identifier": {
          "candidates": [
            "exp := new # identifier"
          ],
          "nextMap": {
            "identifier": "exp := new identifier #",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := new # identifier"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := \"!\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := \"...\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "const_stmt := # const identifier \"=\" exp_stmt\nexport_stmt := export # const_stmt": {
          "candidates": [
            "export_stmt := export # const_stmt",
            "const_stmt := # const identifier \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": "export_stmt := export const_stmt #",
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "const_stmt := # const identifier \"=\" exp_stmt\nexport_stmt := export # const_stmt"
        },
        "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __2 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import # \"*\" as identifier from string \";\"",
            "import_stmt := import # \"{\" identifier __2 \"}\" from string \";\"",
            "import_stmt := import # \"{\" identifier \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __2 \"}\" from string \";\"",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": "import_stmt := import \"*\" # as identifier from string \";\"",
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __2 \"}\" from string \";\""
        },
        "array := \"[\" \"]\" #": {
          "candidates": [
            "array := \"[\" \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := \"[\" \"]\" #"
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexps := exp #\nexps := exp # \",\"\nexps := exp # \",\" exps": {
          "candidates": [
            "exps := exp # \",\" exps",
            "exps := exp # \",\"",
            "exps := exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nexps := exp \",\" #\nexps := exp \",\" # exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexps := exp #\nexps := exp # \",\"\nexps := exp # \",\" exps"
        },
        "array := \"[\" exps # \"]\"": {
          "candidates": [
            "array := \"[\" exps # \"]\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": "array := \"[\" exps \"]\" #",
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := \"[\" exps # \"]\""
        },
        "const_stmt := const identifier # \"=\" exp_stmt": {
          "candidates": [
            "const_stmt := const identifier # \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "const_stmt := const identifier # \"=\" exp_stmt"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := exp \"[\" # exp \"]\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"": {
          "candidates": [
            "exp := exp as # type_name",
            "type_name := # identifier",
            "type_name := # readonly identifier \"[\" \"]\"",
            "type_name := # const"
          ],
          "nextMap": {
            "identifier": "type_name := identifier #",
            "readonly": "type_name := readonly # identifier \"[\" \"]\"",
            "\"[\"": null,
            "\"]\"": null,
            "const": "type_name := const #",
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": "exp := exp as type_name #",
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := exp \"(\" # exps \")\"",
            "exp := exp \"(\" # \")\"",
            "exps := # exp \",\" exps",
            "exps := # exp \",\"",
            "exps := # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexps := exp #\nexps := exp # \",\"\nexps := exp # \",\" exps",
            "\",\"": null,
            "exps": "exp := exp \"(\" exps # \")\"",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": "exp := exp \"(\" \")\" #",
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "exp := exp \"?\" # \".\" identifier": {
          "candidates": [
            "exp := exp \"?\" # \".\" identifier"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": "exp := exp \"?\" \".\" # identifier",
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"?\" # \".\" identifier"
        },
        "exp := exp \".\" # identifier": {
          "candidates": [
            "exp := exp \".\" # identifier"
          ],
          "nextMap": {
            "identifier": "exp := exp \".\" identifier #",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \".\" # identifier"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := exp \"!=\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exp := exp \"&&\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "exp_stmt := exp \";\" #": {
          "candidates": [
            "exp_stmt := exp \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp_stmt := exp \";\" #"
        },
        "exp := \"(\" exp # \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := \"(\" exp # \")\"",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": "exp := \"(\" exp \")\" #",
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" exp # \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp": {
          "candidates": [
            "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "object := \"{\" # object_entry __1 \"}\"",
            "object := \"{\" # object_entry \"}\"",
            "object := \"{\" # \"}\"",
            "object_entry := # identifier \":\" exp",
            "object_entry := # identifier"
          ],
          "nextMap": {
            "identifier": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject_entry := identifier #\nobject_entry := identifier # \":\" exp",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "object := \"{\" \"}\" #",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": "__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1\nobject := \"{\" object_entry # \"}\"\nobject := \"{\" object_entry # __1 \"}\"",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" # identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp"
        },
        "object_entry := identifier #\nobject_entry := identifier # \":\" exp": {
          "candidates": [
            "object_entry := identifier # \":\" exp",
            "object_entry := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nobject_entry := identifier \":\" # exp",
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object_entry := identifier #\nobject_entry := identifier # \":\" exp"
        },
        "object := \"{\" \"}\" #": {
          "candidates": [
            "object := \"{\" \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object := \"{\" \"}\" #"
        },
        "__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1\nobject := \"{\" object_entry # \"}\"\nobject := \"{\" object_entry # __1 \"}\"": {
          "candidates": [
            "object := \"{\" object_entry # __1 \"}\"",
            "object := \"{\" object_entry # \"}\"",
            "__1 := # \",\" object_entry",
            "__1 := # \",\" object_entry __1"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": "__1 := \",\" # object_entry\n__1 := \",\" # object_entry __1\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "object := \"{\" object_entry \"}\" #",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": "object := \"{\" object_entry __1 # \"}\"",
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1\nobject := \"{\" object_entry # \"}\"\nobject := \"{\" object_entry # __1 \"}\""
        },
        "exp := new identifier #": {
          "candidates": [
            "exp := new identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := new identifier #"
        },
        "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := \"!\" exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := \"...\" exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "export_stmt := export const_stmt #": {
          "candidates": [
            "export_stmt := export const_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "export_stmt := export const_stmt #"
        },
        "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __2 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" # identifier __2 \"}\" from string \";\"",
            "import_stmt := import \"{\" # identifier \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": "__2 := # \",\" identifier\n__2 := # \",\" identifier __2\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __2 \"}\" from string \";\"",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __2 \"}\" from string \";\""
        },
        "import_stmt := import \"*\" # as identifier from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" # as identifier from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "import_stmt := import \"*\" as # identifier from string \";\"",
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" # as identifier from string \";\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nexps := exp \",\" #\nexps := exp \",\" # exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "exps := exp \",\" # exps",
            "exps := exp \",\" #",
            "exps := # exp \",\" exps",
            "exps := # exp \",\"",
            "exps := # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexps := exp #\nexps := exp # \",\"\nexps := exp # \",\" exps",
            "\",\"": null,
            "exps": "exps := exp \",\" exps #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nexps := exp \",\" #\nexps := exp \",\" # exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "array := \"[\" exps \"]\" #": {
          "candidates": [
            "array := \"[\" exps \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := \"[\" exps \"]\" #"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"": {
          "candidates": [
            "const_stmt := const identifier \"=\" # exp_stmt",
            "exp_stmt := # exp \";\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\"",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": "const_stmt := const identifier \"=\" exp_stmt #",
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\""
        },
        "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := exp \"[\" exp # \"]\"",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": "exp := exp \"[\" exp \"]\" #",
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "type_name := identifier #": {
          "candidates": [
            "type_name := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := identifier #"
        },
        "type_name := readonly # identifier \"[\" \"]\"": {
          "candidates": [
            "type_name := readonly # identifier \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "type_name := readonly identifier # \"[\" \"]\"",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := readonly # identifier \"[\" \"]\""
        },
        "type_name := const #": {
          "candidates": [
            "type_name := const #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := const #"
        },
        "exp := exp as type_name #": {
          "candidates": [
            "exp := exp as type_name #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp as type_name #"
        },
        "exp := exp \"(\" exps # \")\"": {
          "candidates": [
            "exp := exp \"(\" exps # \")\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": "exp := exp \"(\" exps \")\" #",
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"(\" exps # \")\""
        },
        "exp := exp \"(\" \")\" #": {
          "candidates": [
            "exp := exp \"(\" \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"(\" \")\" #"
        },
        "exp := exp \"?\" \".\" # identifier": {
          "candidates": [
            "exp := exp \"?\" \".\" # identifier"
          ],
          "nextMap": {
            "identifier": "exp := exp \"?\" \".\" identifier #",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"?\" \".\" # identifier"
        },
        "exp := exp \".\" identifier #": {
          "candidates": [
            "exp := exp \".\" identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \".\" identifier #"
        },
        "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := exp \"!=\" exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name": {
          "candidates": [
            "exp := exp \"&&\" exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name"
        },
        "exp := \"(\" exp \")\" #": {
          "candidates": [
            "exp := \"(\" exp \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" exp \")\" #"
        },
        "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject_entry := identifier #\nobject_entry := identifier # \":\" exp": {
          "candidates": [
            "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\"",
            "object_entry := identifier # \":\" exp",
            "object_entry := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\"",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nobject_entry := identifier \":\" # exp",
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier # \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nobject_entry := identifier #\nobject_entry := identifier # \":\" exp"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nobject_entry := identifier \":\" # exp": {
          "candidates": [
            "object_entry := identifier \":\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nobject_entry := identifier \":\" exp #",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nobject_entry := identifier \":\" # exp"
        },
        "__1 := \",\" # object_entry\n__1 := \",\" # object_entry __1\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp": {
          "candidates": [
            "__1 := \",\" # object_entry",
            "__1 := \",\" # object_entry __1",
            "object_entry := # identifier \":\" exp",
            "object_entry := # identifier"
          ],
          "nextMap": {
            "identifier": "object_entry := identifier #\nobject_entry := identifier # \":\" exp",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": "__1 := \",\" object_entry #\n__1 := \",\" object_entry # __1\n__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__1 := \",\" # object_entry\n__1 := \",\" # object_entry __1\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp"
        },
        "object := \"{\" object_entry \"}\" #": {
          "candidates": [
            "object := \"{\" object_entry \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object := \"{\" object_entry \"}\" #"
        },
        "object := \"{\" object_entry __1 # \"}\"": {
          "candidates": [
            "object := \"{\" object_entry __1 # \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "object := \"{\" object_entry __1 \"}\" #",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object := \"{\" object_entry __1 # \"}\""
        },
        "__2 := # \",\" identifier\n__2 := # \",\" identifier __2\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __2 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier # __2 \"}\" from string \";\"",
            "import_stmt := import \"{\" identifier # \"}\" from string \";\"",
            "__2 := # \",\" identifier",
            "__2 := # \",\" identifier __2"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": "__2 := \",\" # identifier\n__2 := \",\" # identifier __2",
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "import_stmt := import \"{\" identifier \"}\" # from string \";\"",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\"",
            "stmt": null
          },
          "str": "__2 := # \",\" identifier\n__2 := # \",\" identifier __2\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __2 \"}\" from string \";\""
        },
        "import_stmt := import \"*\" as # identifier from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as # identifier from string \";\""
          ],
          "nextMap": {
            "identifier": "import_stmt := import \"*\" as identifier # from string \";\"",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" as # identifier from string \";\""
        },
        "exps := exp \",\" exps #": {
          "candidates": [
            "exps := exp \",\" exps #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exps := exp \",\" exps #"
        },
        "const_stmt := const identifier \"=\" exp_stmt #": {
          "candidates": [
            "const_stmt := const identifier \"=\" exp_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "const_stmt := const identifier \"=\" exp_stmt #"
        },
        "exp := exp \"[\" exp \"]\" #": {
          "candidates": [
            "exp := exp \"[\" exp \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"[\" exp \"]\" #"
        },
        "type_name := readonly identifier # \"[\" \"]\"": {
          "candidates": [
            "type_name := readonly identifier # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "type_name := readonly identifier \"[\" # \"]\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := readonly identifier # \"[\" \"]\""
        },
        "exp := exp \"(\" exps \")\" #": {
          "candidates": [
            "exp := exp \"(\" exps \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"(\" exps \")\" #"
        },
        "exp := exp \"?\" \".\" identifier #": {
          "candidates": [
            "exp := exp \"?\" \".\" identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp \"?\" \".\" identifier #"
        },
        "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\"": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\"",
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" # \")\" \"=>\" \"{\" __0 \"}\""
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nobject_entry := identifier \":\" exp #": {
          "candidates": [
            "object_entry := identifier \":\" exp #",
            "exp := exp # as type_name",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exps \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": "exp := exp as # type_name\ntype_name := # const\ntype_name := # identifier\ntype_name := # readonly identifier \"[\" \"]\"",
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exps \")\"\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nobject_entry := identifier \":\" exp #"
        },
        "__1 := \",\" object_entry #\n__1 := \",\" object_entry # __1\n__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1": {
          "candidates": [
            "__1 := \",\" object_entry #",
            "__1 := \",\" object_entry # __1",
            "__1 := # \",\" object_entry",
            "__1 := # \",\" object_entry __1"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": "__1 := \",\" # object_entry\n__1 := \",\" # object_entry __1\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": "__1 := \",\" object_entry __1 #",
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__1 := \",\" object_entry #\n__1 := \",\" object_entry # __1\n__1 := # \",\" object_entry\n__1 := # \",\" object_entry __1"
        },
        "object := \"{\" object_entry __1 \"}\" #": {
          "candidates": [
            "object := \"{\" object_entry __1 \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "object := \"{\" object_entry __1 \"}\" #"
        },
        "__2 := \",\" # identifier\n__2 := \",\" # identifier __2": {
          "candidates": [
            "__2 := \",\" # identifier",
            "__2 := \",\" # identifier __2"
          ],
          "nextMap": {
            "identifier": "__2 := \",\" identifier #\n__2 := \",\" identifier # __2\n__2 := # \",\" identifier\n__2 := # \",\" identifier __2",
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__2 := \",\" # identifier\n__2 := \",\" # identifier __2"
        },
        "import_stmt := import \"{\" identifier \"}\" # from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": "import_stmt := import \"{\" identifier \"}\" from # string \";\"",
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
        },
        "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\"",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier __2 # \"}\" from string \";\""
        },
        "import_stmt := import \"*\" as identifier # from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": "import_stmt := import \"*\" as identifier from # string \";\"",
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" as identifier # from string \";\""
        },
        "type_name := readonly identifier \"[\" # \"]\"": {
          "candidates": [
            "type_name := readonly identifier \"[\" # \"]\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": "type_name := readonly identifier \"[\" \"]\" #",
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := readonly identifier \"[\" # \"]\""
        },
        "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\"": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\"",
            "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\"",
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" # \"=>\" \"{\" __0 \"}\""
        },
        "__1 := \",\" object_entry __1 #": {
          "candidates": [
            "__1 := \",\" object_entry __1 #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__1 := \",\" object_entry __1 #"
        },
        "__2 := \",\" identifier #\n__2 := \",\" identifier # __2\n__2 := # \",\" identifier\n__2 := # \",\" identifier __2": {
          "candidates": [
            "__2 := \",\" identifier #",
            "__2 := \",\" identifier # __2",
            "__2 := # \",\" identifier",
            "__2 := # \",\" identifier __2"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": "__2 := \",\" # identifier\n__2 := \",\" # identifier __2",
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": "__2 := \",\" identifier __2 #",
            "stmt": null
          },
          "str": "__2 := \",\" identifier #\n__2 := \",\" identifier # __2\n__2 := # \",\" identifier\n__2 := # \",\" identifier __2"
        },
        "import_stmt := import \"{\" identifier \"}\" from # string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": "import_stmt := import \"{\" identifier \"}\" from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
        },
        "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\"",
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" # from string \";\""
        },
        "import_stmt := import \"*\" as identifier from # string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": "import_stmt := import \"*\" as identifier from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" as identifier from # string \";\""
        },
        "type_name := readonly identifier \"[\" \"]\" #": {
          "candidates": [
            "type_name := readonly identifier \"[\" \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "type_name := readonly identifier \"[\" \"]\" #"
        },
        "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\"": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\"",
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": "__0 := # stmt\n__0 := # stmt __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" # \"{\" __0 \"}\""
        },
        "__2 := \",\" identifier __2 #": {
          "candidates": [
            "__2 := \",\" identifier __2 #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__2 := \",\" identifier __2 #"
        },
        "import_stmt := import \"{\" identifier \"}\" from string # \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"{\" identifier \"}\" from string \";\" #",
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
        },
        "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from # string \";\""
        },
        "import_stmt := import \"*\" as identifier from string # \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"*\" as identifier from string \";\" #",
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" as identifier from string # \";\""
        },
        "__0 := # stmt\n__0 := # stmt __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\"",
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\"",
            "__0 := # stmt",
            "__0 := # stmt __0",
            "stmt := # exp_stmt",
            "stmt := # const_stmt",
            "exp_stmt := # exp \";\"",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\"",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #",
            "\"=>\"": null,
            "__0": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\"",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "export": null,
            "const_stmt": "stmt := const_stmt #",
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": "__0 := # stmt\n__0 := # stmt __0\n__0 := stmt #\n__0 := stmt # __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt"
          },
          "str": "__0 := # stmt\n__0 := # stmt __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # \"}\"\nexp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" # __0 \"}\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt"
        },
        "import_stmt := import \"{\" identifier \"}\" from string \";\" #": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
        },
        "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #",
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from string # \";\""
        },
        "import_stmt := import \"*\" as identifier from string \";\" #": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"*\" as identifier from string \";\" #"
        },
        "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\" #"
        },
        "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\"": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #",
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 # \"}\""
        },
        "stmt := exp_stmt #": {
          "candidates": [
            "stmt := exp_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "stmt := exp_stmt #"
        },
        "stmt := const_stmt #": {
          "candidates": [
            "stmt := const_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "stmt := const_stmt #"
        },
        "__0 := # stmt\n__0 := # stmt __0\n__0 := stmt #\n__0 := stmt # __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt": {
          "candidates": [
            "__0 := stmt #",
            "__0 := stmt # __0",
            "__0 := # stmt",
            "__0 := # stmt __0",
            "stmt := # exp_stmt",
            "stmt := # const_stmt",
            "exp_stmt := # exp \";\"",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # null",
            "exp := # undefined",
            "exp := # exp as type_name",
            "exp := # \"(\" exp \")\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"",
            "exp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # \"...\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exps \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_entry __1 \"}\"",
            "object := # \"{\" object_entry \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exps \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "readonly": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exps \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexps := # exp\nexps := # exp \",\"\nexps := # exp \",\" exps\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"]\"": null,
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exps \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp := exp # as type_name\nexp_stmt := exp # \";\"",
            "\",\"": null,
            "exps": null,
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "null": "exp := null #",
            "undefined": "exp := undefined #",
            "as": null,
            "type_name": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := \"(\" # \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := \"(\" # exp \")\"\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\")\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_entry \"}\"\nobject := \"{\" # object_entry __1 \"}\"\nobject_entry := # identifier\nobject_entry := # identifier \":\" exp",
            "\"}\"": null,
            "\"=>\"": null,
            "__0": "__0 := stmt __0 #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "export": null,
            "const_stmt": "stmt := const_stmt #",
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": "__0 := # stmt\n__0 := # stmt __0\n__0 := stmt #\n__0 := stmt # __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt"
          },
          "str": "__0 := # stmt\n__0 := # stmt __0\n__0 := stmt #\n__0 := stmt # __0\narray := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"\nstmt := # const_stmt\nstmt := # exp_stmt"
        },
        "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #": {
          "candidates": [
            "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "import_stmt := import \"{\" identifier __2 \"}\" from string \";\" #"
        },
        "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #": {
          "candidates": [
            "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "exp := \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\" #"
        },
        "__0 := stmt __0 #": {
          "candidates": [
            "__0 := stmt __0 #"
          ],
          "nextMap": {
            "identifier": null,
            "readonly": null,
            "\"[\"": null,
            "\"]\"": null,
            "const": null,
            "exp": null,
            "\",\"": null,
            "exps": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "null": null,
            "undefined": null,
            "as": null,
            "type_name": null,
            "\"(\"": null,
            "\")\"": null,
            "\"{\"": null,
            "\"}\"": null,
            "\"=>\"": null,
            "__0": null,
            "new": null,
            "\"!\"": null,
            "\"...\"": null,
            "\"?\"": null,
            "\".\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "object_entry": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "\"=\"": null,
            "exp_stmt": null,
            "export": null,
            "const_stmt": null,
            "import": null,
            "\"*\"": null,
            "from": null,
            "__2": null,
            "stmt": null
          },
          "str": "__0 := stmt __0 #"
        }
      },
      "entryState": "array := # \"[\" \"]\"\narray := # \"[\" exps \"]\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"\nexp := # \"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"\nexp := # \"(\" exp \")\"\nexp := # \"...\" exp\nexp := # array\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exps \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # exp as type_name\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # null\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := # undefined\nexp_stmt := # exp \";\"\nexport_stmt := # export const_stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __2 \"}\" from string \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_entry \"}\"\nobject := # \"{\" object_entry __1 \"}\"",
      "NTClosures": {
        "type_name": [
          "{ type_name: `identifier` }",
          "{ type_name: `readonly identifier \"[\" \"]\"` }",
          "{ type_name: `const` }"
        ],
        "exps": [
          "{ exps: `exp \",\" exps` }",
          "{ exps: `exp \",\"` }",
          "{ exps: `exp` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `null` }",
          "{ exp: `undefined` }",
          "{ exp: `exp as type_name` }",
          "{ exp: `\"(\" exp \")\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exps \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "exp": [
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `null` }",
          "{ exp: `undefined` }",
          "{ exp: `exp as type_name` }",
          "{ exp: `\"(\" exp \")\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exps \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "object": [
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }"
        ],
        "object_entry": [
          "{ object_entry: `identifier \":\" exp` }",
          "{ object_entry: `identifier` }"
        ],
        "array": [
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "exp_stmt": [
          "{ exp_stmt: `exp \";\"` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `null` }",
          "{ exp: `undefined` }",
          "{ exp: `exp as type_name` }",
          "{ exp: `\"(\" exp \")\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exps \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "const_stmt": [
          "{ const_stmt: `const identifier \"=\" exp_stmt` }"
        ],
        "export_stmt": [
          "{ export_stmt: `export const_stmt` }"
        ],
        "stmt": [
          "{ stmt: `exp_stmt` }",
          "{ stmt: `const_stmt` }",
          "{ exp_stmt: `exp \";\"` }",
          "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `null` }",
          "{ exp: `undefined` }",
          "{ exp: `exp as type_name` }",
          "{ exp: `\"(\" exp \")\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exps \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "import_stmt": [
          "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "{ import_stmt: `import \"{\" identifier __2 \"}\" from string \";\"` }",
          "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }"
        ],
        "__0": [
          "{ __0: `stmt` }",
          "{ __0: `stmt __0` }",
          "{ stmt: `exp_stmt` }",
          "{ stmt: `const_stmt` }",
          "{ exp_stmt: `exp \";\"` }",
          "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `null` }",
          "{ exp: `undefined` }",
          "{ exp: `exp as type_name` }",
          "{ exp: `\"(\" exp \")\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" __0 \"}\"` }",
          "{ exp: `\"(\" \"{\" identifier \"}\" \")\" \"=>\" \"{\" \"}\"` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exps \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_entry __1 \"}\"` }",
          "{ object: `\"{\" object_entry \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exps \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "__1": [
          "{ __1: `\",\" object_entry` }",
          "{ __1: `\",\" object_entry __1` }"
        ],
        "__2": [
          "{ __2: `\",\" identifier` }",
          "{ __2: `\",\" identifier __2` }"
        ]
      },
      "firstSets": {
        "type_name": [
          "identifier",
          "readonly",
          "const"
        ],
        "exps": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "exp": [
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "exp",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "object": [
          "\"{\""
        ],
        "object_entry": [
          "identifier"
        ],
        "array": [
          "\"[\""
        ],
        "exp_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "const_stmt": [
          "const"
        ],
        "export_stmt": [
          "export"
        ],
        "stmt": [
          "exp_stmt",
          "const_stmt",
          "exp",
          "const",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "import_stmt": [
          "import"
        ],
        "__0": [
          "stmt",
          "exp_stmt",
          "const_stmt",
          "exp",
          "const",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "__1": [
          "\",\""
        ],
        "__2": [
          "\",\""
        ]
      },
      "followSets": {
        "type_name": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "exps": [
          "\")\"",
          "\"]\""
        ],
        "exp": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "object": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "object_entry": [
          "__1",
          "\",\"",
          "\"}\""
        ],
        "array": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "exp_stmt": [
          "__0",
          "stmt",
          "exp_stmt",
          "const_stmt",
          "exp",
          "const",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\"}\""
        ],
        "const_stmt": [
          "__0",
          "stmt",
          "exp_stmt",
          "const_stmt",
          "exp",
          "const",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\"}\""
        ],
        "export_stmt": [],
        "stmt": [
          "__0",
          "stmt",
          "exp_stmt",
          "const_stmt",
          "exp",
          "const",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\"}\""
        ],
        "import_stmt": [],
        "__0": [
          "\"}\""
        ],
        "__1": [
          "\"}\""
        ],
        "__2": [
          "\"}\""
        ],
        "identifier": [
          "\"[\"",
          "\"}\"",
          "\":\"",
          "\"=\"",
          "from",
          "__2",
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1"
        ],
        "readonly": [
          "identifier"
        ],
        "": [
          "\"]\"",
          "exps",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "null",
          "undefined",
          "\"(\"",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\")\"",
          "\"=>\"",
          "__0",
          "stmt",
          "exp_stmt",
          "const_stmt",
          "const",
          "\"}\"",
          "\".\"",
          "object_entry",
          "as",
          "from",
          "\",\"",
          "\"?\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1"
        ],
        "const": [
          "identifier",
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "string": [
          "\";\"",
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "__1",
          "\"}\""
        ],
        "regex": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "true": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "false": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "null": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "undefined": [
          "\",\"",
          "as",
          "\")\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "__1",
          "\"}\""
        ],
        "as": [
          "type_name",
          "identifier",
          "readonly",
          "const"
        ],
        "new": [
          "identifier"
        ],
        "export": [
          "const_stmt",
          "const"
        ],
        "import": [
          "\"*\"",
          "\"{\""
        ],
        "from": [
          "string"
        ]
      },
      "cascadeQueryPrefix": "__"
    }
  }
}