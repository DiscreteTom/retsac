{
  "data": {
    "dfa": {
      "NTs": [
        "exp",
        "object",
        "object_item",
        "array",
        "exp_stmt",
        "if_stmt",
        "const_stmt",
        "let_stmt",
        "while_stmt",
        "block_stmt",
        "stmt",
        "import_stmt",
        "__0",
        "__1",
        "__2",
        "__3"
      ],
      "entryNTs": [
        "import_stmt",
        "stmt"
      ],
      "grammars": [
        {
          "type": 0,
          "kind": "identifier",
          "name": "identifier",
          "str": "Grammar({ type: \"T\", kind: \"identifier\", name: \"identifier\", text: undefined })",
          "strWithName": "identifier",
          "strWithoutName": "identifier",
          "grammarStrWithName": "identifier",
          "grammarStrWithoutName": "identifier"
        },
        {
          "type": 0,
          "kind": "string",
          "name": "string",
          "str": "Grammar({ type: \"T\", kind: \"string\", name: \"string\", text: undefined })",
          "strWithName": "string",
          "strWithoutName": "string",
          "grammarStrWithName": "string",
          "grammarStrWithoutName": "string"
        },
        {
          "type": 0,
          "kind": "regex",
          "name": "regex",
          "str": "Grammar({ type: \"T\", kind: \"regex\", name: \"regex\", text: undefined })",
          "strWithName": "regex",
          "strWithoutName": "regex",
          "grammarStrWithName": "regex",
          "grammarStrWithoutName": "regex"
        },
        {
          "type": 0,
          "kind": "true",
          "name": "true",
          "str": "Grammar({ type: \"T\", kind: \"true\", name: \"true\", text: undefined })",
          "strWithName": "true",
          "strWithoutName": "true",
          "grammarStrWithName": "true",
          "grammarStrWithoutName": "true"
        },
        {
          "type": 0,
          "kind": "false",
          "name": "false",
          "str": "Grammar({ type: \"T\", kind: \"false\", name: \"false\", text: undefined })",
          "strWithName": "false",
          "strWithoutName": "false",
          "grammarStrWithName": "false",
          "grammarStrWithoutName": "false"
        },
        {
          "type": 1,
          "kind": "object",
          "name": "object",
          "str": "Grammar({ type: \"NT\", kind: \"object\", name: \"object\", text: undefined })",
          "strWithName": "object",
          "strWithoutName": "object",
          "grammarStrWithName": "object",
          "grammarStrWithoutName": "object"
        },
        {
          "type": 1,
          "kind": "array",
          "name": "array",
          "str": "Grammar({ type: \"NT\", kind: \"array\", name: \"array\", text: undefined })",
          "strWithName": "array",
          "strWithoutName": "array",
          "grammarStrWithName": "array",
          "grammarStrWithoutName": "array"
        },
        {
          "type": 0,
          "kind": "break",
          "name": "break",
          "str": "Grammar({ type: \"T\", kind: \"break\", name: \"break\", text: undefined })",
          "strWithName": "break",
          "strWithoutName": "break",
          "grammarStrWithName": "break",
          "grammarStrWithoutName": "break"
        },
        {
          "type": 0,
          "kind": "new",
          "name": "new",
          "str": "Grammar({ type: \"T\", kind: \"new\", name: \"new\", text: undefined })",
          "strWithName": "new",
          "strWithoutName": "new",
          "grammarStrWithName": "new",
          "grammarStrWithoutName": "new"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "!",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"!\" })",
          "strWithName": "<anonymous>: \"!\"",
          "strWithoutName": "<anonymous>: \"!\"",
          "grammarStrWithName": "\"!\"",
          "grammarStrWithoutName": "\"!\""
        },
        {
          "type": 1,
          "kind": "exp",
          "name": "exp",
          "str": "Grammar({ type: \"NT\", kind: \"exp\", name: \"exp\", text: undefined })",
          "strWithName": "exp",
          "strWithoutName": "exp",
          "grammarStrWithName": "exp",
          "grammarStrWithoutName": "exp"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "?",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"?\" })",
          "strWithName": "<anonymous>: \"?\"",
          "strWithoutName": "<anonymous>: \"?\"",
          "grammarStrWithName": "\"?\"",
          "grammarStrWithoutName": "\"?\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ".",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \".\" })",
          "strWithName": "<anonymous>: \".\"",
          "strWithoutName": "<anonymous>: \".\"",
          "grammarStrWithName": "\".\"",
          "grammarStrWithoutName": "\".\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "(",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"(\" })",
          "strWithName": "<anonymous>: \"(\"",
          "strWithoutName": "<anonymous>: \"(\"",
          "grammarStrWithName": "\"(\"",
          "grammarStrWithoutName": "\"(\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ")",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \")\" })",
          "strWithName": "<anonymous>: \")\"",
          "strWithoutName": "<anonymous>: \")\"",
          "grammarStrWithName": "\")\"",
          "grammarStrWithoutName": "\")\""
        },
        {
          "type": 1,
          "kind": "__0",
          "name": "__0",
          "str": "Grammar({ type: \"NT\", kind: \"__0\", name: \"__0\", text: undefined })",
          "strWithName": "__0",
          "strWithoutName": "__0",
          "grammarStrWithName": "__0",
          "grammarStrWithoutName": "__0"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "[",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"[\" })",
          "strWithName": "<anonymous>: \"[\"",
          "strWithoutName": "<anonymous>: \"[\"",
          "grammarStrWithName": "\"[\"",
          "grammarStrWithoutName": "\"[\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "]",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"]\" })",
          "strWithName": "<anonymous>: \"]\"",
          "strWithoutName": "<anonymous>: \"]\"",
          "grammarStrWithName": "\"]\"",
          "grammarStrWithoutName": "\"]\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "...",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"...\" })",
          "strWithName": "<anonymous>: \"...\"",
          "strWithoutName": "<anonymous>: \"...\"",
          "grammarStrWithName": "\"...\"",
          "grammarStrWithoutName": "\"...\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "!=",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"!=\" })",
          "strWithName": "<anonymous>: \"!=\"",
          "strWithoutName": "<anonymous>: \"!=\"",
          "grammarStrWithName": "\"!=\"",
          "grammarStrWithoutName": "\"!=\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "&&",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"&&\" })",
          "strWithName": "<anonymous>: \"&&\"",
          "strWithoutName": "<anonymous>: \"&&\"",
          "grammarStrWithName": "\"&&\"",
          "grammarStrWithoutName": "\"&&\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "{",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"{\" })",
          "strWithName": "<anonymous>: \"{\"",
          "strWithoutName": "<anonymous>: \"{\"",
          "grammarStrWithName": "\"{\"",
          "grammarStrWithoutName": "\"{\""
        },
        {
          "type": 1,
          "kind": "object_item",
          "name": "object_item",
          "str": "Grammar({ type: \"NT\", kind: \"object_item\", name: \"object_item\", text: undefined })",
          "strWithName": "object_item",
          "strWithoutName": "object_item",
          "grammarStrWithName": "object_item",
          "grammarStrWithoutName": "object_item"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "}",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"}\" })",
          "strWithName": "<anonymous>: \"}\"",
          "strWithoutName": "<anonymous>: \"}\"",
          "grammarStrWithName": "\"}\"",
          "grammarStrWithoutName": "\"}\""
        },
        {
          "type": 1,
          "kind": "__1",
          "name": "__1",
          "str": "Grammar({ type: \"NT\", kind: \"__1\", name: \"__1\", text: undefined })",
          "strWithName": "__1",
          "strWithoutName": "__1",
          "grammarStrWithName": "__1",
          "grammarStrWithoutName": "__1"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ":",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \":\" })",
          "strWithName": "<anonymous>: \":\"",
          "strWithoutName": "<anonymous>: \":\"",
          "grammarStrWithName": "\":\"",
          "grammarStrWithoutName": "\":\""
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ";",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \";\" })",
          "strWithName": "<anonymous>: \";\"",
          "strWithoutName": "<anonymous>: \";\"",
          "grammarStrWithName": "\";\"",
          "grammarStrWithoutName": "\";\""
        },
        {
          "type": 0,
          "kind": "if",
          "name": "if",
          "str": "Grammar({ type: \"T\", kind: \"if\", name: \"if\", text: undefined })",
          "strWithName": "if",
          "strWithoutName": "if",
          "grammarStrWithName": "if",
          "grammarStrWithoutName": "if"
        },
        {
          "type": 1,
          "kind": "stmt",
          "name": "stmt",
          "str": "Grammar({ type: \"NT\", kind: \"stmt\", name: \"stmt\", text: undefined })",
          "strWithName": "stmt",
          "strWithoutName": "stmt",
          "grammarStrWithName": "stmt",
          "grammarStrWithoutName": "stmt"
        },
        {
          "type": 0,
          "kind": "const",
          "name": "const",
          "str": "Grammar({ type: \"T\", kind: \"const\", name: \"const\", text: undefined })",
          "strWithName": "const",
          "strWithoutName": "const",
          "grammarStrWithName": "const",
          "grammarStrWithoutName": "const"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "=",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"=\" })",
          "strWithName": "<anonymous>: \"=\"",
          "strWithoutName": "<anonymous>: \"=\"",
          "grammarStrWithName": "\"=\"",
          "grammarStrWithoutName": "\"=\""
        },
        {
          "type": 1,
          "kind": "exp_stmt",
          "name": "exp_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"exp_stmt\", name: \"exp_stmt\", text: undefined })",
          "strWithName": "exp_stmt",
          "strWithoutName": "exp_stmt",
          "grammarStrWithName": "exp_stmt",
          "grammarStrWithoutName": "exp_stmt"
        },
        {
          "type": 0,
          "kind": "let",
          "name": "let",
          "str": "Grammar({ type: \"T\", kind: \"let\", name: \"let\", text: undefined })",
          "strWithName": "let",
          "strWithoutName": "let",
          "grammarStrWithName": "let",
          "grammarStrWithoutName": "let"
        },
        {
          "type": 0,
          "kind": "while",
          "name": "while",
          "str": "Grammar({ type: \"T\", kind: \"while\", name: \"while\", text: undefined })",
          "strWithName": "while",
          "strWithoutName": "while",
          "grammarStrWithName": "while",
          "grammarStrWithoutName": "while"
        },
        {
          "type": 1,
          "kind": "__2",
          "name": "__2",
          "str": "Grammar({ type: \"NT\", kind: \"__2\", name: \"__2\", text: undefined })",
          "strWithName": "__2",
          "strWithoutName": "__2",
          "grammarStrWithName": "__2",
          "grammarStrWithoutName": "__2"
        },
        {
          "type": 1,
          "kind": "if_stmt",
          "name": "if_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"if_stmt\", name: \"if_stmt\", text: undefined })",
          "strWithName": "if_stmt",
          "strWithoutName": "if_stmt",
          "grammarStrWithName": "if_stmt",
          "grammarStrWithoutName": "if_stmt"
        },
        {
          "type": 1,
          "kind": "const_stmt",
          "name": "const_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"const_stmt\", name: \"const_stmt\", text: undefined })",
          "strWithName": "const_stmt",
          "strWithoutName": "const_stmt",
          "grammarStrWithName": "const_stmt",
          "grammarStrWithoutName": "const_stmt"
        },
        {
          "type": 1,
          "kind": "let_stmt",
          "name": "let_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"let_stmt\", name: \"let_stmt\", text: undefined })",
          "strWithName": "let_stmt",
          "strWithoutName": "let_stmt",
          "grammarStrWithName": "let_stmt",
          "grammarStrWithoutName": "let_stmt"
        },
        {
          "type": 1,
          "kind": "while_stmt",
          "name": "while_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"while_stmt\", name: \"while_stmt\", text: undefined })",
          "strWithName": "while_stmt",
          "strWithoutName": "while_stmt",
          "grammarStrWithName": "while_stmt",
          "grammarStrWithoutName": "while_stmt"
        },
        {
          "type": 1,
          "kind": "block_stmt",
          "name": "block_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"block_stmt\", name: \"block_stmt\", text: undefined })",
          "strWithName": "block_stmt",
          "strWithoutName": "block_stmt",
          "grammarStrWithName": "block_stmt",
          "grammarStrWithoutName": "block_stmt"
        },
        {
          "type": 0,
          "kind": "import",
          "name": "import",
          "str": "Grammar({ type: \"T\", kind: \"import\", name: \"import\", text: undefined })",
          "strWithName": "import",
          "strWithoutName": "import",
          "grammarStrWithName": "import",
          "grammarStrWithoutName": "import"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": "*",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \"*\" })",
          "strWithName": "<anonymous>: \"*\"",
          "strWithoutName": "<anonymous>: \"*\"",
          "grammarStrWithName": "\"*\"",
          "grammarStrWithoutName": "\"*\""
        },
        {
          "type": 0,
          "kind": "as",
          "name": "as",
          "str": "Grammar({ type: \"T\", kind: \"as\", name: \"as\", text: undefined })",
          "strWithName": "as",
          "strWithoutName": "as",
          "grammarStrWithName": "as",
          "grammarStrWithoutName": "as"
        },
        {
          "type": 0,
          "kind": "from",
          "name": "from",
          "str": "Grammar({ type: \"T\", kind: \"from\", name: \"from\", text: undefined })",
          "strWithName": "from",
          "strWithoutName": "from",
          "grammarStrWithName": "from",
          "grammarStrWithoutName": "from"
        },
        {
          "type": 1,
          "kind": "__3",
          "name": "__3",
          "str": "Grammar({ type: \"NT\", kind: \"__3\", name: \"__3\", text: undefined })",
          "strWithName": "__3",
          "strWithoutName": "__3",
          "grammarStrWithName": "__3",
          "grammarStrWithoutName": "__3"
        },
        {
          "type": 0,
          "kind": "",
          "name": "",
          "text": ",",
          "str": "Grammar({ type: \"T\", kind: \"\", name: \"\", text: \",\" })",
          "strWithName": "<anonymous>: \",\"",
          "strWithoutName": "<anonymous>: \",\"",
          "grammarStrWithName": "\",\"",
          "grammarStrWithoutName": "\",\""
        },
        {
          "type": 1,
          "kind": "import_stmt",
          "name": "import_stmt",
          "str": "Grammar({ type: \"NT\", kind: \"import_stmt\", name: \"import_stmt\", text: undefined })",
          "strWithName": "import_stmt",
          "strWithoutName": "import_stmt",
          "grammarStrWithName": "import_stmt",
          "grammarStrWithoutName": "import_stmt"
        }
      ],
      "grammarRules": [
        {
          "NT": "exp",
          "rule": [
            "identifier"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ object_item: `identifier \":\" exp` }",
              "next": [
                "\":\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 1,
              "anotherRule": "{ object_item: `identifier` }",
              "next": [
                "\"?\"",
                "\".\"",
                "\"(\"",
                "\")\"",
                "__0",
                "\",\"",
                "\"[\"",
                "\"]\"",
                "\"!=\"",
                "\"&&\"",
                "\";\"",
                "\":\"",
                "\"=\"",
                "from",
                "\"}\"",
                "__3",
                "exp",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"{\"",
                "object_item",
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "if",
                "const",
                "let",
                "while",
                "__2",
                "as",
                "__1"
              ],
              "handleEnd": false,
              "resolvers": [
                1
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object_item: `identifier \":\" exp` }",
              "handleEnd": false,
              "next": [
                "\":\""
              ],
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ object_item: `identifier` }",
              "handleEnd": false,
              "next": [
                "\"?\"",
                "\".\"",
                "\"(\"",
                "\")\"",
                "__0",
                "\",\"",
                "\"[\"",
                "\"]\"",
                "\"!=\"",
                "\"&&\"",
                "\";\"",
                "\":\"",
                "\"=\"",
                "from",
                "\"}\"",
                "__3",
                "exp",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"{\"",
                "object_item",
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "if",
                "const",
                "let",
                "while",
                "__2",
                "as",
                "__1"
              ],
              "accepter": true
            }
          ],
          "str": "{ exp: `identifier` }",
          "strWithGrammarName": "{ exp: `identifier` }",
          "strWithoutGrammarName": "{ exp: `identifier` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "string"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `string` }",
          "strWithGrammarName": "{ exp: `string` }",
          "strWithoutGrammarName": "{ exp: `string` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "regex"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `regex` }",
          "strWithGrammarName": "{ exp: `regex` }",
          "strWithoutGrammarName": "{ exp: `regex` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "true"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `true` }",
          "strWithGrammarName": "{ exp: `true` }",
          "strWithoutGrammarName": "{ exp: `true` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "false"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `false` }",
          "strWithGrammarName": "{ exp: `false` }",
          "strWithoutGrammarName": "{ exp: `false` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "object"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `object` }",
          "strWithGrammarName": "{ exp: `object` }",
          "strWithoutGrammarName": "{ exp: `object` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "array"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `array` }",
          "strWithGrammarName": "{ exp: `array` }",
          "strWithoutGrammarName": "{ exp: `array` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "break"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `break` }",
          "strWithGrammarName": "{ exp: `break` }",
          "strWithoutGrammarName": "{ exp: `break` }",
          "hydrationId": 0
        },
        {
          "NT": "exp",
          "rule": [
            "new",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp: `new identifier` }",
          "strWithGrammarName": "{ exp: `new identifier` }",
          "strWithoutGrammarName": "{ exp: `new identifier` }",
          "hydrationId": 1
        },
        {
          "NT": "exp",
          "rule": [
            "\"!\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                4
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                10
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                12
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                14
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `\"!\" exp` }",
          "strWithGrammarName": "{ exp: `\"!\" exp` }",
          "strWithoutGrammarName": "{ exp: `\"!\" exp` }",
          "hydrationId": 2
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"?\"",
            "\".\"",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"?\" \".\" identifier` }",
          "strWithGrammarName": "{ exp: `exp \"?\" \".\" identifier` }",
          "strWithoutGrammarName": "{ exp: `exp \"?\" \".\" identifier` }",
          "hydrationId": 3
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\".\"",
            "identifier"
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \".\" identifier` }",
          "strWithGrammarName": "{ exp: `exp \".\" identifier` }",
          "strWithoutGrammarName": "{ exp: `exp \".\" identifier` }",
          "hydrationId": 3
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"(\"",
            "exp",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"(\" exp \")\"` }",
          "strWithGrammarName": "{ exp: `exp \"(\" exp \")\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"(\" exp \")\"` }",
          "hydrationId": 4
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"(\"",
            "exp",
            "__0",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "strWithGrammarName": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "hydrationId": 4
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"(\"",
            "\")\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"(\" \")\"` }",
          "strWithGrammarName": "{ exp: `exp \"(\" \")\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"(\" \")\"` }",
          "hydrationId": 4
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"[\"",
            "exp",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"[\" exp \"]\"` }",
          "strWithGrammarName": "{ exp: `exp \"[\" exp \"]\"` }",
          "strWithoutGrammarName": "{ exp: `exp \"[\" exp \"]\"` }",
          "hydrationId": 5
        },
        {
          "NT": "exp",
          "rule": [
            "\"...\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                4
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                10
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                12
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                14
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `\"...\" exp` }",
          "strWithGrammarName": "{ exp: `\"...\" exp` }",
          "strWithoutGrammarName": "{ exp: `\"...\" exp` }",
          "hydrationId": 6
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"!=\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                4
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                10
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                16
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                17,
                19
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"!=\" exp` }",
          "strWithGrammarName": "{ exp: `exp \"!=\" exp` }",
          "strWithoutGrammarName": "{ exp: `exp \"!=\" exp` }",
          "hydrationId": 7
        },
        {
          "NT": "exp",
          "rule": [
            "exp",
            "\"&&\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                1
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                4
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                5
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                6
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                10
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                16,
                18
              ]
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                20
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"!\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `\"...\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": false
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "handleEnd": true,
              "next": "*",
              "accepter": true
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": true
            }
          ],
          "str": "{ exp: `exp \"&&\" exp` }",
          "strWithGrammarName": "{ exp: `exp \"&&\" exp` }",
          "strWithoutGrammarName": "{ exp: `exp \"&&\" exp` }",
          "hydrationId": 8
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "object_item",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ object: `\"{\" object_item \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" object_item \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" object_item \"}\"` }",
          "hydrationId": 9
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "object_item",
            "__1",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ object: `\"{\" object_item __1 \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" object_item __1 \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" object_item __1 \"}\"` }",
          "hydrationId": 9
        },
        {
          "NT": "object",
          "rule": [
            "\"{\"",
            "\"}\""
          ],
          "conflicts": [
            {
              "type": 1,
              "anotherRule": "{ block_stmt: `\"{\" \"}\"` }",
              "next": [
                "\"?\"",
                "\".\"",
                "\"(\"",
                "\")\"",
                "__0",
                "\",\"",
                "\"[\"",
                "\"]\"",
                "\"!=\"",
                "\"&&\"",
                "\";\"",
                "\":\"",
                "\"=\"",
                "from",
                "\"}\"",
                "__3",
                "exp",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"{\"",
                "object_item",
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "if",
                "const",
                "let",
                "while",
                "__2",
                "as",
                "__1"
              ],
              "handleEnd": false,
              "resolvers": []
            }
          ],
          "resolved": [],
          "str": "{ object: `\"{\" \"}\"` }",
          "strWithGrammarName": "{ object: `\"{\" \"}\"` }",
          "strWithoutGrammarName": "{ object: `\"{\" \"}\"` }",
          "hydrationId": 9
        },
        {
          "NT": "object_item",
          "rule": [
            "identifier",
            "\":\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            }
          ],
          "resolved": [],
          "str": "{ object_item: `identifier \":\" exp` }",
          "strWithGrammarName": "{ object_item: `identifier \":\" exp` }",
          "strWithoutGrammarName": "{ object_item: `identifier \":\" exp` }",
          "hydrationId": 10
        },
        {
          "NT": "object_item",
          "rule": [
            "identifier"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ object_item: `identifier \":\" exp` }",
              "next": [
                "\":\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            },
            {
              "type": 1,
              "anotherRule": "{ exp: `identifier` }",
              "next": [
                "\"}\"",
                "__1",
                "\",\"",
                "\"?\"",
                "\".\"",
                "\"(\"",
                "\")\"",
                "__0",
                "\"[\"",
                "\"]\"",
                "\"!=\"",
                "\"&&\"",
                "\";\"",
                "\":\"",
                "\"=\"",
                "from",
                "__3",
                "exp",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"{\"",
                "object_item",
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "if",
                "const",
                "let",
                "while",
                "__2",
                "as"
              ],
              "handleEnd": false,
              "resolvers": []
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ object_item: `identifier \":\" exp` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ object_item: `identifier` }",
          "strWithGrammarName": "{ object_item: `identifier` }",
          "strWithoutGrammarName": "{ object_item: `identifier` }",
          "hydrationId": 10
        },
        {
          "NT": "array",
          "rule": [
            "\"[\"",
            "exp",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ array: `\"[\" exp \"]\"` }",
          "strWithGrammarName": "{ array: `\"[\" exp \"]\"` }",
          "strWithoutGrammarName": "{ array: `\"[\" exp \"]\"` }",
          "hydrationId": 11
        },
        {
          "NT": "array",
          "rule": [
            "\"[\"",
            "exp",
            "__0",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ array: `\"[\" exp __0 \"]\"` }",
          "strWithGrammarName": "{ array: `\"[\" exp __0 \"]\"` }",
          "strWithoutGrammarName": "{ array: `\"[\" exp __0 \"]\"` }",
          "hydrationId": 11
        },
        {
          "NT": "array",
          "rule": [
            "\"[\"",
            "\"]\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ array: `\"[\" \"]\"` }",
          "strWithGrammarName": "{ array: `\"[\" \"]\"` }",
          "strWithoutGrammarName": "{ array: `\"[\" \"]\"` }",
          "hydrationId": 11
        },
        {
          "NT": "exp_stmt",
          "rule": [
            "exp",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ exp_stmt: `exp \";\"` }",
          "strWithGrammarName": "{ exp_stmt: `exp \";\"` }",
          "strWithoutGrammarName": "{ exp_stmt: `exp \";\"` }",
          "hydrationId": 12
        },
        {
          "NT": "if_stmt",
          "rule": [
            "if",
            "\"(\"",
            "exp",
            "\")\"",
            "stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "strWithGrammarName": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "strWithoutGrammarName": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "hydrationId": 13
        },
        {
          "NT": "const_stmt",
          "rule": [
            "const",
            "identifier",
            "\"=\"",
            "exp_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "strWithGrammarName": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "strWithoutGrammarName": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "hydrationId": 14
        },
        {
          "NT": "let_stmt",
          "rule": [
            "let",
            "identifier",
            "\"=\"",
            "exp_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "strWithGrammarName": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "strWithoutGrammarName": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "hydrationId": 15
        },
        {
          "NT": "while_stmt",
          "rule": [
            "while",
            "\"(\"",
            "exp",
            "\")\"",
            "stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "strWithGrammarName": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "strWithoutGrammarName": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "hydrationId": 16
        },
        {
          "NT": "block_stmt",
          "rule": [
            "\"{\"",
            "\"}\""
          ],
          "conflicts": [
            {
              "type": 1,
              "anotherRule": "{ object: `\"{\" \"}\"` }",
              "next": [
                "exp",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"{\"",
                "\"[\"",
                "\".\"",
                "\")\"",
                "object_item",
                "\"}\"",
                "\"]\"",
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "if",
                "const",
                "let",
                "while",
                "__2",
                "as",
                "from",
                "\"?\"",
                "\"(\"",
                "__0",
                "\",\"",
                "\"!=\"",
                "\"&&\"",
                "\";\"",
                "\":\"",
                "\"=\"",
                "__3",
                "__1"
              ],
              "handleEnd": false,
              "resolvers": []
            }
          ],
          "resolved": [],
          "str": "{ block_stmt: `\"{\" \"}\"` }",
          "strWithGrammarName": "{ block_stmt: `\"{\" \"}\"` }",
          "strWithoutGrammarName": "{ block_stmt: `\"{\" \"}\"` }",
          "hydrationId": 17
        },
        {
          "NT": "block_stmt",
          "rule": [
            "\"{\"",
            "__2",
            "\"}\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "strWithGrammarName": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "strWithoutGrammarName": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "hydrationId": 17
        },
        {
          "NT": "stmt",
          "rule": [
            "exp_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `exp_stmt` }",
          "strWithGrammarName": "{ stmt: `exp_stmt` }",
          "strWithoutGrammarName": "{ stmt: `exp_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "if_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `if_stmt` }",
          "strWithGrammarName": "{ stmt: `if_stmt` }",
          "strWithoutGrammarName": "{ stmt: `if_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "const_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `const_stmt` }",
          "strWithGrammarName": "{ stmt: `const_stmt` }",
          "strWithoutGrammarName": "{ stmt: `const_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "let_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `let_stmt` }",
          "strWithGrammarName": "{ stmt: `let_stmt` }",
          "strWithoutGrammarName": "{ stmt: `let_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "while_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `while_stmt` }",
          "strWithGrammarName": "{ stmt: `while_stmt` }",
          "strWithoutGrammarName": "{ stmt: `while_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "stmt",
          "rule": [
            "block_stmt"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ stmt: `block_stmt` }",
          "strWithGrammarName": "{ stmt: `block_stmt` }",
          "strWithoutGrammarName": "{ stmt: `block_stmt` }",
          "hydrationId": 18
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"*\"",
            "as",
            "identifier",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"{\"",
            "identifier",
            "\"}\"",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "import_stmt",
          "rule": [
            "import",
            "\"{\"",
            "identifier",
            "__3",
            "\"}\"",
            "from",
            "string",
            "\";\""
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "strWithGrammarName": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "strWithoutGrammarName": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "hydrationId": 19
        },
        {
          "NT": "__0",
          "rule": [
            "\",\"",
            "exp"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"?\" \".\" identifier` }",
              "next": [
                "\"?\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \".\" identifier` }",
              "next": [
                "\".\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" exp __0 \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"(\" \")\"` }",
              "next": [
                "\"(\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"[\" exp \"]\"` }",
              "next": [
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"!=\" exp` }",
              "next": [
                "\"!=\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ exp: `exp \"&&\" exp` }",
              "next": [
                "\"&&\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": []
            },
            {
              "type": 0,
              "anotherRule": "{ __0: `\",\" exp __0` }",
              "next": [
                "\",\""
              ],
              "handleEnd": false,
              "overlapped": 2,
              "resolvers": [
                0
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __0: `\",\" exp __0` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __0: `\",\" exp` }",
          "strWithGrammarName": "{ __0: `\",\" exp` }",
          "strWithoutGrammarName": "{ __0: `\",\" exp` }",
          "hydrationId": 126
        },
        {
          "NT": "__0",
          "rule": [
            "\",\"",
            "exp",
            "__0"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __0: `\",\" exp __0` }",
          "strWithGrammarName": "{ __0: `\",\" exp __0` }",
          "strWithoutGrammarName": "{ __0: `\",\" exp __0` }",
          "hydrationId": 126
        },
        {
          "NT": "__1",
          "rule": [
            "\",\"",
            "object_item"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ __1: `\",\" object_item __1` }",
              "next": [
                "\",\""
              ],
              "handleEnd": false,
              "overlapped": 2,
              "resolvers": [
                0
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __1: `\",\" object_item __1` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __1: `\",\" object_item` }",
          "strWithGrammarName": "{ __1: `\",\" object_item` }",
          "strWithoutGrammarName": "{ __1: `\",\" object_item` }",
          "hydrationId": 127
        },
        {
          "NT": "__1",
          "rule": [
            "\",\"",
            "object_item",
            "__1"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __1: `\",\" object_item __1` }",
          "strWithGrammarName": "{ __1: `\",\" object_item __1` }",
          "strWithoutGrammarName": "{ __1: `\",\" object_item __1` }",
          "hydrationId": 127
        },
        {
          "NT": "__2",
          "rule": [
            "stmt"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ __2: `stmt __2` }",
              "next": [
                "stmt",
                "exp_stmt",
                "if_stmt",
                "const_stmt",
                "let_stmt",
                "while_stmt",
                "block_stmt",
                "exp",
                "if",
                "const",
                "let",
                "while",
                "\"{\"",
                "identifier",
                "string",
                "regex",
                "true",
                "false",
                "object",
                "array",
                "break",
                "new",
                "\"!\"",
                "\"...\"",
                "\"[\""
              ],
              "handleEnd": false,
              "overlapped": 1,
              "resolvers": [
                0
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __2: `stmt __2` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __2: `stmt` }",
          "strWithGrammarName": "{ __2: `stmt` }",
          "strWithoutGrammarName": "{ __2: `stmt` }",
          "hydrationId": 128
        },
        {
          "NT": "__2",
          "rule": [
            "stmt",
            "__2"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __2: `stmt __2` }",
          "strWithGrammarName": "{ __2: `stmt __2` }",
          "strWithoutGrammarName": "{ __2: `stmt __2` }",
          "hydrationId": 128
        },
        {
          "NT": "__3",
          "rule": [
            "\",\"",
            "identifier"
          ],
          "conflicts": [
            {
              "type": 0,
              "anotherRule": "{ __3: `\",\" identifier __3` }",
              "next": [
                "\",\""
              ],
              "handleEnd": false,
              "overlapped": 2,
              "resolvers": [
                0
              ]
            }
          ],
          "resolved": [
            {
              "type": 0,
              "anotherRule": "{ __3: `\",\" identifier __3` }",
              "handleEnd": false,
              "next": "*",
              "accepter": false
            }
          ],
          "str": "{ __3: `\",\" identifier` }",
          "strWithGrammarName": "{ __3: `\",\" identifier` }",
          "strWithoutGrammarName": "{ __3: `\",\" identifier` }",
          "hydrationId": 129
        },
        {
          "NT": "__3",
          "rule": [
            "\",\"",
            "identifier",
            "__3"
          ],
          "conflicts": [],
          "resolved": [],
          "str": "{ __3: `\",\" identifier __3` }",
          "strWithGrammarName": "{ __3: `\",\" identifier __3` }",
          "strWithoutGrammarName": "{ __3: `\",\" identifier __3` }",
          "hydrationId": 129
        }
      ],
      "candidates": [
        {
          "gr": "{ exp: `identifier` }",
          "digested": 0,
          "nextMap": {
            "identifier": "exp := identifier #"
          },
          "str": "exp := # identifier",
          "strWithGrammarName": "exp := # identifier"
        },
        {
          "gr": "{ exp: `string` }",
          "digested": 0,
          "nextMap": {
            "string": "exp := string #"
          },
          "str": "exp := # string",
          "strWithGrammarName": "exp := # string"
        },
        {
          "gr": "{ exp: `regex` }",
          "digested": 0,
          "nextMap": {
            "regex": "exp := regex #"
          },
          "str": "exp := # regex",
          "strWithGrammarName": "exp := # regex"
        },
        {
          "gr": "{ exp: `true` }",
          "digested": 0,
          "nextMap": {
            "true": "exp := true #"
          },
          "str": "exp := # true",
          "strWithGrammarName": "exp := # true"
        },
        {
          "gr": "{ exp: `false` }",
          "digested": 0,
          "nextMap": {
            "false": "exp := false #"
          },
          "str": "exp := # false",
          "strWithGrammarName": "exp := # false"
        },
        {
          "gr": "{ exp: `object` }",
          "digested": 0,
          "nextMap": {
            "object": "exp := object #"
          },
          "str": "exp := # object",
          "strWithGrammarName": "exp := # object"
        },
        {
          "gr": "{ exp: `array` }",
          "digested": 0,
          "nextMap": {
            "array": "exp := array #"
          },
          "str": "exp := # array",
          "strWithGrammarName": "exp := # array"
        },
        {
          "gr": "{ exp: `break` }",
          "digested": 0,
          "nextMap": {
            "break": "exp := break #"
          },
          "str": "exp := # break",
          "strWithGrammarName": "exp := # break"
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 0,
          "nextMap": {
            "new": "exp := new # identifier"
          },
          "str": "exp := # new identifier",
          "strWithGrammarName": "exp := # new identifier"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 0,
          "nextMap": {
            "\"!\"": "exp := \"!\" # exp"
          },
          "str": "exp := # \"!\" exp",
          "strWithGrammarName": "exp := # \"!\" exp"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"?\" \".\" identifier"
          },
          "str": "exp := # exp \"?\" \".\" identifier",
          "strWithGrammarName": "exp := # exp \"?\" \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \".\" identifier"
          },
          "str": "exp := # exp \".\" identifier",
          "strWithGrammarName": "exp := # exp \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \"(\" exp \")\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"(\" exp \")\""
          },
          "str": "exp := # exp \"(\" exp \")\"",
          "strWithGrammarName": "exp := # exp \"(\" exp \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"(\" exp __0 \")\""
          },
          "str": "exp := # exp \"(\" exp __0 \")\"",
          "strWithGrammarName": "exp := # exp \"(\" exp __0 \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"(\" \")\""
          },
          "str": "exp := # exp \"(\" \")\"",
          "strWithGrammarName": "exp := # exp \"(\" \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"[\" exp \"]\""
          },
          "str": "exp := # exp \"[\" exp \"]\"",
          "strWithGrammarName": "exp := # exp \"[\" exp \"]\""
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 0,
          "nextMap": {
            "\"...\"": "exp := \"...\" # exp"
          },
          "str": "exp := # \"...\" exp",
          "strWithGrammarName": "exp := # \"...\" exp"
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"!=\" exp"
          },
          "str": "exp := # exp \"!=\" exp",
          "strWithGrammarName": "exp := # exp \"!=\" exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp := exp # \"&&\" exp"
          },
          "str": "exp := # exp \"&&\" exp",
          "strWithGrammarName": "exp := # exp \"&&\" exp"
        },
        {
          "gr": "{ object: `\"{\" object_item \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # object_item \"}\""
          },
          "str": "object := # \"{\" object_item \"}\"",
          "strWithGrammarName": "object := # \"{\" object_item \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_item __1 \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # object_item __1 \"}\""
          },
          "str": "object := # \"{\" object_item __1 \"}\"",
          "strWithGrammarName": "object := # \"{\" object_item __1 \"}\""
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "object := \"{\" # \"}\""
          },
          "str": "object := # \"{\" \"}\"",
          "strWithGrammarName": "object := # \"{\" \"}\""
        },
        {
          "gr": "{ object_item: `identifier \":\" exp` }",
          "digested": 0,
          "nextMap": {
            "identifier": "object_item := identifier # \":\" exp"
          },
          "str": "object_item := # identifier \":\" exp",
          "strWithGrammarName": "object_item := # identifier \":\" exp"
        },
        {
          "gr": "{ object_item: `identifier` }",
          "digested": 0,
          "nextMap": {
            "identifier": "object_item := identifier #"
          },
          "str": "object_item := # identifier",
          "strWithGrammarName": "object_item := # identifier"
        },
        {
          "gr": "{ array: `\"[\" exp \"]\"` }",
          "digested": 0,
          "nextMap": {
            "\"[\"": "array := \"[\" # exp \"]\""
          },
          "str": "array := # \"[\" exp \"]\"",
          "strWithGrammarName": "array := # \"[\" exp \"]\""
        },
        {
          "gr": "{ array: `\"[\" exp __0 \"]\"` }",
          "digested": 0,
          "nextMap": {
            "\"[\"": "array := \"[\" # exp __0 \"]\""
          },
          "str": "array := # \"[\" exp __0 \"]\"",
          "strWithGrammarName": "array := # \"[\" exp __0 \"]\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 0,
          "nextMap": {
            "\"[\"": "array := \"[\" # \"]\""
          },
          "str": "array := # \"[\" \"]\"",
          "strWithGrammarName": "array := # \"[\" \"]\""
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 0,
          "nextMap": {
            "exp": "exp_stmt := exp # \";\""
          },
          "str": "exp_stmt := # exp \";\"",
          "strWithGrammarName": "exp_stmt := # exp \";\""
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 0,
          "nextMap": {
            "if": "if_stmt := if # \"(\" exp \")\" stmt"
          },
          "str": "if_stmt := # if \"(\" exp \")\" stmt",
          "strWithGrammarName": "if_stmt := # if \"(\" exp \")\" stmt"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 0,
          "nextMap": {
            "const": "const_stmt := const # identifier \"=\" exp_stmt"
          },
          "str": "const_stmt := # const identifier \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := # const identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "digested": 0,
          "nextMap": {
            "let": "let_stmt := let # identifier \"=\" exp_stmt"
          },
          "str": "let_stmt := # let identifier \"=\" exp_stmt",
          "strWithGrammarName": "let_stmt := # let identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 0,
          "nextMap": {
            "while": "while_stmt := while # \"(\" exp \")\" stmt"
          },
          "str": "while_stmt := # while \"(\" exp \")\" stmt",
          "strWithGrammarName": "while_stmt := # while \"(\" exp \")\" stmt"
        },
        {
          "gr": "{ block_stmt: `\"{\" \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "block_stmt := \"{\" # \"}\""
          },
          "str": "block_stmt := # \"{\" \"}\"",
          "strWithGrammarName": "block_stmt := # \"{\" \"}\""
        },
        {
          "gr": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "digested": 0,
          "nextMap": {
            "\"{\"": "block_stmt := \"{\" # __2 \"}\""
          },
          "str": "block_stmt := # \"{\" __2 \"}\"",
          "strWithGrammarName": "block_stmt := # \"{\" __2 \"}\""
        },
        {
          "gr": "{ stmt: `exp_stmt` }",
          "digested": 0,
          "nextMap": {
            "exp_stmt": "stmt := exp_stmt #"
          },
          "str": "stmt := # exp_stmt",
          "strWithGrammarName": "stmt := # exp_stmt"
        },
        {
          "gr": "{ stmt: `if_stmt` }",
          "digested": 0,
          "nextMap": {
            "if_stmt": "stmt := if_stmt #"
          },
          "str": "stmt := # if_stmt",
          "strWithGrammarName": "stmt := # if_stmt"
        },
        {
          "gr": "{ stmt: `const_stmt` }",
          "digested": 0,
          "nextMap": {
            "const_stmt": "stmt := const_stmt #"
          },
          "str": "stmt := # const_stmt",
          "strWithGrammarName": "stmt := # const_stmt"
        },
        {
          "gr": "{ stmt: `let_stmt` }",
          "digested": 0,
          "nextMap": {
            "let_stmt": "stmt := let_stmt #"
          },
          "str": "stmt := # let_stmt",
          "strWithGrammarName": "stmt := # let_stmt"
        },
        {
          "gr": "{ stmt: `while_stmt` }",
          "digested": 0,
          "nextMap": {
            "while_stmt": "stmt := while_stmt #"
          },
          "str": "stmt := # while_stmt",
          "strWithGrammarName": "stmt := # while_stmt"
        },
        {
          "gr": "{ stmt: `block_stmt` }",
          "digested": 0,
          "nextMap": {
            "block_stmt": "stmt := block_stmt #"
          },
          "str": "stmt := # block_stmt",
          "strWithGrammarName": "stmt := # block_stmt"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"*\" as identifier from string \";\""
          },
          "str": "import_stmt := # import \"*\" as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"*\" as identifier from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"{\" identifier \"}\" from string \";\""
          },
          "str": "import_stmt := # import \"{\" identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"{\" identifier \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 0,
          "nextMap": {
            "import": "import_stmt := import # \"{\" identifier __3 \"}\" from string \";\""
          },
          "str": "import_stmt := # import \"{\" identifier __3 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := # import \"{\" identifier __3 \"}\" from string \";\""
        },
        {
          "gr": "{ __0: `\",\" exp` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__0 := \",\" # exp"
          },
          "str": "__0 := # \",\" exp",
          "strWithGrammarName": "__0 := # \",\" exp"
        },
        {
          "gr": "{ __0: `\",\" exp __0` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__0 := \",\" # exp __0"
          },
          "str": "__0 := # \",\" exp __0",
          "strWithGrammarName": "__0 := # \",\" exp __0"
        },
        {
          "gr": "{ __1: `\",\" object_item` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__1 := \",\" # object_item"
          },
          "str": "__1 := # \",\" object_item",
          "strWithGrammarName": "__1 := # \",\" object_item"
        },
        {
          "gr": "{ __1: `\",\" object_item __1` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__1 := \",\" # object_item __1"
          },
          "str": "__1 := # \",\" object_item __1",
          "strWithGrammarName": "__1 := # \",\" object_item __1"
        },
        {
          "gr": "{ __2: `stmt` }",
          "digested": 0,
          "nextMap": {
            "stmt": "__2 := stmt #"
          },
          "str": "__2 := # stmt",
          "strWithGrammarName": "__2 := # stmt"
        },
        {
          "gr": "{ __2: `stmt __2` }",
          "digested": 0,
          "nextMap": {
            "stmt": "__2 := stmt # __2"
          },
          "str": "__2 := # stmt __2",
          "strWithGrammarName": "__2 := # stmt __2"
        },
        {
          "gr": "{ __3: `\",\" identifier` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__3 := \",\" # identifier"
          },
          "str": "__3 := # \",\" identifier",
          "strWithGrammarName": "__3 := # \",\" identifier"
        },
        {
          "gr": "{ __3: `\",\" identifier __3` }",
          "digested": 0,
          "nextMap": {
            "\",\"": "__3 := \",\" # identifier __3"
          },
          "str": "__3 := # \",\" identifier __3",
          "strWithGrammarName": "__3 := # \",\" identifier __3"
        },
        {
          "gr": "{ exp: `identifier` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := identifier #",
          "strWithGrammarName": "exp := identifier #"
        },
        {
          "gr": "{ exp: `string` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := string #",
          "strWithGrammarName": "exp := string #"
        },
        {
          "gr": "{ exp: `regex` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := regex #",
          "strWithGrammarName": "exp := regex #"
        },
        {
          "gr": "{ exp: `true` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := true #",
          "strWithGrammarName": "exp := true #"
        },
        {
          "gr": "{ exp: `false` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := false #",
          "strWithGrammarName": "exp := false #"
        },
        {
          "gr": "{ exp: `object` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := object #",
          "strWithGrammarName": "exp := object #"
        },
        {
          "gr": "{ exp: `array` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := array #",
          "strWithGrammarName": "exp := array #"
        },
        {
          "gr": "{ exp: `break` }",
          "digested": 1,
          "nextMap": {},
          "str": "exp := break #",
          "strWithGrammarName": "exp := break #"
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 1,
          "nextMap": {
            "identifier": "exp := new identifier #"
          },
          "str": "exp := new # identifier",
          "strWithGrammarName": "exp := new # identifier"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 1,
          "nextMap": {
            "exp": "exp := \"!\" exp #"
          },
          "str": "exp := \"!\" # exp",
          "strWithGrammarName": "exp := \"!\" # exp"
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 1,
          "nextMap": {
            "\";\"": "exp_stmt := exp \";\" #"
          },
          "str": "exp_stmt := exp # \";\"",
          "strWithGrammarName": "exp_stmt := exp # \";\""
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 1,
          "nextMap": {
            "\"?\"": "exp := exp \"?\" # \".\" identifier"
          },
          "str": "exp := exp # \"?\" \".\" identifier",
          "strWithGrammarName": "exp := exp # \"?\" \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 1,
          "nextMap": {
            "\".\"": "exp := exp \".\" # identifier"
          },
          "str": "exp := exp # \".\" identifier",
          "strWithGrammarName": "exp := exp # \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \"(\" exp \")\"` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "exp := exp \"(\" # exp \")\""
          },
          "str": "exp := exp # \"(\" exp \")\"",
          "strWithGrammarName": "exp := exp # \"(\" exp \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "exp := exp \"(\" # exp __0 \")\""
          },
          "str": "exp := exp # \"(\" exp __0 \")\"",
          "strWithGrammarName": "exp := exp # \"(\" exp __0 \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "exp := exp \"(\" # \")\""
          },
          "str": "exp := exp # \"(\" \")\"",
          "strWithGrammarName": "exp := exp # \"(\" \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 1,
          "nextMap": {
            "\"[\"": "exp := exp \"[\" # exp \"]\""
          },
          "str": "exp := exp # \"[\" exp \"]\"",
          "strWithGrammarName": "exp := exp # \"[\" exp \"]\""
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 1,
          "nextMap": {
            "\"!=\"": "exp := exp \"!=\" # exp"
          },
          "str": "exp := exp # \"!=\" exp",
          "strWithGrammarName": "exp := exp # \"!=\" exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 1,
          "nextMap": {
            "\"&&\"": "exp := exp \"&&\" # exp"
          },
          "str": "exp := exp # \"&&\" exp",
          "strWithGrammarName": "exp := exp # \"&&\" exp"
        },
        {
          "gr": "{ array: `\"[\" exp \"]\"` }",
          "digested": 1,
          "nextMap": {
            "exp": "array := \"[\" exp # \"]\""
          },
          "str": "array := \"[\" # exp \"]\"",
          "strWithGrammarName": "array := \"[\" # exp \"]\""
        },
        {
          "gr": "{ array: `\"[\" exp __0 \"]\"` }",
          "digested": 1,
          "nextMap": {
            "exp": "array := \"[\" exp # __0 \"]\""
          },
          "str": "array := \"[\" # exp __0 \"]\"",
          "strWithGrammarName": "array := \"[\" # exp __0 \"]\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 1,
          "nextMap": {
            "\"]\"": "array := \"[\" \"]\" #"
          },
          "str": "array := \"[\" # \"]\"",
          "strWithGrammarName": "array := \"[\" # \"]\""
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 1,
          "nextMap": {
            "exp": "exp := \"...\" exp #"
          },
          "str": "exp := \"...\" # exp",
          "strWithGrammarName": "exp := \"...\" # exp"
        },
        {
          "gr": "{ block_stmt: `\"{\" \"}\"` }",
          "digested": 1,
          "nextMap": {
            "\"}\"": "block_stmt := \"{\" \"}\" #"
          },
          "str": "block_stmt := \"{\" # \"}\"",
          "strWithGrammarName": "block_stmt := \"{\" # \"}\""
        },
        {
          "gr": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "digested": 1,
          "nextMap": {
            "__2": "block_stmt := \"{\" __2 # \"}\""
          },
          "str": "block_stmt := \"{\" # __2 \"}\"",
          "strWithGrammarName": "block_stmt := \"{\" # __2 \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_item \"}\"` }",
          "digested": 1,
          "nextMap": {
            "object_item": "object := \"{\" object_item # \"}\""
          },
          "str": "object := \"{\" # object_item \"}\"",
          "strWithGrammarName": "object := \"{\" # object_item \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_item __1 \"}\"` }",
          "digested": 1,
          "nextMap": {
            "object_item": "object := \"{\" object_item # __1 \"}\""
          },
          "str": "object := \"{\" # object_item __1 \"}\"",
          "strWithGrammarName": "object := \"{\" # object_item __1 \"}\""
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 1,
          "nextMap": {
            "\"}\"": "object := \"{\" \"}\" #"
          },
          "str": "object := \"{\" # \"}\"",
          "strWithGrammarName": "object := \"{\" # \"}\""
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "if_stmt := if \"(\" # exp \")\" stmt"
          },
          "str": "if_stmt := if # \"(\" exp \")\" stmt",
          "strWithGrammarName": "if_stmt := if # \"(\" exp \")\" stmt"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 1,
          "nextMap": {
            "identifier": "const_stmt := const identifier # \"=\" exp_stmt"
          },
          "str": "const_stmt := const # identifier \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := const # identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ stmt: `exp_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := exp_stmt #",
          "strWithGrammarName": "stmt := exp_stmt #"
        },
        {
          "gr": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "digested": 1,
          "nextMap": {
            "identifier": "let_stmt := let identifier # \"=\" exp_stmt"
          },
          "str": "let_stmt := let # identifier \"=\" exp_stmt",
          "strWithGrammarName": "let_stmt := let # identifier \"=\" exp_stmt"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 1,
          "nextMap": {
            "\"(\"": "while_stmt := while \"(\" # exp \")\" stmt"
          },
          "str": "while_stmt := while # \"(\" exp \")\" stmt",
          "strWithGrammarName": "while_stmt := while # \"(\" exp \")\" stmt"
        },
        {
          "gr": "{ stmt: `if_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := if_stmt #",
          "strWithGrammarName": "stmt := if_stmt #"
        },
        {
          "gr": "{ stmt: `const_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := const_stmt #",
          "strWithGrammarName": "stmt := const_stmt #"
        },
        {
          "gr": "{ stmt: `let_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := let_stmt #",
          "strWithGrammarName": "stmt := let_stmt #"
        },
        {
          "gr": "{ stmt: `while_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := while_stmt #",
          "strWithGrammarName": "stmt := while_stmt #"
        },
        {
          "gr": "{ stmt: `block_stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "stmt := block_stmt #",
          "strWithGrammarName": "stmt := block_stmt #"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"*\"": "import_stmt := import \"*\" # as identifier from string \";\""
          },
          "str": "import_stmt := import # \"*\" as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"*\" as identifier from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "import_stmt := import \"{\" # identifier \"}\" from string \";\""
          },
          "str": "import_stmt := import # \"{\" identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"{\" identifier \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 1,
          "nextMap": {
            "\"{\"": "import_stmt := import \"{\" # identifier __3 \"}\" from string \";\""
          },
          "str": "import_stmt := import # \"{\" identifier __3 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import # \"{\" identifier __3 \"}\" from string \";\""
        },
        {
          "gr": "{ exp: `new identifier` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := new identifier #",
          "strWithGrammarName": "exp := new identifier #"
        },
        {
          "gr": "{ exp: `\"!\" exp` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := \"!\" exp #",
          "strWithGrammarName": "exp := \"!\" exp #"
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 2,
          "nextMap": {
            "\".\"": "exp := exp \"?\" \".\" # identifier"
          },
          "str": "exp := exp \"?\" # \".\" identifier",
          "strWithGrammarName": "exp := exp \"?\" # \".\" identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 2,
          "nextMap": {
            "identifier": "exp := exp \".\" identifier #"
          },
          "str": "exp := exp \".\" # identifier",
          "strWithGrammarName": "exp := exp \".\" # identifier"
        },
        {
          "gr": "{ exp: `exp \"(\" exp \")\"` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"(\" exp # \")\""
          },
          "str": "exp := exp \"(\" # exp \")\"",
          "strWithGrammarName": "exp := exp \"(\" # exp \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"(\" exp # __0 \")\""
          },
          "str": "exp := exp \"(\" # exp __0 \")\"",
          "strWithGrammarName": "exp := exp \"(\" # exp __0 \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 2,
          "nextMap": {
            "\")\"": "exp := exp \"(\" \")\" #"
          },
          "str": "exp := exp \"(\" # \")\"",
          "strWithGrammarName": "exp := exp \"(\" # \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"[\" exp # \"]\""
          },
          "str": "exp := exp \"[\" # exp \"]\"",
          "strWithGrammarName": "exp := exp \"[\" # exp \"]\""
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"!=\" exp #"
          },
          "str": "exp := exp \"!=\" # exp",
          "strWithGrammarName": "exp := exp \"!=\" # exp"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "exp := exp \"&&\" exp #"
          },
          "str": "exp := exp \"&&\" # exp",
          "strWithGrammarName": "exp := exp \"&&\" # exp"
        },
        {
          "gr": "{ exp_stmt: `exp \";\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp_stmt := exp \";\" #",
          "strWithGrammarName": "exp_stmt := exp \";\" #"
        },
        {
          "gr": "{ array: `\"[\" exp \"]\"` }",
          "digested": 2,
          "nextMap": {
            "\"]\"": "array := \"[\" exp \"]\" #"
          },
          "str": "array := \"[\" exp # \"]\"",
          "strWithGrammarName": "array := \"[\" exp # \"]\""
        },
        {
          "gr": "{ array: `\"[\" exp __0 \"]\"` }",
          "digested": 2,
          "nextMap": {
            "__0": "array := \"[\" exp __0 # \"]\""
          },
          "str": "array := \"[\" exp # __0 \"]\"",
          "strWithGrammarName": "array := \"[\" exp # __0 \"]\""
        },
        {
          "gr": "{ array: `\"[\" \"]\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "array := \"[\" \"]\" #",
          "strWithGrammarName": "array := \"[\" \"]\" #"
        },
        {
          "gr": "{ exp: `\"...\" exp` }",
          "digested": 2,
          "nextMap": {},
          "str": "exp := \"...\" exp #",
          "strWithGrammarName": "exp := \"...\" exp #"
        },
        {
          "gr": "{ object_item: `identifier \":\" exp` }",
          "digested": 1,
          "nextMap": {
            "\":\"": "object_item := identifier \":\" # exp"
          },
          "str": "object_item := identifier # \":\" exp",
          "strWithGrammarName": "object_item := identifier # \":\" exp"
        },
        {
          "gr": "{ object_item: `identifier` }",
          "digested": 1,
          "nextMap": {},
          "str": "object_item := identifier #",
          "strWithGrammarName": "object_item := identifier #"
        },
        {
          "gr": "{ object: `\"{\" object_item \"}\"` }",
          "digested": 2,
          "nextMap": {
            "\"}\"": "object := \"{\" object_item \"}\" #"
          },
          "str": "object := \"{\" object_item # \"}\"",
          "strWithGrammarName": "object := \"{\" object_item # \"}\""
        },
        {
          "gr": "{ object: `\"{\" object_item __1 \"}\"` }",
          "digested": 2,
          "nextMap": {
            "__1": "object := \"{\" object_item __1 # \"}\""
          },
          "str": "object := \"{\" object_item # __1 \"}\"",
          "strWithGrammarName": "object := \"{\" object_item # __1 \"}\""
        },
        {
          "gr": "{ block_stmt: `\"{\" \"}\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "block_stmt := \"{\" \"}\" #",
          "strWithGrammarName": "block_stmt := \"{\" \"}\" #"
        },
        {
          "gr": "{ object: `\"{\" \"}\"` }",
          "digested": 2,
          "nextMap": {},
          "str": "object := \"{\" \"}\" #",
          "strWithGrammarName": "object := \"{\" \"}\" #"
        },
        {
          "gr": "{ __2: `stmt` }",
          "digested": 1,
          "nextMap": {},
          "str": "__2 := stmt #",
          "strWithGrammarName": "__2 := stmt #"
        },
        {
          "gr": "{ __2: `stmt __2` }",
          "digested": 1,
          "nextMap": {
            "__2": "__2 := stmt __2 #"
          },
          "str": "__2 := stmt # __2",
          "strWithGrammarName": "__2 := stmt # __2"
        },
        {
          "gr": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "digested": 2,
          "nextMap": {
            "\"}\"": "block_stmt := \"{\" __2 \"}\" #"
          },
          "str": "block_stmt := \"{\" __2 # \"}\"",
          "strWithGrammarName": "block_stmt := \"{\" __2 # \"}\""
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 2,
          "nextMap": {
            "exp": "if_stmt := if \"(\" exp # \")\" stmt"
          },
          "str": "if_stmt := if \"(\" # exp \")\" stmt",
          "strWithGrammarName": "if_stmt := if \"(\" # exp \")\" stmt"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 2,
          "nextMap": {
            "\"=\"": "const_stmt := const identifier \"=\" # exp_stmt"
          },
          "str": "const_stmt := const identifier # \"=\" exp_stmt",
          "strWithGrammarName": "const_stmt := const identifier # \"=\" exp_stmt"
        },
        {
          "gr": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "digested": 2,
          "nextMap": {
            "\"=\"": "let_stmt := let identifier \"=\" # exp_stmt"
          },
          "str": "let_stmt := let identifier # \"=\" exp_stmt",
          "strWithGrammarName": "let_stmt := let identifier # \"=\" exp_stmt"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 2,
          "nextMap": {
            "exp": "while_stmt := while \"(\" exp # \")\" stmt"
          },
          "str": "while_stmt := while \"(\" # exp \")\" stmt",
          "strWithGrammarName": "while_stmt := while \"(\" # exp \")\" stmt"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "import_stmt := import \"{\" identifier # \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" # identifier \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" # identifier \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "identifier": "import_stmt := import \"{\" identifier # __3 \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" # identifier __3 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" # identifier __3 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 2,
          "nextMap": {
            "as": "import_stmt := import \"*\" as # identifier from string \";\""
          },
          "str": "import_stmt := import \"*\" # as identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" # as identifier from string \";\""
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 3,
          "nextMap": {
            "identifier": "exp := exp \"?\" \".\" identifier #"
          },
          "str": "exp := exp \"?\" \".\" # identifier",
          "strWithGrammarName": "exp := exp \"?\" \".\" # identifier"
        },
        {
          "gr": "{ exp: `exp \".\" identifier` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \".\" identifier #",
          "strWithGrammarName": "exp := exp \".\" identifier #"
        },
        {
          "gr": "{ exp: `exp \"(\" exp \")\"` }",
          "digested": 3,
          "nextMap": {
            "\")\"": "exp := exp \"(\" exp \")\" #"
          },
          "str": "exp := exp \"(\" exp # \")\"",
          "strWithGrammarName": "exp := exp \"(\" exp # \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 3,
          "nextMap": {
            "__0": "exp := exp \"(\" exp __0 # \")\""
          },
          "str": "exp := exp \"(\" exp # __0 \")\"",
          "strWithGrammarName": "exp := exp \"(\" exp # __0 \")\""
        },
        {
          "gr": "{ exp: `exp \"(\" \")\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"(\" \")\" #",
          "strWithGrammarName": "exp := exp \"(\" \")\" #"
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 3,
          "nextMap": {
            "\"]\"": "exp := exp \"[\" exp \"]\" #"
          },
          "str": "exp := exp \"[\" exp # \"]\"",
          "strWithGrammarName": "exp := exp \"[\" exp # \"]\""
        },
        {
          "gr": "{ exp: `exp \"!=\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"!=\" exp #",
          "strWithGrammarName": "exp := exp \"!=\" exp #"
        },
        {
          "gr": "{ exp: `exp \"&&\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "exp := exp \"&&\" exp #",
          "strWithGrammarName": "exp := exp \"&&\" exp #"
        },
        {
          "gr": "{ array: `\"[\" exp __0 \"]\"` }",
          "digested": 3,
          "nextMap": {
            "\"]\"": "array := \"[\" exp __0 \"]\" #"
          },
          "str": "array := \"[\" exp __0 # \"]\"",
          "strWithGrammarName": "array := \"[\" exp __0 # \"]\""
        },
        {
          "gr": "{ array: `\"[\" exp \"]\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "array := \"[\" exp \"]\" #",
          "strWithGrammarName": "array := \"[\" exp \"]\" #"
        },
        {
          "gr": "{ __0: `\",\" exp` }",
          "digested": 1,
          "nextMap": {
            "exp": "__0 := \",\" exp #"
          },
          "str": "__0 := \",\" # exp",
          "strWithGrammarName": "__0 := \",\" # exp"
        },
        {
          "gr": "{ __0: `\",\" exp __0` }",
          "digested": 1,
          "nextMap": {
            "exp": "__0 := \",\" exp # __0"
          },
          "str": "__0 := \",\" # exp __0",
          "strWithGrammarName": "__0 := \",\" # exp __0"
        },
        {
          "gr": "{ object_item: `identifier \":\" exp` }",
          "digested": 2,
          "nextMap": {
            "exp": "object_item := identifier \":\" exp #"
          },
          "str": "object_item := identifier \":\" # exp",
          "strWithGrammarName": "object_item := identifier \":\" # exp"
        },
        {
          "gr": "{ object: `\"{\" object_item \"}\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "object := \"{\" object_item \"}\" #",
          "strWithGrammarName": "object := \"{\" object_item \"}\" #"
        },
        {
          "gr": "{ object: `\"{\" object_item __1 \"}\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "object := \"{\" object_item __1 \"}\" #"
          },
          "str": "object := \"{\" object_item __1 # \"}\"",
          "strWithGrammarName": "object := \"{\" object_item __1 # \"}\""
        },
        {
          "gr": "{ __1: `\",\" object_item` }",
          "digested": 1,
          "nextMap": {
            "object_item": "__1 := \",\" object_item #"
          },
          "str": "__1 := \",\" # object_item",
          "strWithGrammarName": "__1 := \",\" # object_item"
        },
        {
          "gr": "{ __1: `\",\" object_item __1` }",
          "digested": 1,
          "nextMap": {
            "object_item": "__1 := \",\" object_item # __1"
          },
          "str": "__1 := \",\" # object_item __1",
          "strWithGrammarName": "__1 := \",\" # object_item __1"
        },
        {
          "gr": "{ __2: `stmt __2` }",
          "digested": 2,
          "nextMap": {},
          "str": "__2 := stmt __2 #",
          "strWithGrammarName": "__2 := stmt __2 #"
        },
        {
          "gr": "{ block_stmt: `\"{\" __2 \"}\"` }",
          "digested": 3,
          "nextMap": {},
          "str": "block_stmt := \"{\" __2 \"}\" #",
          "strWithGrammarName": "block_stmt := \"{\" __2 \"}\" #"
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 3,
          "nextMap": {
            "\")\"": "if_stmt := if \"(\" exp \")\" # stmt"
          },
          "str": "if_stmt := if \"(\" exp # \")\" stmt",
          "strWithGrammarName": "if_stmt := if \"(\" exp # \")\" stmt"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 3,
          "nextMap": {
            "exp_stmt": "const_stmt := const identifier \"=\" exp_stmt #"
          },
          "str": "const_stmt := const identifier \"=\" # exp_stmt",
          "strWithGrammarName": "const_stmt := const identifier \"=\" # exp_stmt"
        },
        {
          "gr": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "digested": 3,
          "nextMap": {
            "exp_stmt": "let_stmt := let identifier \"=\" exp_stmt #"
          },
          "str": "let_stmt := let identifier \"=\" # exp_stmt",
          "strWithGrammarName": "let_stmt := let identifier \"=\" # exp_stmt"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 3,
          "nextMap": {
            "\")\"": "while_stmt := while \"(\" exp \")\" # stmt"
          },
          "str": "while_stmt := while \"(\" exp # \")\" stmt",
          "strWithGrammarName": "while_stmt := while \"(\" exp # \")\" stmt"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "\"}\"": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier # \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier # \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "__3": "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier # __3 \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier # __3 \"}\" from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 3,
          "nextMap": {
            "identifier": "import_stmt := import \"*\" as identifier # from string \";\""
          },
          "str": "import_stmt := import \"*\" as # identifier from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as # identifier from string \";\""
        },
        {
          "gr": "{ exp: `exp \"?\" \".\" identifier` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"?\" \".\" identifier #",
          "strWithGrammarName": "exp := exp \"?\" \".\" identifier #"
        },
        {
          "gr": "{ exp: `exp \"(\" exp \")\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"(\" exp \")\" #",
          "strWithGrammarName": "exp := exp \"(\" exp \")\" #"
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 4,
          "nextMap": {
            "\")\"": "exp := exp \"(\" exp __0 \")\" #"
          },
          "str": "exp := exp \"(\" exp __0 # \")\"",
          "strWithGrammarName": "exp := exp \"(\" exp __0 # \")\""
        },
        {
          "gr": "{ exp: `exp \"[\" exp \"]\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "exp := exp \"[\" exp \"]\" #",
          "strWithGrammarName": "exp := exp \"[\" exp \"]\" #"
        },
        {
          "gr": "{ array: `\"[\" exp __0 \"]\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "array := \"[\" exp __0 \"]\" #",
          "strWithGrammarName": "array := \"[\" exp __0 \"]\" #"
        },
        {
          "gr": "{ __0: `\",\" exp` }",
          "digested": 2,
          "nextMap": {},
          "str": "__0 := \",\" exp #",
          "strWithGrammarName": "__0 := \",\" exp #"
        },
        {
          "gr": "{ __0: `\",\" exp __0` }",
          "digested": 2,
          "nextMap": {
            "__0": "__0 := \",\" exp __0 #"
          },
          "str": "__0 := \",\" exp # __0",
          "strWithGrammarName": "__0 := \",\" exp # __0"
        },
        {
          "gr": "{ object_item: `identifier \":\" exp` }",
          "digested": 3,
          "nextMap": {},
          "str": "object_item := identifier \":\" exp #",
          "strWithGrammarName": "object_item := identifier \":\" exp #"
        },
        {
          "gr": "{ object: `\"{\" object_item __1 \"}\"` }",
          "digested": 4,
          "nextMap": {},
          "str": "object := \"{\" object_item __1 \"}\" #",
          "strWithGrammarName": "object := \"{\" object_item __1 \"}\" #"
        },
        {
          "gr": "{ __1: `\",\" object_item` }",
          "digested": 2,
          "nextMap": {},
          "str": "__1 := \",\" object_item #",
          "strWithGrammarName": "__1 := \",\" object_item #"
        },
        {
          "gr": "{ __1: `\",\" object_item __1` }",
          "digested": 2,
          "nextMap": {
            "__1": "__1 := \",\" object_item __1 #"
          },
          "str": "__1 := \",\" object_item # __1",
          "strWithGrammarName": "__1 := \",\" object_item # __1"
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 4,
          "nextMap": {
            "stmt": "if_stmt := if \"(\" exp \")\" stmt #"
          },
          "str": "if_stmt := if \"(\" exp \")\" # stmt",
          "strWithGrammarName": "if_stmt := if \"(\" exp \")\" # stmt"
        },
        {
          "gr": "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "digested": 4,
          "nextMap": {},
          "str": "const_stmt := const identifier \"=\" exp_stmt #",
          "strWithGrammarName": "const_stmt := const identifier \"=\" exp_stmt #"
        },
        {
          "gr": "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "digested": 4,
          "nextMap": {},
          "str": "let_stmt := let identifier \"=\" exp_stmt #",
          "strWithGrammarName": "let_stmt := let identifier \"=\" exp_stmt #"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 4,
          "nextMap": {
            "stmt": "while_stmt := while \"(\" exp \")\" stmt #"
          },
          "str": "while_stmt := while \"(\" exp \")\" # stmt",
          "strWithGrammarName": "while_stmt := while \"(\" exp \")\" # stmt"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "from": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
          },
          "str": "import_stmt := import \"{\" identifier \"}\" # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "\"}\"": "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\""
          },
          "str": "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\""
        },
        {
          "gr": "{ __3: `\",\" identifier` }",
          "digested": 1,
          "nextMap": {
            "identifier": "__3 := \",\" identifier #"
          },
          "str": "__3 := \",\" # identifier",
          "strWithGrammarName": "__3 := \",\" # identifier"
        },
        {
          "gr": "{ __3: `\",\" identifier __3` }",
          "digested": 1,
          "nextMap": {
            "identifier": "__3 := \",\" identifier # __3"
          },
          "str": "__3 := \",\" # identifier __3",
          "strWithGrammarName": "__3 := \",\" # identifier __3"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 4,
          "nextMap": {
            "from": "import_stmt := import \"*\" as identifier from # string \";\""
          },
          "str": "import_stmt := import \"*\" as identifier # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier # from string \";\""
        },
        {
          "gr": "{ exp: `exp \"(\" exp __0 \")\"` }",
          "digested": 5,
          "nextMap": {},
          "str": "exp := exp \"(\" exp __0 \")\" #",
          "strWithGrammarName": "exp := exp \"(\" exp __0 \")\" #"
        },
        {
          "gr": "{ __0: `\",\" exp __0` }",
          "digested": 3,
          "nextMap": {},
          "str": "__0 := \",\" exp __0 #",
          "strWithGrammarName": "__0 := \",\" exp __0 #"
        },
        {
          "gr": "{ __1: `\",\" object_item __1` }",
          "digested": 3,
          "nextMap": {},
          "str": "__1 := \",\" object_item __1 #",
          "strWithGrammarName": "__1 := \",\" object_item __1 #"
        },
        {
          "gr": "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "digested": 5,
          "nextMap": {},
          "str": "if_stmt := if \"(\" exp \")\" stmt #",
          "strWithGrammarName": "if_stmt := if \"(\" exp \")\" stmt #"
        },
        {
          "gr": "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "digested": 5,
          "nextMap": {},
          "str": "while_stmt := while \"(\" exp \")\" stmt #",
          "strWithGrammarName": "while_stmt := while \"(\" exp \")\" stmt #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "string": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "from": "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\""
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\""
        },
        {
          "gr": "{ __3: `\",\" identifier` }",
          "digested": 2,
          "nextMap": {},
          "str": "__3 := \",\" identifier #",
          "strWithGrammarName": "__3 := \",\" identifier #"
        },
        {
          "gr": "{ __3: `\",\" identifier __3` }",
          "digested": 2,
          "nextMap": {
            "__3": "__3 := \",\" identifier __3 #"
          },
          "str": "__3 := \",\" identifier # __3",
          "strWithGrammarName": "__3 := \",\" identifier # __3"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 5,
          "nextMap": {
            "string": "import_stmt := import \"*\" as identifier from string # \";\""
          },
          "str": "import_stmt := import \"*\" as identifier from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from # string \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "\";\"": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "string": "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\""
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\""
        },
        {
          "gr": "{ __3: `\",\" identifier __3` }",
          "digested": 3,
          "nextMap": {},
          "str": "__3 := \",\" identifier __3 #",
          "strWithGrammarName": "__3 := \",\" identifier __3 #"
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 6,
          "nextMap": {
            "\";\"": "import_stmt := import \"*\" as identifier from string \";\" #"
          },
          "str": "import_stmt := import \"*\" as identifier from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from string # \";\""
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "digested": 7,
          "nextMap": {},
          "str": "import_stmt := import \"{\" identifier \"}\" from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 7,
          "nextMap": {
            "\";\"": "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #"
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\"",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\""
        },
        {
          "gr": "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "digested": 7,
          "nextMap": {},
          "str": "import_stmt := import \"*\" as identifier from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"*\" as identifier from string \";\" #"
        },
        {
          "gr": "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }",
          "digested": 8,
          "nextMap": {},
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #",
          "strWithGrammarName": "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #"
        }
      ],
      "states": {
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __3 \"}\" from string \";\"\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt": {
          "candidates": [
            "stmt := # exp_stmt",
            "stmt := # if_stmt",
            "stmt := # const_stmt",
            "stmt := # let_stmt",
            "stmt := # while_stmt",
            "stmt := # block_stmt",
            "import_stmt := # import \"*\" as identifier from string \";\"",
            "import_stmt := # import \"{\" identifier \"}\" from string \";\"",
            "import_stmt := # import \"{\" identifier __3 \"}\" from string \";\"",
            "exp_stmt := # exp \";\"",
            "if_stmt := # if \"(\" exp \")\" stmt",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "let_stmt := # let identifier \"=\" exp_stmt",
            "while_stmt := # while \"(\" exp \")\" stmt",
            "block_stmt := # \"{\" \"}\"",
            "block_stmt := # \"{\" __2 \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": "if_stmt := if # \"(\" exp \")\" stmt",
            "stmt": null,
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "let": "let_stmt := let # identifier \"=\" exp_stmt",
            "while": "while_stmt := while # \"(\" exp \")\" stmt",
            "__2": null,
            "if_stmt": "stmt := if_stmt #",
            "const_stmt": "stmt := const_stmt #",
            "let_stmt": "stmt := let_stmt #",
            "while_stmt": "stmt := while_stmt #",
            "block_stmt": "stmt := block_stmt #",
            "import": "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __3 \"}\" from string \";\"",
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __3 \"}\" from string \";\"\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt"
        },
        "exp := identifier #": {
          "candidates": [
            "exp := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := identifier #"
        },
        "exp := string #": {
          "candidates": [
            "exp := string #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := string #"
        },
        "exp := regex #": {
          "candidates": [
            "exp := regex #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := regex #"
        },
        "exp := true #": {
          "candidates": [
            "exp := true #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := true #"
        },
        "exp := false #": {
          "candidates": [
            "exp := false #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := false #"
        },
        "exp := object #": {
          "candidates": [
            "exp := object #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := object #"
        },
        "exp := array #": {
          "candidates": [
            "exp := array #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := array #"
        },
        "exp := break #": {
          "candidates": [
            "exp := break #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := break #"
        },
        "exp := new # identifier": {
          "candidates": [
            "exp := new # identifier"
          ],
          "nextMap": {
            "identifier": "exp := new identifier #",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := new # identifier"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := \"!\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"": {
          "candidates": [
            "exp_stmt := exp # \";\"",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "exp_stmt := exp \";\" #",
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\""
        },
        "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "array := \"[\" # exp \"]\"",
            "array := \"[\" # exp __0 \"]\"",
            "array := \"[\" # \"]\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "__0 := # \",\" exp\n__0 := # \",\" exp __0\narray := \"[\" exp # \"]\"\narray := \"[\" exp # __0 \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": "array := \"[\" \"]\" #",
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := \"...\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt": {
          "candidates": [
            "block_stmt := \"{\" # \"}\"",
            "block_stmt := \"{\" # __2 \"}\"",
            "object := \"{\" # object_item \"}\"",
            "object := \"{\" # object_item __1 \"}\"",
            "object := \"{\" # \"}\"",
            "__2 := # stmt",
            "__2 := # stmt __2",
            "stmt := # exp_stmt",
            "stmt := # if_stmt",
            "stmt := # const_stmt",
            "stmt := # let_stmt",
            "stmt := # while_stmt",
            "stmt := # block_stmt",
            "exp_stmt := # exp \";\"",
            "if_stmt := # if \"(\" exp \")\" stmt",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "let_stmt := # let identifier \"=\" exp_stmt",
            "while_stmt := # while \"(\" exp \")\" stmt",
            "block_stmt := # \"{\" \"}\"",
            "block_stmt := # \"{\" __2 \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\"",
            "object_item := # identifier \":\" exp",
            "object_item := # identifier"
          ],
          "nextMap": {
            "identifier": "exp := identifier #\nobject_item := identifier #\nobject_item := identifier # \":\" exp",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "object_item": "__1 := # \",\" object_item\n__1 := # \",\" object_item __1\nobject := \"{\" object_item # \"}\"\nobject := \"{\" object_item # __1 \"}\"",
            "\"}\"": "block_stmt := \"{\" \"}\" #\nobject := \"{\" \"}\" #",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": "if_stmt := if # \"(\" exp \")\" stmt",
            "stmt": "__2 := # stmt\n__2 := # stmt __2\n__2 := stmt #\n__2 := stmt # __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "let": "let_stmt := let # identifier \"=\" exp_stmt",
            "while": "while_stmt := while # \"(\" exp \")\" stmt",
            "__2": "block_stmt := \"{\" __2 # \"}\"",
            "if_stmt": "stmt := if_stmt #",
            "const_stmt": "stmt := const_stmt #",
            "let_stmt": "stmt := let_stmt #",
            "while_stmt": "stmt := while_stmt #",
            "block_stmt": "stmt := block_stmt #",
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt"
        },
        "if_stmt := if # \"(\" exp \")\" stmt": {
          "candidates": [
            "if_stmt := if # \"(\" exp \")\" stmt"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nif_stmt := if \"(\" # exp \")\" stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "if_stmt := if # \"(\" exp \")\" stmt"
        },
        "const_stmt := const # identifier \"=\" exp_stmt": {
          "candidates": [
            "const_stmt := const # identifier \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": "const_stmt := const identifier # \"=\" exp_stmt",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "const_stmt := const # identifier \"=\" exp_stmt"
        },
        "stmt := exp_stmt #": {
          "candidates": [
            "stmt := exp_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := exp_stmt #"
        },
        "let_stmt := let # identifier \"=\" exp_stmt": {
          "candidates": [
            "let_stmt := let # identifier \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": "let_stmt := let identifier # \"=\" exp_stmt",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "let_stmt := let # identifier \"=\" exp_stmt"
        },
        "while_stmt := while # \"(\" exp \")\" stmt": {
          "candidates": [
            "while_stmt := while # \"(\" exp \")\" stmt"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nwhile_stmt := while \"(\" # exp \")\" stmt",
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "while_stmt := while # \"(\" exp \")\" stmt"
        },
        "stmt := if_stmt #": {
          "candidates": [
            "stmt := if_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := if_stmt #"
        },
        "stmt := const_stmt #": {
          "candidates": [
            "stmt := const_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := const_stmt #"
        },
        "stmt := let_stmt #": {
          "candidates": [
            "stmt := let_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := let_stmt #"
        },
        "stmt := while_stmt #": {
          "candidates": [
            "stmt := while_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := while_stmt #"
        },
        "stmt := block_stmt #": {
          "candidates": [
            "stmt := block_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "stmt := block_stmt #"
        },
        "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __3 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import # \"*\" as identifier from string \";\"",
            "import_stmt := import # \"{\" identifier \"}\" from string \";\"",
            "import_stmt := import # \"{\" identifier __3 \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __3 \"}\" from string \";\"",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": "import_stmt := import \"*\" # as identifier from string \";\"",
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import # \"*\" as identifier from string \";\"\nimport_stmt := import # \"{\" identifier \"}\" from string \";\"\nimport_stmt := import # \"{\" identifier __3 \"}\" from string \";\""
        },
        "exp := new identifier #": {
          "candidates": [
            "exp := new identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := new identifier #"
        },
        "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := \"!\" exp #",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := \"!\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp": {
          "candidates": [
            "object := \"{\" # object_item \"}\"",
            "object := \"{\" # object_item __1 \"}\"",
            "object := \"{\" # \"}\"",
            "object_item := # identifier \":\" exp",
            "object_item := # identifier"
          ],
          "nextMap": {
            "identifier": "object_item := identifier #\nobject_item := identifier # \":\" exp",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": "__1 := # \",\" object_item\n__1 := # \",\" object_item __1\nobject := \"{\" object_item # \"}\"\nobject := \"{\" object_item # __1 \"}\"",
            "\"}\"": "object := \"{\" \"}\" #",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp"
        },
        "exp := exp \"?\" # \".\" identifier": {
          "candidates": [
            "exp := exp \"?\" # \".\" identifier"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": "exp := exp \"?\" \".\" # identifier",
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"?\" # \".\" identifier"
        },
        "exp := exp \".\" # identifier": {
          "candidates": [
            "exp := exp \".\" # identifier"
          ],
          "nextMap": {
            "identifier": "exp := exp \".\" identifier #",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \".\" # identifier"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := exp \"(\" # exp \")\"",
            "exp := exp \"(\" # exp __0 \")\"",
            "exp := exp \"(\" # \")\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp \"(\" exp # \")\"\nexp := exp \"(\" exp # __0 \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": "exp := exp \"(\" \")\" #",
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := exp \"[\" # exp \"]\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := exp \"!=\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "exp := exp \"&&\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "exp_stmt := exp \";\" #": {
          "candidates": [
            "exp_stmt := exp \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp_stmt := exp \";\" #"
        },
        "__0 := # \",\" exp\n__0 := # \",\" exp __0\narray := \"[\" exp # \"]\"\narray := \"[\" exp # __0 \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "array := \"[\" exp # \"]\"",
            "array := \"[\" exp # __0 \"]\"",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp",
            "__0 := # \",\" exp",
            "__0 := # \",\" exp __0"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": "array := \"[\" exp __0 # \"]\"",
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": "array := \"[\" exp \"]\" #",
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": "__0 := \",\" # exp\n__0 := \",\" # exp __0\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
          },
          "str": "__0 := # \",\" exp\n__0 := # \",\" exp __0\narray := \"[\" exp # \"]\"\narray := \"[\" exp # __0 \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "array := \"[\" \"]\" #": {
          "candidates": [
            "array := \"[\" \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := \"[\" \"]\" #"
        },
        "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := \"...\" exp #",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := \"...\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "exp := identifier #\nobject_item := identifier #\nobject_item := identifier # \":\" exp": {
          "candidates": [
            "exp := identifier #",
            "object_item := identifier # \":\" exp",
            "object_item := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := identifier \":\" # exp",
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := identifier #\nobject_item := identifier #\nobject_item := identifier # \":\" exp"
        },
        "__1 := # \",\" object_item\n__1 := # \",\" object_item __1\nobject := \"{\" object_item # \"}\"\nobject := \"{\" object_item # __1 \"}\"": {
          "candidates": [
            "object := \"{\" object_item # \"}\"",
            "object := \"{\" object_item # __1 \"}\"",
            "__1 := # \",\" object_item",
            "__1 := # \",\" object_item __1"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": "object := \"{\" object_item \"}\" #",
            "__1": "object := \"{\" object_item __1 # \"}\"",
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": "__1 := \",\" # object_item\n__1 := \",\" # object_item __1\nobject_item := # identifier\nobject_item := # identifier \":\" exp"
          },
          "str": "__1 := # \",\" object_item\n__1 := # \",\" object_item __1\nobject := \"{\" object_item # \"}\"\nobject := \"{\" object_item # __1 \"}\""
        },
        "block_stmt := \"{\" \"}\" #\nobject := \"{\" \"}\" #": {
          "candidates": [
            "block_stmt := \"{\" \"}\" #",
            "object := \"{\" \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "block_stmt := \"{\" \"}\" #\nobject := \"{\" \"}\" #"
        },
        "__2 := # stmt\n__2 := # stmt __2\n__2 := stmt #\n__2 := stmt # __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt": {
          "candidates": [
            "__2 := stmt #",
            "__2 := stmt # __2",
            "__2 := # stmt",
            "__2 := # stmt __2",
            "stmt := # exp_stmt",
            "stmt := # if_stmt",
            "stmt := # const_stmt",
            "stmt := # let_stmt",
            "stmt := # while_stmt",
            "stmt := # block_stmt",
            "exp_stmt := # exp \";\"",
            "if_stmt := # if \"(\" exp \")\" stmt",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "let_stmt := # let identifier \"=\" exp_stmt",
            "while_stmt := # while \"(\" exp \")\" stmt",
            "block_stmt := # \"{\" \"}\"",
            "block_stmt := # \"{\" __2 \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": "if_stmt := if # \"(\" exp \")\" stmt",
            "stmt": "__2 := # stmt\n__2 := # stmt __2\n__2 := stmt #\n__2 := stmt # __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "let": "let_stmt := let # identifier \"=\" exp_stmt",
            "while": "while_stmt := while # \"(\" exp \")\" stmt",
            "__2": "__2 := stmt __2 #",
            "if_stmt": "stmt := if_stmt #",
            "const_stmt": "stmt := const_stmt #",
            "let_stmt": "stmt := let_stmt #",
            "while_stmt": "stmt := while_stmt #",
            "block_stmt": "stmt := block_stmt #",
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__2 := # stmt\n__2 := # stmt __2\n__2 := stmt #\n__2 := stmt # __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt"
        },
        "block_stmt := \"{\" __2 # \"}\"": {
          "candidates": [
            "block_stmt := \"{\" __2 # \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": "block_stmt := \"{\" __2 \"}\" #",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "block_stmt := \"{\" __2 # \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nif_stmt := if \"(\" # exp \")\" stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "if_stmt := if \"(\" # exp \")\" stmt",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nif_stmt := if \"(\" exp # \")\" stmt",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nif_stmt := if \"(\" # exp \")\" stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "const_stmt := const identifier # \"=\" exp_stmt": {
          "candidates": [
            "const_stmt := const identifier # \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "const_stmt := const identifier # \"=\" exp_stmt"
        },
        "let_stmt := let identifier # \"=\" exp_stmt": {
          "candidates": [
            "let_stmt := let identifier # \"=\" exp_stmt"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nlet_stmt := let identifier \"=\" # exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "let_stmt := let identifier # \"=\" exp_stmt"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nwhile_stmt := while \"(\" # exp \")\" stmt": {
          "candidates": [
            "while_stmt := while \"(\" # exp \")\" stmt",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nwhile_stmt := while \"(\" exp # \")\" stmt",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nwhile_stmt := while \"(\" # exp \")\" stmt"
        },
        "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __3 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" # identifier \"}\" from string \";\"",
            "import_stmt := import \"{\" # identifier __3 \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": "__3 := # \",\" identifier\n__3 := # \",\" identifier __3\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __3 \"}\" from string \";\"",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" # identifier \"}\" from string \";\"\nimport_stmt := import \"{\" # identifier __3 \"}\" from string \";\""
        },
        "import_stmt := import \"*\" # as identifier from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" # as identifier from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": "import_stmt := import \"*\" as # identifier from string \";\"",
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" # as identifier from string \";\""
        },
        "object_item := identifier #\nobject_item := identifier # \":\" exp": {
          "candidates": [
            "object_item := identifier # \":\" exp",
            "object_item := identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := identifier \":\" # exp",
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object_item := identifier #\nobject_item := identifier # \":\" exp"
        },
        "object := \"{\" \"}\" #": {
          "candidates": [
            "object := \"{\" \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object := \"{\" \"}\" #"
        },
        "exp := exp \"?\" \".\" # identifier": {
          "candidates": [
            "exp := exp \"?\" \".\" # identifier"
          ],
          "nextMap": {
            "identifier": "exp := exp \"?\" \".\" identifier #",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"?\" \".\" # identifier"
        },
        "exp := exp \".\" identifier #": {
          "candidates": [
            "exp := exp \".\" identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \".\" identifier #"
        },
        "__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp \"(\" exp # \")\"\nexp := exp \"(\" exp # __0 \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := exp \"(\" exp # \")\"",
            "exp := exp \"(\" exp # __0 \")\"",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp",
            "__0 := # \",\" exp",
            "__0 := # \",\" exp __0"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": "exp := exp \"(\" exp \")\" #",
            "__0": "exp := exp \"(\" exp __0 # \")\"",
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": "__0 := \",\" # exp\n__0 := \",\" # exp __0\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
          },
          "str": "__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp \"(\" exp # \")\"\nexp := exp \"(\" exp # __0 \")\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "exp := exp \"(\" \")\" #": {
          "candidates": [
            "exp := exp \"(\" \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"(\" \")\" #"
        },
        "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := exp \"[\" exp # \"]\"",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": "exp := exp \"[\" exp \"]\" #",
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"[\" exp # \"]\"\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := exp \"!=\" exp #",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"!=\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "exp := exp \"&&\" exp #",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"&&\" exp #\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "array := \"[\" exp __0 # \"]\"": {
          "candidates": [
            "array := \"[\" exp __0 # \"]\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": "array := \"[\" exp __0 \"]\" #",
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := \"[\" exp __0 # \"]\""
        },
        "array := \"[\" exp \"]\" #": {
          "candidates": [
            "array := \"[\" exp \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := \"[\" exp \"]\" #"
        },
        "__0 := \",\" # exp\n__0 := \",\" # exp __0\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "__0 := \",\" # exp",
            "__0 := \",\" # exp __0",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "__0 := \",\" exp #\n__0 := \",\" exp # __0\n__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__0 := \",\" # exp\n__0 := \",\" # exp __0\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := identifier \":\" # exp": {
          "candidates": [
            "object_item := identifier \":\" # exp",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nobject_item := identifier \":\" exp #",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := identifier \":\" # exp"
        },
        "object := \"{\" object_item \"}\" #": {
          "candidates": [
            "object := \"{\" object_item \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object := \"{\" object_item \"}\" #"
        },
        "object := \"{\" object_item __1 # \"}\"": {
          "candidates": [
            "object := \"{\" object_item __1 # \"}\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": "object := \"{\" object_item __1 \"}\" #",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object := \"{\" object_item __1 # \"}\""
        },
        "__1 := \",\" # object_item\n__1 := \",\" # object_item __1\nobject_item := # identifier\nobject_item := # identifier \":\" exp": {
          "candidates": [
            "__1 := \",\" # object_item",
            "__1 := \",\" # object_item __1",
            "object_item := # identifier \":\" exp",
            "object_item := # identifier"
          ],
          "nextMap": {
            "identifier": "object_item := identifier #\nobject_item := identifier # \":\" exp",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": "__1 := \",\" object_item #\n__1 := \",\" object_item # __1\n__1 := # \",\" object_item\n__1 := # \",\" object_item __1",
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__1 := \",\" # object_item\n__1 := \",\" # object_item __1\nobject_item := # identifier\nobject_item := # identifier \":\" exp"
        },
        "__2 := stmt __2 #": {
          "candidates": [
            "__2 := stmt __2 #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__2 := stmt __2 #"
        },
        "block_stmt := \"{\" __2 \"}\" #": {
          "candidates": [
            "block_stmt := \"{\" __2 \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "block_stmt := \"{\" __2 \"}\" #"
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nif_stmt := if \"(\" exp # \")\" stmt": {
          "candidates": [
            "if_stmt := if \"(\" exp # \")\" stmt",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nif_stmt := if \"(\" exp \")\" # stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nif_stmt := if \"(\" exp # \")\" stmt"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "const_stmt := const identifier \"=\" # exp_stmt",
            "exp_stmt := # exp \";\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": "const_stmt := const identifier \"=\" exp_stmt #",
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nconst_stmt := const identifier \"=\" # exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nlet_stmt := let identifier \"=\" # exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"": {
          "candidates": [
            "let_stmt := let identifier \"=\" # exp_stmt",
            "exp_stmt := # exp \";\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "object := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": "let_stmt := let identifier \"=\" exp_stmt #",
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nlet_stmt := let identifier \"=\" # exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nwhile_stmt := while \"(\" exp # \")\" stmt": {
          "candidates": [
            "while_stmt := while \"(\" exp # \")\" stmt",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt\nwhile_stmt := while \"(\" exp \")\" # stmt",
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nwhile_stmt := while \"(\" exp # \")\" stmt"
        },
        "__3 := # \",\" identifier\n__3 := # \",\" identifier __3\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __3 \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier # \"}\" from string \";\"",
            "import_stmt := import \"{\" identifier # __3 \"}\" from string \";\"",
            "__3 := # \",\" identifier",
            "__3 := # \",\" identifier __3"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": "import_stmt := import \"{\" identifier \"}\" # from string \";\"",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\"",
            "\",\"": "__3 := \",\" # identifier\n__3 := \",\" # identifier __3"
          },
          "str": "__3 := # \",\" identifier\n__3 := # \",\" identifier __3\nimport_stmt := import \"{\" identifier # \"}\" from string \";\"\nimport_stmt := import \"{\" identifier # __3 \"}\" from string \";\""
        },
        "import_stmt := import \"*\" as # identifier from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as # identifier from string \";\""
          ],
          "nextMap": {
            "identifier": "import_stmt := import \"*\" as identifier # from string \";\"",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" as # identifier from string \";\""
        },
        "exp := exp \"?\" \".\" identifier #": {
          "candidates": [
            "exp := exp \"?\" \".\" identifier #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"?\" \".\" identifier #"
        },
        "exp := exp \"(\" exp \")\" #": {
          "candidates": [
            "exp := exp \"(\" exp \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"(\" exp \")\" #"
        },
        "exp := exp \"(\" exp __0 # \")\"": {
          "candidates": [
            "exp := exp \"(\" exp __0 # \")\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": "exp := exp \"(\" exp __0 \")\" #",
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"(\" exp __0 # \")\""
        },
        "exp := exp \"[\" exp \"]\" #": {
          "candidates": [
            "exp := exp \"[\" exp \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"[\" exp \"]\" #"
        },
        "array := \"[\" exp __0 \"]\" #": {
          "candidates": [
            "array := \"[\" exp __0 \"]\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := \"[\" exp __0 \"]\" #"
        },
        "__0 := \",\" exp #\n__0 := \",\" exp # __0\n__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"": {
          "candidates": [
            "__0 := \",\" exp #",
            "__0 := \",\" exp # __0",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp",
            "__0 := # \",\" exp",
            "__0 := # \",\" exp __0"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": "__0 := \",\" exp __0 #",
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": "__0 := \",\" # exp\n__0 := \",\" # exp __0\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\""
          },
          "str": "__0 := \",\" exp #\n__0 := \",\" exp # __0\n__0 := # \",\" exp\n__0 := # \",\" exp __0\nexp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\""
        },
        "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nobject_item := identifier \":\" exp #": {
          "candidates": [
            "object_item := identifier \":\" exp #",
            "exp := exp # \"?\" \".\" identifier",
            "exp := exp # \".\" identifier",
            "exp := exp # \"(\" exp \")\"",
            "exp := exp # \"(\" exp __0 \")\"",
            "exp := exp # \"(\" \")\"",
            "exp := exp # \"[\" exp \"]\"",
            "exp := exp # \"!=\" exp",
            "exp := exp # \"&&\" exp"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": "exp := exp \"?\" # \".\" identifier",
            "\".\"": "exp := exp \".\" # identifier",
            "\"(\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"(\" # \")\"\nexp := exp \"(\" # exp \")\"\nexp := exp \"(\" # exp __0 \")\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"[\" # exp \"]\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"!=\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"&&\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp := exp \"&&\" # exp\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nobject_item := identifier \":\" exp #"
        },
        "object := \"{\" object_item __1 \"}\" #": {
          "candidates": [
            "object := \"{\" object_item __1 \"}\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "object := \"{\" object_item __1 \"}\" #"
        },
        "__1 := \",\" object_item #\n__1 := \",\" object_item # __1\n__1 := # \",\" object_item\n__1 := # \",\" object_item __1": {
          "candidates": [
            "__1 := \",\" object_item #",
            "__1 := \",\" object_item # __1",
            "__1 := # \",\" object_item",
            "__1 := # \",\" object_item __1"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": "__1 := \",\" object_item __1 #",
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": "__1 := \",\" # object_item\n__1 := \",\" # object_item __1\nobject_item := # identifier\nobject_item := # identifier \":\" exp"
          },
          "str": "__1 := \",\" object_item #\n__1 := \",\" object_item # __1\n__1 := # \",\" object_item\n__1 := # \",\" object_item __1"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nif_stmt := if \"(\" exp \")\" # stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt": {
          "candidates": [
            "if_stmt := if \"(\" exp \")\" # stmt",
            "stmt := # exp_stmt",
            "stmt := # if_stmt",
            "stmt := # const_stmt",
            "stmt := # let_stmt",
            "stmt := # while_stmt",
            "stmt := # block_stmt",
            "exp_stmt := # exp \";\"",
            "if_stmt := # if \"(\" exp \")\" stmt",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "let_stmt := # let identifier \"=\" exp_stmt",
            "while_stmt := # while \"(\" exp \")\" stmt",
            "block_stmt := # \"{\" \"}\"",
            "block_stmt := # \"{\" __2 \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": "if_stmt := if # \"(\" exp \")\" stmt",
            "stmt": "if_stmt := if \"(\" exp \")\" stmt #",
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "let": "let_stmt := let # identifier \"=\" exp_stmt",
            "while": "while_stmt := while # \"(\" exp \")\" stmt",
            "__2": null,
            "if_stmt": "stmt := if_stmt #",
            "const_stmt": "stmt := const_stmt #",
            "let_stmt": "stmt := let_stmt #",
            "while_stmt": "stmt := while_stmt #",
            "block_stmt": "stmt := block_stmt #",
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nif_stmt := if \"(\" exp \")\" # stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt"
        },
        "const_stmt := const identifier \"=\" exp_stmt #": {
          "candidates": [
            "const_stmt := const identifier \"=\" exp_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "const_stmt := const identifier \"=\" exp_stmt #"
        },
        "let_stmt := let identifier \"=\" exp_stmt #": {
          "candidates": [
            "let_stmt := let identifier \"=\" exp_stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "let_stmt := let identifier \"=\" exp_stmt #"
        },
        "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt\nwhile_stmt := while \"(\" exp \")\" # stmt": {
          "candidates": [
            "while_stmt := while \"(\" exp \")\" # stmt",
            "stmt := # exp_stmt",
            "stmt := # if_stmt",
            "stmt := # const_stmt",
            "stmt := # let_stmt",
            "stmt := # while_stmt",
            "stmt := # block_stmt",
            "exp_stmt := # exp \";\"",
            "if_stmt := # if \"(\" exp \")\" stmt",
            "const_stmt := # const identifier \"=\" exp_stmt",
            "let_stmt := # let identifier \"=\" exp_stmt",
            "while_stmt := # while \"(\" exp \")\" stmt",
            "block_stmt := # \"{\" \"}\"",
            "block_stmt := # \"{\" __2 \"}\"",
            "exp := # identifier",
            "exp := # string",
            "exp := # regex",
            "exp := # true",
            "exp := # false",
            "exp := # object",
            "exp := # array",
            "exp := # break",
            "exp := # new identifier",
            "exp := # \"!\" exp",
            "exp := # exp \"?\" \".\" identifier",
            "exp := # exp \".\" identifier",
            "exp := # exp \"(\" exp \")\"",
            "exp := # exp \"(\" exp __0 \")\"",
            "exp := # exp \"(\" \")\"",
            "exp := # exp \"[\" exp \"]\"",
            "exp := # \"...\" exp",
            "exp := # exp \"!=\" exp",
            "exp := # exp \"&&\" exp",
            "object := # \"{\" object_item \"}\"",
            "object := # \"{\" object_item __1 \"}\"",
            "object := # \"{\" \"}\"",
            "array := # \"[\" exp \"]\"",
            "array := # \"[\" exp __0 \"]\"",
            "array := # \"[\" \"]\""
          ],
          "nextMap": {
            "identifier": "exp := identifier #",
            "string": "exp := string #",
            "regex": "exp := regex #",
            "true": "exp := true #",
            "false": "exp := false #",
            "object": "exp := object #",
            "array": "exp := array #",
            "break": "exp := break #",
            "new": "exp := new # identifier",
            "\"!\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"!\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "exp": "exp := exp # \"!=\" exp\nexp := exp # \"&&\" exp\nexp := exp # \"(\" \")\"\nexp := exp # \"(\" exp \")\"\nexp := exp # \"(\" exp __0 \")\"\nexp := exp # \".\" identifier\nexp := exp # \"?\" \".\" identifier\nexp := exp # \"[\" exp \"]\"\nexp_stmt := exp # \";\"",
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": "array := \"[\" # \"]\"\narray := \"[\" # exp \"]\"\narray := \"[\" # exp __0 \"]\"\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"]\"": null,
            "\"...\"": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nexp := \"...\" # exp\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"",
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": "__2 := # stmt\n__2 := # stmt __2\narray := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := \"{\" # \"}\"\nblock_stmt := \"{\" # __2 \"}\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := \"{\" # \"}\"\nobject := \"{\" # object_item \"}\"\nobject := \"{\" # object_item __1 \"}\"\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nobject_item := # identifier\nobject_item := # identifier \":\" exp\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": "if_stmt := if # \"(\" exp \")\" stmt",
            "stmt": "while_stmt := while \"(\" exp \")\" stmt #",
            "const": "const_stmt := const # identifier \"=\" exp_stmt",
            "\"=\"": null,
            "exp_stmt": "stmt := exp_stmt #",
            "let": "let_stmt := let # identifier \"=\" exp_stmt",
            "while": "while_stmt := while # \"(\" exp \")\" stmt",
            "__2": null,
            "if_stmt": "stmt := if_stmt #",
            "const_stmt": "stmt := const_stmt #",
            "let_stmt": "stmt := let_stmt #",
            "while_stmt": "stmt := while_stmt #",
            "block_stmt": "stmt := block_stmt #",
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt\nwhile_stmt := while \"(\" exp \")\" # stmt"
        },
        "import_stmt := import \"{\" identifier \"}\" # from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": "import_stmt := import \"{\" identifier \"}\" from # string \";\"",
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" # from string \";\""
        },
        "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\"",
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier __3 # \"}\" from string \";\""
        },
        "__3 := \",\" # identifier\n__3 := \",\" # identifier __3": {
          "candidates": [
            "__3 := \",\" # identifier",
            "__3 := \",\" # identifier __3"
          ],
          "nextMap": {
            "identifier": "__3 := \",\" identifier #\n__3 := \",\" identifier # __3\n__3 := # \",\" identifier\n__3 := # \",\" identifier __3",
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__3 := \",\" # identifier\n__3 := \",\" # identifier __3"
        },
        "import_stmt := import \"*\" as identifier # from string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": "import_stmt := import \"*\" as identifier from # string \";\"",
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" as identifier # from string \";\""
        },
        "exp := exp \"(\" exp __0 \")\" #": {
          "candidates": [
            "exp := exp \"(\" exp __0 \")\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "exp := exp \"(\" exp __0 \")\" #"
        },
        "__0 := \",\" exp __0 #": {
          "candidates": [
            "__0 := \",\" exp __0 #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__0 := \",\" exp __0 #"
        },
        "__1 := \",\" object_item __1 #": {
          "candidates": [
            "__1 := \",\" object_item __1 #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__1 := \",\" object_item __1 #"
        },
        "if_stmt := if \"(\" exp \")\" stmt #": {
          "candidates": [
            "if_stmt := if \"(\" exp \")\" stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "if_stmt := if \"(\" exp \")\" stmt #"
        },
        "while_stmt := while \"(\" exp \")\" stmt #": {
          "candidates": [
            "while_stmt := while \"(\" exp \")\" stmt #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "while_stmt := while \"(\" exp \")\" stmt #"
        },
        "import_stmt := import \"{\" identifier \"}\" from # string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": "import_stmt := import \"{\" identifier \"}\" from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from # string \";\""
        },
        "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\"",
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" # from string \";\""
        },
        "__3 := \",\" identifier #\n__3 := \",\" identifier # __3\n__3 := # \",\" identifier\n__3 := # \",\" identifier __3": {
          "candidates": [
            "__3 := \",\" identifier #",
            "__3 := \",\" identifier # __3",
            "__3 := # \",\" identifier",
            "__3 := # \",\" identifier __3"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": "__3 := \",\" identifier __3 #",
            "\",\"": "__3 := \",\" # identifier\n__3 := \",\" # identifier __3"
          },
          "str": "__3 := \",\" identifier #\n__3 := \",\" identifier # __3\n__3 := # \",\" identifier\n__3 := # \",\" identifier __3"
        },
        "import_stmt := import \"*\" as identifier from # string \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": "import_stmt := import \"*\" as identifier from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" as identifier from # string \";\""
        },
        "import_stmt := import \"{\" identifier \"}\" from string # \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"{\" identifier \"}\" from string \";\" #",
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string # \";\""
        },
        "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\"",
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from # string \";\""
        },
        "__3 := \",\" identifier __3 #": {
          "candidates": [
            "__3 := \",\" identifier __3 #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "__3 := \",\" identifier __3 #"
        },
        "import_stmt := import \"*\" as identifier from string # \";\"": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"*\" as identifier from string \";\" #",
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" as identifier from string # \";\""
        },
        "import_stmt := import \"{\" identifier \"}\" from string \";\" #": {
          "candidates": [
            "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier \"}\" from string \";\" #"
        },
        "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\"": {
          "candidates": [
            "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\""
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #",
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from string # \";\""
        },
        "import_stmt := import \"*\" as identifier from string \";\" #": {
          "candidates": [
            "import_stmt := import \"*\" as identifier from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"*\" as identifier from string \";\" #"
        },
        "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #": {
          "candidates": [
            "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #"
          ],
          "nextMap": {
            "identifier": null,
            "string": null,
            "regex": null,
            "true": null,
            "false": null,
            "object": null,
            "array": null,
            "break": null,
            "new": null,
            "\"!\"": null,
            "exp": null,
            "\"?\"": null,
            "\".\"": null,
            "\"(\"": null,
            "\")\"": null,
            "__0": null,
            "\"[\"": null,
            "\"]\"": null,
            "\"...\"": null,
            "\"!=\"": null,
            "\"&&\"": null,
            "\"{\"": null,
            "object_item": null,
            "\"}\"": null,
            "__1": null,
            "\":\"": null,
            "\";\"": null,
            "if": null,
            "stmt": null,
            "const": null,
            "\"=\"": null,
            "exp_stmt": null,
            "let": null,
            "while": null,
            "__2": null,
            "if_stmt": null,
            "const_stmt": null,
            "let_stmt": null,
            "while_stmt": null,
            "block_stmt": null,
            "import": null,
            "\"*\"": null,
            "as": null,
            "from": null,
            "__3": null,
            "\",\"": null
          },
          "str": "import_stmt := import \"{\" identifier __3 \"}\" from string \";\" #"
        }
      },
      "entryState": "array := # \"[\" \"]\"\narray := # \"[\" exp \"]\"\narray := # \"[\" exp __0 \"]\"\nblock_stmt := # \"{\" \"}\"\nblock_stmt := # \"{\" __2 \"}\"\nconst_stmt := # const identifier \"=\" exp_stmt\nexp := # \"!\" exp\nexp := # \"...\" exp\nexp := # array\nexp := # break\nexp := # exp \"!=\" exp\nexp := # exp \"&&\" exp\nexp := # exp \"(\" \")\"\nexp := # exp \"(\" exp \")\"\nexp := # exp \"(\" exp __0 \")\"\nexp := # exp \".\" identifier\nexp := # exp \"?\" \".\" identifier\nexp := # exp \"[\" exp \"]\"\nexp := # false\nexp := # identifier\nexp := # new identifier\nexp := # object\nexp := # regex\nexp := # string\nexp := # true\nexp_stmt := # exp \";\"\nif_stmt := # if \"(\" exp \")\" stmt\nimport_stmt := # import \"*\" as identifier from string \";\"\nimport_stmt := # import \"{\" identifier \"}\" from string \";\"\nimport_stmt := # import \"{\" identifier __3 \"}\" from string \";\"\nlet_stmt := # let identifier \"=\" exp_stmt\nobject := # \"{\" \"}\"\nobject := # \"{\" object_item \"}\"\nobject := # \"{\" object_item __1 \"}\"\nstmt := # block_stmt\nstmt := # const_stmt\nstmt := # exp_stmt\nstmt := # if_stmt\nstmt := # let_stmt\nstmt := # while_stmt\nwhile_stmt := # while \"(\" exp \")\" stmt",
      "NTClosures": {
        "exp": [
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `break` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exp \")\"` }",
          "{ exp: `exp \"(\" exp __0 \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_item \"}\"` }",
          "{ object: `\"{\" object_item __1 \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exp \"]\"` }",
          "{ array: `\"[\" exp __0 \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "object": [
          "{ object: `\"{\" object_item \"}\"` }",
          "{ object: `\"{\" object_item __1 \"}\"` }",
          "{ object: `\"{\" \"}\"` }"
        ],
        "object_item": [
          "{ object_item: `identifier \":\" exp` }",
          "{ object_item: `identifier` }"
        ],
        "array": [
          "{ array: `\"[\" exp \"]\"` }",
          "{ array: `\"[\" exp __0 \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "exp_stmt": [
          "{ exp_stmt: `exp \";\"` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `break` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exp \")\"` }",
          "{ exp: `exp \"(\" exp __0 \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_item \"}\"` }",
          "{ object: `\"{\" object_item __1 \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exp \"]\"` }",
          "{ array: `\"[\" exp __0 \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "if_stmt": [
          "{ if_stmt: `if \"(\" exp \")\" stmt` }"
        ],
        "const_stmt": [
          "{ const_stmt: `const identifier \"=\" exp_stmt` }"
        ],
        "let_stmt": [
          "{ let_stmt: `let identifier \"=\" exp_stmt` }"
        ],
        "while_stmt": [
          "{ while_stmt: `while \"(\" exp \")\" stmt` }"
        ],
        "block_stmt": [
          "{ block_stmt: `\"{\" \"}\"` }",
          "{ block_stmt: `\"{\" __2 \"}\"` }"
        ],
        "stmt": [
          "{ stmt: `exp_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `const_stmt` }",
          "{ stmt: `let_stmt` }",
          "{ stmt: `while_stmt` }",
          "{ stmt: `block_stmt` }",
          "{ exp_stmt: `exp \";\"` }",
          "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "{ block_stmt: `\"{\" \"}\"` }",
          "{ block_stmt: `\"{\" __2 \"}\"` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `break` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exp \")\"` }",
          "{ exp: `exp \"(\" exp __0 \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_item \"}\"` }",
          "{ object: `\"{\" object_item __1 \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exp \"]\"` }",
          "{ array: `\"[\" exp __0 \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "import_stmt": [
          "{ import_stmt: `import \"*\" as identifier from string \";\"` }",
          "{ import_stmt: `import \"{\" identifier \"}\" from string \";\"` }",
          "{ import_stmt: `import \"{\" identifier __3 \"}\" from string \";\"` }"
        ],
        "__0": [
          "{ __0: `\",\" exp` }",
          "{ __0: `\",\" exp __0` }"
        ],
        "__1": [
          "{ __1: `\",\" object_item` }",
          "{ __1: `\",\" object_item __1` }"
        ],
        "__2": [
          "{ __2: `stmt` }",
          "{ __2: `stmt __2` }",
          "{ stmt: `exp_stmt` }",
          "{ stmt: `if_stmt` }",
          "{ stmt: `const_stmt` }",
          "{ stmt: `let_stmt` }",
          "{ stmt: `while_stmt` }",
          "{ stmt: `block_stmt` }",
          "{ exp_stmt: `exp \";\"` }",
          "{ if_stmt: `if \"(\" exp \")\" stmt` }",
          "{ const_stmt: `const identifier \"=\" exp_stmt` }",
          "{ let_stmt: `let identifier \"=\" exp_stmt` }",
          "{ while_stmt: `while \"(\" exp \")\" stmt` }",
          "{ block_stmt: `\"{\" \"}\"` }",
          "{ block_stmt: `\"{\" __2 \"}\"` }",
          "{ exp: `identifier` }",
          "{ exp: `string` }",
          "{ exp: `regex` }",
          "{ exp: `true` }",
          "{ exp: `false` }",
          "{ exp: `object` }",
          "{ exp: `array` }",
          "{ exp: `break` }",
          "{ exp: `new identifier` }",
          "{ exp: `\"!\" exp` }",
          "{ exp: `exp \"?\" \".\" identifier` }",
          "{ exp: `exp \".\" identifier` }",
          "{ exp: `exp \"(\" exp \")\"` }",
          "{ exp: `exp \"(\" exp __0 \")\"` }",
          "{ exp: `exp \"(\" \")\"` }",
          "{ exp: `exp \"[\" exp \"]\"` }",
          "{ exp: `\"...\" exp` }",
          "{ exp: `exp \"!=\" exp` }",
          "{ exp: `exp \"&&\" exp` }",
          "{ object: `\"{\" object_item \"}\"` }",
          "{ object: `\"{\" object_item __1 \"}\"` }",
          "{ object: `\"{\" \"}\"` }",
          "{ array: `\"[\" exp \"]\"` }",
          "{ array: `\"[\" exp __0 \"]\"` }",
          "{ array: `\"[\" \"]\"` }"
        ],
        "__3": [
          "{ __3: `\",\" identifier` }",
          "{ __3: `\",\" identifier __3` }"
        ]
      },
      "firstSets": {
        "exp": [
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "exp",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "object": [
          "\"{\""
        ],
        "object_item": [
          "identifier"
        ],
        "array": [
          "\"[\""
        ],
        "exp_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\""
        ],
        "if_stmt": [
          "if"
        ],
        "const_stmt": [
          "const"
        ],
        "let_stmt": [
          "let"
        ],
        "while_stmt": [
          "while"
        ],
        "block_stmt": [
          "\"{\""
        ],
        "stmt": [
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\""
        ],
        "import_stmt": [
          "import"
        ],
        "__0": [
          "\",\""
        ],
        "__1": [
          "\",\""
        ],
        "__2": [
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\""
        ],
        "__3": [
          "\",\""
        ]
      },
      "followSets": {
        "exp": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "object": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "object_item": [
          "\"}\"",
          "__1",
          "\",\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as"
        ],
        "array": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "exp_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "if_stmt": [
          "__2",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "const_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "let_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "while_stmt": [
          "__2",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "block_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "stmt": [
          "__2",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "import_stmt": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "__0": [
          "\")\"",
          "\"]\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "__1": [
          "\"}\"",
          "__1",
          "\",\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as"
        ],
        "__2": [
          "\"}\"",
          "__2",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "exp",
          "if",
          "const",
          "let",
          "while",
          "\"{\"",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"]\"",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "__3": [
          "\"}\"",
          "\":\"",
          "\"=\"",
          "from",
          "__3",
          "\",\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "identifier": [
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "\",\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "string": [
          "\";\"",
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "regex": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "true": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "false": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "break": [
          "\"?\"",
          "\".\"",
          "\"(\"",
          "\")\"",
          "__0",
          "\",\"",
          "\"[\"",
          "\"]\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "from",
          "\"}\"",
          "__3",
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "object_item",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "__1"
        ],
        "new": [
          "identifier"
        ],
        "": [
          "exp",
          "identifier",
          "string",
          "regex",
          "true",
          "false",
          "object",
          "array",
          "break",
          "new",
          "\"!\"",
          "\"...\"",
          "\"{\"",
          "\"[\"",
          "\".\"",
          "\")\"",
          "object_item",
          "\"}\"",
          "\"]\"",
          "stmt",
          "exp_stmt",
          "if_stmt",
          "const_stmt",
          "let_stmt",
          "while_stmt",
          "block_stmt",
          "if",
          "const",
          "let",
          "while",
          "__2",
          "as",
          "from",
          "\"?\"",
          "\"(\"",
          "__0",
          "\",\"",
          "\"!=\"",
          "\"&&\"",
          "\";\"",
          "\":\"",
          "\"=\"",
          "__3",
          "__1"
        ],
        "if": [
          "\"(\""
        ],
        "const": [
          "identifier"
        ],
        "let": [
          "identifier"
        ],
        "while": [
          "\"(\""
        ],
        "import": [
          "\"*\"",
          "\"{\""
        ],
        "as": [
          "identifier"
        ],
        "from": [
          "string"
        ]
      },
      "cascadeQueryPrefix": "__"
    }
  }
}