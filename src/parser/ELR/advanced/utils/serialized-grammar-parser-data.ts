// generated by utils/generate-serialized-grammar-parser.ts

// comment all lines and uncomment the next line to re-generate the data
// export const data = undefined;

import type { ExtractSerializableParserData } from "../../model";
import type { GrammarParserBuilder } from "./grammar-parser-factory";

export const data: ExtractSerializableParserData<GrammarParserBuilder> = {
  hash: 554900317,
  data: {
    dfa: {
      NTs: ["gr"],
      entryNTs: ["gr"],
      grammars: [
        { type: 0, kind: "grammar" },
        { type: 0, kind: "literal" },
        { type: 0, kind: "rename" },
        { type: 0, kind: "", text: "(" },
        { type: 1, kind: "gr" },
        { type: 0, kind: "", text: ")" },
        { type: 0, kind: "", text: "?" },
        { type: 0, kind: "", text: "*" },
        { type: 0, kind: "", text: "+" },
        { type: 0, kind: "", text: "|" },
      ],
      grammarRules: [
        {
          NT: "gr",
          rule: ["grammar"],
          conflicts: [],
          resolved: [],
          hydrationId: 0,
        },
        {
          NT: "gr",
          rule: ["literal"],
          conflicts: [],
          resolved: [],
          hydrationId: 0,
        },
        {
          NT: "gr",
          rule: ["grammar", "rename"],
          conflicts: [],
          resolved: [],
          hydrationId: 1,
        },
        {
          NT: "gr",
          rule: ["literal", "rename"],
          conflicts: [],
          resolved: [],
          hydrationId: 1,
        },
        {
          NT: "gr",
          rule: ["'('", "gr", "')'"],
          conflicts: [],
          resolved: [],
          hydrationId: 2,
        },
        {
          NT: "gr",
          rule: ["gr", "'?'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
          ],
          hydrationId: 3,
        },
        {
          NT: "gr",
          rule: ["gr", "'*'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
          ],
          hydrationId: 4,
        },
        {
          NT: "gr",
          rule: ["gr", "'+'"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
          ],
          hydrationId: 5,
        },
        {
          NT: "gr",
          rule: ["gr", "'|'", "gr"],
          conflicts: [
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              next: ["'?'"],
              handleEnd: false,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              next: ["'|'"],
              handleEnd: false,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              next: ["gr", "grammar", "literal", "'('"],
              handleEnd: false,
              resolvers: [6],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,gr",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
          ],
          hydrationId: 6,
        },
        {
          NT: "gr",
          rule: ["gr", "gr"],
          conflicts: [
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              next: ["'?'"],
              handleEnd: false,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              next: ["'*'"],
              handleEnd: false,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              next: ["'+'"],
              handleEnd: false,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              next: ["'|'"],
              handleEnd: false,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              next: ["gr", "grammar", "literal", "'('"],
              handleEnd: false,
              resolvers: [8],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "gr:gr,'?'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'?'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'*'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'*'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'+'",
              handleEnd: false,
              next: "*",
              accepter: false,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'+'",
              handleEnd: true,
              next: "*",
              accepter: false,
            },
            {
              type: 0,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
            {
              type: 1,
              anotherRule: "gr:gr,'|',gr",
              handleEnd: true,
              next: "*",
              accepter: true,
            },
            {
              type: 0,
              anotherRule: "gr:gr,gr",
              handleEnd: false,
              next: "*",
              accepter: true,
            },
          ],
          hydrationId: 7,
        },
      ],
      candidates: [
        { gr: "gr:grammar", digested: 0, nextMap: { grammar: "1#gr:grammar" } },
        { gr: "gr:literal", digested: 0, nextMap: { literal: "1#gr:literal" } },
        {
          gr: "gr:grammar,rename",
          digested: 0,
          nextMap: { grammar: "1#gr:grammar,rename" },
        },
        {
          gr: "gr:literal,rename",
          digested: 0,
          nextMap: { literal: "1#gr:literal,rename" },
        },
        {
          gr: "gr:'(',gr,')'",
          digested: 0,
          nextMap: { "'('": "1#gr:'(',gr,')'" },
        },
        { gr: "gr:gr,'?'", digested: 0, nextMap: { gr: "1#gr:gr,'?'" } },
        { gr: "gr:gr,'*'", digested: 0, nextMap: { gr: "1#gr:gr,'*'" } },
        { gr: "gr:gr,'+'", digested: 0, nextMap: { gr: "1#gr:gr,'+'" } },
        { gr: "gr:gr,'|',gr", digested: 0, nextMap: { gr: "1#gr:gr,'|',gr" } },
        { gr: "gr:gr,gr", digested: 0, nextMap: { gr: "1#gr:gr,gr" } },
        { gr: "gr:grammar", digested: 1, nextMap: {} },
        {
          gr: "gr:grammar,rename",
          digested: 1,
          nextMap: { rename: "2#gr:grammar,rename" },
        },
        { gr: "gr:literal", digested: 1, nextMap: {} },
        {
          gr: "gr:literal,rename",
          digested: 1,
          nextMap: { rename: "2#gr:literal,rename" },
        },
        {
          gr: "gr:'(',gr,')'",
          digested: 1,
          nextMap: { gr: "2#gr:'(',gr,')'" },
        },
        { gr: "gr:gr,'?'", digested: 1, nextMap: { "'?'": "2#gr:gr,'?'" } },
        { gr: "gr:gr,'*'", digested: 1, nextMap: { "'*'": "2#gr:gr,'*'" } },
        { gr: "gr:gr,'+'", digested: 1, nextMap: { "'+'": "2#gr:gr,'+'" } },
        {
          gr: "gr:gr,'|',gr",
          digested: 1,
          nextMap: { "'|'": "2#gr:gr,'|',gr" },
        },
        { gr: "gr:gr,gr", digested: 1, nextMap: { gr: "2#gr:gr,gr" } },
        { gr: "gr:grammar,rename", digested: 2, nextMap: {} },
        { gr: "gr:literal,rename", digested: 2, nextMap: {} },
        {
          gr: "gr:'(',gr,')'",
          digested: 2,
          nextMap: { "')'": "3#gr:'(',gr,')'" },
        },
        { gr: "gr:gr,gr", digested: 2, nextMap: {} },
        { gr: "gr:gr,'?'", digested: 2, nextMap: {} },
        { gr: "gr:gr,'*'", digested: 2, nextMap: {} },
        { gr: "gr:gr,'+'", digested: 2, nextMap: {} },
        { gr: "gr:gr,'|',gr", digested: 2, nextMap: { gr: "3#gr:gr,'|',gr" } },
        { gr: "gr:'(',gr,')'", digested: 3, nextMap: {} },
        { gr: "gr:gr,'|',gr", digested: 3, nextMap: {} },
      ],
      states: {
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename":
          {
            candidates: [
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr",
              "')'": null,
              "'?'": null,
              "'*'": null,
              "'+'": null,
              "'|'": null,
            },
          },
        "1#gr:grammar\n1#gr:grammar,rename": {
          candidates: ["1#gr:grammar", "1#gr:grammar,rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: "2#gr:grammar,rename",
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "1#gr:literal\n1#gr:literal,rename": {
          candidates: ["1#gr:literal", "1#gr:literal,rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: "2#gr:literal,rename",
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'":
          {
            candidates: [
              "1#gr:'(',gr,')'",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:'(',gr,')'",
              "')'": null,
              "'?'": null,
              "'*'": null,
              "'+'": null,
              "'|'": null,
            },
          },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr":
          {
            candidates: [
              "1#gr:gr,'?'",
              "1#gr:gr,'*'",
              "1#gr:gr,'+'",
              "1#gr:gr,'|',gr",
              "1#gr:gr,gr",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:gr,gr",
              "')'": null,
              "'?'": "2#gr:gr,'?'",
              "'*'": "2#gr:gr,'*'",
              "'+'": "2#gr:gr,'+'",
              "'|'":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n2#gr:gr,'|',gr",
            },
          },
        "2#gr:grammar,rename": {
          candidates: ["2#gr:grammar,rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "2#gr:literal,rename": {
          candidates: ["2#gr:literal,rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:'(',gr,')'":
          {
            candidates: [
              "2#gr:'(',gr,')'",
              "1#gr:gr,'?'",
              "1#gr:gr,'*'",
              "1#gr:gr,'+'",
              "1#gr:gr,'|',gr",
              "1#gr:gr,gr",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:gr,gr",
              "')'": "3#gr:'(',gr,')'",
              "'?'": "2#gr:gr,'?'",
              "'*'": "2#gr:gr,'*'",
              "'+'": "2#gr:gr,'+'",
              "'|'":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n2#gr:gr,'|',gr",
            },
          },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:gr,gr":
          {
            candidates: [
              "2#gr:gr,gr",
              "1#gr:gr,'?'",
              "1#gr:gr,'*'",
              "1#gr:gr,'+'",
              "1#gr:gr,'|',gr",
              "1#gr:gr,gr",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:gr,gr",
              "')'": null,
              "'?'": "2#gr:gr,'?'",
              "'*'": "2#gr:gr,'*'",
              "'+'": "2#gr:gr,'+'",
              "'|'":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n2#gr:gr,'|',gr",
            },
          },
        "2#gr:gr,'?'": {
          candidates: ["2#gr:gr,'?'"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "2#gr:gr,'*'": {
          candidates: ["2#gr:gr,'*'"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "2#gr:gr,'+'": {
          candidates: ["2#gr:gr,'+'"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n2#gr:gr,'|',gr":
          {
            candidates: [
              "2#gr:gr,'|',gr",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n3#gr:gr,'|',gr",
              "')'": null,
              "'?'": null,
              "'*'": null,
              "'+'": null,
              "'|'": null,
            },
          },
        "3#gr:'(',gr,')'": {
          candidates: ["3#gr:'(',gr,')'"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            "'('": null,
            gr: null,
            "')'": null,
            "'?'": null,
            "'*'": null,
            "'+'": null,
            "'|'": null,
          },
        },
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n3#gr:gr,'|',gr":
          {
            candidates: [
              "3#gr:gr,'|',gr",
              "1#gr:gr,'?'",
              "1#gr:gr,'*'",
              "1#gr:gr,'+'",
              "1#gr:gr,'|',gr",
              "1#gr:gr,gr",
              "0#gr:grammar",
              "0#gr:literal",
              "0#gr:grammar,rename",
              "0#gr:literal,rename",
              "0#gr:'(',gr,')'",
              "0#gr:gr,'?'",
              "0#gr:gr,'*'",
              "0#gr:gr,'+'",
              "0#gr:gr,'|',gr",
              "0#gr:gr,gr",
            ],
            nextMap: {
              grammar: "1#gr:grammar\n1#gr:grammar,rename",
              literal: "1#gr:literal\n1#gr:literal,rename",
              rename: null,
              "'('":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:'(',gr,')'",
              gr: "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n1#gr:gr,'*'\n1#gr:gr,'+'\n1#gr:gr,'?'\n1#gr:gr,'|',gr\n1#gr:gr,gr\n2#gr:gr,gr",
              "')'": null,
              "'?'": "2#gr:gr,'?'",
              "'*'": "2#gr:gr,'*'",
              "'+'": "2#gr:gr,'+'",
              "'|'":
                "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename\n2#gr:gr,'|',gr",
            },
          },
      },
      entryState:
        "0#gr:'(',gr,')'\n0#gr:gr,'*'\n0#gr:gr,'+'\n0#gr:gr,'?'\n0#gr:gr,'|',gr\n0#gr:gr,gr\n0#gr:grammar\n0#gr:grammar,rename\n0#gr:literal\n0#gr:literal,rename",
      NTClosures: {
        gr: [
          "gr:grammar",
          "gr:literal",
          "gr:grammar,rename",
          "gr:literal,rename",
          "gr:'(',gr,')'",
          "gr:gr,'?'",
          "gr:gr,'*'",
          "gr:gr,'+'",
          "gr:gr,'|',gr",
          "gr:gr,gr",
        ],
      },
      firstSets: { gr: ["grammar", "literal", "'('", "gr"] },
      followSets: {
        gr: [
          "')'",
          "'?'",
          "'*'",
          "'+'",
          "'|'",
          "gr",
          "grammar",
          "literal",
          "'('",
        ],
        grammar: [
          "rename",
          "')'",
          "'?'",
          "'*'",
          "'+'",
          "'|'",
          "gr",
          "grammar",
          "literal",
          "'('",
        ],
        literal: [
          "rename",
          "')'",
          "'?'",
          "'*'",
          "'+'",
          "'|'",
          "gr",
          "grammar",
          "literal",
          "'('",
        ],
        rename: [
          "')'",
          "'?'",
          "'*'",
          "'+'",
          "'|'",
          "gr",
          "grammar",
          "literal",
          "'('",
        ],
        "": [
          "gr",
          "grammar",
          "literal",
          "'('",
          "')'",
          "'?'",
          "'*'",
          "'+'",
          "'|'",
        ],
      },
    },
  },
};
