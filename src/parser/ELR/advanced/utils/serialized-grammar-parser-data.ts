// generated by utils/generate-serialized-grammar-parser.ts

// comment all lines and uncomment the next line to re-generate the data
// export const data = undefined;

import type { SerializableParserData } from "../../model";

export const data: SerializableParserData<
  "gr",
  "" | "rename" | "grammar" | "literal"
> = {
  data: {
    dfa: {
      NTs: ["gr"],
      entryNTs: ["gr"],
      grammars: [
        {
          type: 0,
          kind: "grammar",
          name: "grammar",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "grammar", name: "grammar", text: undefined })',
          cacheKeyWithoutName: "grammar",
          strWithName: "grammar",
          strWithoutName: "grammar",
          grammarStrWithName: "grammar",
          grammarStrWithoutName: "grammar",
        },
        {
          type: 0,
          kind: "literal",
          name: "literal",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "literal", name: "literal", text: undefined })',
          cacheKeyWithoutName: "literal",
          strWithName: "literal",
          strWithoutName: "literal",
          grammarStrWithName: "literal",
          grammarStrWithoutName: "literal",
        },
        {
          type: 0,
          kind: "rename",
          name: "rename",
          text: undefined,
          str: 'Grammar({ type: "T", kind: "rename", name: "rename", text: undefined })',
          cacheKeyWithoutName: "rename",
          strWithName: "rename",
          strWithoutName: "rename",
          grammarStrWithName: "rename",
          grammarStrWithoutName: "rename",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "(",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "(" })',
          cacheKeyWithoutName: ":(",
          strWithName: '<anonymous>: "("',
          strWithoutName: '<anonymous>: "("',
          grammarStrWithName: '"("',
          grammarStrWithoutName: '"("',
        },
        {
          type: 1,
          kind: "gr",
          name: "gr",
          text: undefined,
          str: 'Grammar({ type: "NT", kind: "gr", name: "gr", text: undefined })',
          cacheKeyWithoutName: "gr",
          strWithName: "gr",
          strWithoutName: "gr",
          grammarStrWithName: "gr",
          grammarStrWithoutName: "gr",
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: ")",
          str: 'Grammar({ type: "T", kind: "", name: "", text: ")" })',
          cacheKeyWithoutName: ":)",
          strWithName: '<anonymous>: ")"',
          strWithoutName: '<anonymous>: ")"',
          grammarStrWithName: '")"',
          grammarStrWithoutName: '")"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "?",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "?" })',
          cacheKeyWithoutName: ":?",
          strWithName: '<anonymous>: "?"',
          strWithoutName: '<anonymous>: "?"',
          grammarStrWithName: '"?"',
          grammarStrWithoutName: '"?"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "*",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "*" })',
          cacheKeyWithoutName: ":*",
          strWithName: '<anonymous>: "*"',
          strWithoutName: '<anonymous>: "*"',
          grammarStrWithName: '"*"',
          grammarStrWithoutName: '"*"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "+",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "+" })',
          cacheKeyWithoutName: ":+",
          strWithName: '<anonymous>: "+"',
          strWithoutName: '<anonymous>: "+"',
          grammarStrWithName: '"+"',
          grammarStrWithoutName: '"+"',
        },
        {
          type: 0,
          kind: "",
          name: "",
          text: "|",
          str: 'Grammar({ type: "T", kind: "", name: "", text: "|" })',
          cacheKeyWithoutName: ":|",
          strWithName: '<anonymous>: "|"',
          strWithoutName: '<anonymous>: "|"',
          grammarStrWithName: '"|"',
          grammarStrWithoutName: '"|"',
        },
      ],
      grammarRules: [
        {
          NT: "gr",
          rule: ["grammar"],
          conflicts: [
            {
              type: 0,
              anotherRule: "{ gr: `grammar rename` }",
              next: ["rename"],
              handleEnd: false,
              overlapped: 1,
              resolvers: [0],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: "{ gr: `grammar` }",
          strWithGrammarName: "{ gr: `grammar` }",
          strWithoutGrammarName: "{ gr: `grammar` }",
          hydrationId: 0,
        },
        {
          NT: "gr",
          rule: ["literal"],
          conflicts: [
            {
              type: 0,
              anotherRule: "{ gr: `literal rename` }",
              next: ["rename"],
              handleEnd: false,
              overlapped: 1,
              resolvers: [1],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: "{ gr: `literal` }",
          strWithGrammarName: "{ gr: `literal` }",
          strWithoutGrammarName: "{ gr: `literal` }",
          hydrationId: 0,
        },
        {
          NT: "gr",
          rule: ["grammar", "rename"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `literal` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: "{ gr: `grammar rename` }",
          strWithGrammarName: "{ gr: `grammar rename` }",
          strWithoutGrammarName: "{ gr: `grammar rename` }",
          hydrationId: 1,
        },
        {
          NT: "gr",
          rule: ["literal", "rename"],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `grammar` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `literal` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `grammar rename` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `literal rename` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: "{ gr: `literal rename` }",
          strWithGrammarName: "{ gr: `literal rename` }",
          strWithoutGrammarName: "{ gr: `literal rename` }",
          hydrationId: 1,
        },
        {
          NT: "gr",
          rule: ['"("', "gr", '")"'],
          conflicts: [],
          resolved: [],
          str: '{ gr: `"(" gr ")"` }',
          strWithGrammarName: '{ gr: `"(" gr ")"` }',
          strWithoutGrammarName: '{ gr: `"(" gr ")"` }',
          hydrationId: 2,
        },
        {
          NT: "gr",
          rule: ["gr", '"?"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ gr: `gr "?"` }',
          strWithGrammarName: '{ gr: `gr "?"` }',
          strWithoutGrammarName: '{ gr: `gr "?"` }',
          hydrationId: 3,
        },
        {
          NT: "gr",
          rule: ["gr", '"*"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ gr: `gr "*"` }',
          strWithGrammarName: '{ gr: `gr "*"` }',
          strWithoutGrammarName: '{ gr: `gr "*"` }',
          hydrationId: 4,
        },
        {
          NT: "gr",
          rule: ["gr", '"+"'],
          conflicts: [],
          resolved: [
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ gr: `gr "+"` }',
          strWithGrammarName: '{ gr: `gr "+"` }',
          strWithoutGrammarName: '{ gr: `gr "+"` }',
          hydrationId: 5,
        },
        {
          NT: "gr",
          rule: ["gr", '"|"', "gr"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              next: ['"?"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              next: ['"*"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              next: ['"+"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              next: ['"|"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [8],
            },
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              next: ["gr", "grammar", "literal", '"("'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [6],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: '{ gr: `gr "|" gr` }',
          strWithGrammarName: '{ gr: `gr "|" gr` }',
          strWithoutGrammarName: '{ gr: `gr "|" gr` }',
          hydrationId: 6,
        },
        {
          NT: "gr",
          rule: ["gr", "gr"],
          conflicts: [
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              next: ['"?"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [0],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              next: ['"*"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [2],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              next: ['"+"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [4],
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              next: ['"|"'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [6],
            },
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              next: ["gr", "grammar", "literal", '"("'],
              handleEnd: false,
              overlapped: 1,
              resolvers: [8],
            },
          ],
          resolved: [
            {
              type: 0,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "?"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "*"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: false,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "+"` }',
              handleEnd: true,
              next: "*",
              accepter: false,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 1,
              anotherRule: '{ gr: `gr "|" gr` }',
              handleEnd: true,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
            {
              type: 0,
              anotherRule: "{ gr: `gr gr` }",
              handleEnd: false,
              next: "*",
              accepter: true,
              hydrationId: undefined,
            },
          ],
          str: "{ gr: `gr gr` }",
          strWithGrammarName: "{ gr: `gr gr` }",
          strWithoutGrammarName: "{ gr: `gr gr` }",
          hydrationId: 7,
        },
      ],
      candidates: [
        {
          gr: "{ gr: `grammar` }",
          digested: 0,
          nextMap: { grammar: "gr := grammar #" },
          str: "gr := # grammar",
          strWithGrammarName: "gr := # grammar",
        },
        {
          gr: "{ gr: `literal` }",
          digested: 0,
          nextMap: { literal: "gr := literal #" },
          str: "gr := # literal",
          strWithGrammarName: "gr := # literal",
        },
        {
          gr: "{ gr: `grammar rename` }",
          digested: 0,
          nextMap: { grammar: "gr := grammar # rename" },
          str: "gr := # grammar rename",
          strWithGrammarName: "gr := # grammar rename",
        },
        {
          gr: "{ gr: `literal rename` }",
          digested: 0,
          nextMap: { literal: "gr := literal # rename" },
          str: "gr := # literal rename",
          strWithGrammarName: "gr := # literal rename",
        },
        {
          gr: '{ gr: `"(" gr ")"` }',
          digested: 0,
          nextMap: { ":(": 'gr := "(" # gr ")"' },
          str: 'gr := # "(" gr ")"',
          strWithGrammarName: 'gr := # "(" gr ")"',
        },
        {
          gr: '{ gr: `gr "?"` }',
          digested: 0,
          nextMap: { gr: 'gr := gr # "?"' },
          str: 'gr := # gr "?"',
          strWithGrammarName: 'gr := # gr "?"',
        },
        {
          gr: '{ gr: `gr "*"` }',
          digested: 0,
          nextMap: { gr: 'gr := gr # "*"' },
          str: 'gr := # gr "*"',
          strWithGrammarName: 'gr := # gr "*"',
        },
        {
          gr: '{ gr: `gr "+"` }',
          digested: 0,
          nextMap: { gr: 'gr := gr # "+"' },
          str: 'gr := # gr "+"',
          strWithGrammarName: 'gr := # gr "+"',
        },
        {
          gr: '{ gr: `gr "|" gr` }',
          digested: 0,
          nextMap: { gr: 'gr := gr # "|" gr' },
          str: 'gr := # gr "|" gr',
          strWithGrammarName: 'gr := # gr "|" gr',
        },
        {
          gr: "{ gr: `gr gr` }",
          digested: 0,
          nextMap: { gr: "gr := gr # gr" },
          str: "gr := # gr gr",
          strWithGrammarName: "gr := # gr gr",
        },
        {
          gr: "{ gr: `grammar` }",
          digested: 1,
          nextMap: {},
          str: "gr := grammar #",
          strWithGrammarName: "gr := grammar #",
        },
        {
          gr: "{ gr: `grammar rename` }",
          digested: 1,
          nextMap: { rename: "gr := grammar rename #" },
          str: "gr := grammar # rename",
          strWithGrammarName: "gr := grammar # rename",
        },
        {
          gr: "{ gr: `literal` }",
          digested: 1,
          nextMap: {},
          str: "gr := literal #",
          strWithGrammarName: "gr := literal #",
        },
        {
          gr: "{ gr: `literal rename` }",
          digested: 1,
          nextMap: { rename: "gr := literal rename #" },
          str: "gr := literal # rename",
          strWithGrammarName: "gr := literal # rename",
        },
        {
          gr: '{ gr: `"(" gr ")"` }',
          digested: 1,
          nextMap: { gr: 'gr := "(" gr # ")"' },
          str: 'gr := "(" # gr ")"',
          strWithGrammarName: 'gr := "(" # gr ")"',
        },
        {
          gr: '{ gr: `gr "?"` }',
          digested: 1,
          nextMap: { ":?": 'gr := gr "?" #' },
          str: 'gr := gr # "?"',
          strWithGrammarName: 'gr := gr # "?"',
        },
        {
          gr: '{ gr: `gr "*"` }',
          digested: 1,
          nextMap: { ":*": 'gr := gr "*" #' },
          str: 'gr := gr # "*"',
          strWithGrammarName: 'gr := gr # "*"',
        },
        {
          gr: '{ gr: `gr "+"` }',
          digested: 1,
          nextMap: { ":+": 'gr := gr "+" #' },
          str: 'gr := gr # "+"',
          strWithGrammarName: 'gr := gr # "+"',
        },
        {
          gr: '{ gr: `gr "|" gr` }',
          digested: 1,
          nextMap: { ":|": 'gr := gr "|" # gr' },
          str: 'gr := gr # "|" gr',
          strWithGrammarName: 'gr := gr # "|" gr',
        },
        {
          gr: "{ gr: `gr gr` }",
          digested: 1,
          nextMap: { gr: "gr := gr gr #" },
          str: "gr := gr # gr",
          strWithGrammarName: "gr := gr # gr",
        },
        {
          gr: "{ gr: `grammar rename` }",
          digested: 2,
          nextMap: {},
          str: "gr := grammar rename #",
          strWithGrammarName: "gr := grammar rename #",
        },
        {
          gr: "{ gr: `literal rename` }",
          digested: 2,
          nextMap: {},
          str: "gr := literal rename #",
          strWithGrammarName: "gr := literal rename #",
        },
        {
          gr: '{ gr: `"(" gr ")"` }',
          digested: 2,
          nextMap: { ":)": 'gr := "(" gr ")" #' },
          str: 'gr := "(" gr # ")"',
          strWithGrammarName: 'gr := "(" gr # ")"',
        },
        {
          gr: "{ gr: `gr gr` }",
          digested: 2,
          nextMap: {},
          str: "gr := gr gr #",
          strWithGrammarName: "gr := gr gr #",
        },
        {
          gr: '{ gr: `gr "?"` }',
          digested: 2,
          nextMap: {},
          str: 'gr := gr "?" #',
          strWithGrammarName: 'gr := gr "?" #',
        },
        {
          gr: '{ gr: `gr "*"` }',
          digested: 2,
          nextMap: {},
          str: 'gr := gr "*" #',
          strWithGrammarName: 'gr := gr "*" #',
        },
        {
          gr: '{ gr: `gr "+"` }',
          digested: 2,
          nextMap: {},
          str: 'gr := gr "+" #',
          strWithGrammarName: 'gr := gr "+" #',
        },
        {
          gr: '{ gr: `gr "|" gr` }',
          digested: 2,
          nextMap: { gr: 'gr := gr "|" gr #' },
          str: 'gr := gr "|" # gr',
          strWithGrammarName: 'gr := gr "|" # gr',
        },
        {
          gr: '{ gr: `"(" gr ")"` }',
          digested: 3,
          nextMap: {},
          str: 'gr := "(" gr ")" #',
          strWithGrammarName: 'gr := "(" gr ")" #',
        },
        {
          gr: '{ gr: `gr "|" gr` }',
          digested: 3,
          nextMap: {},
          str: 'gr := gr "|" gr #',
          strWithGrammarName: 'gr := gr "|" gr #',
        },
      ],
      states: {
        'gr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename':
          {
            candidates: [
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr",
              ":)": null,
              ":?": null,
              ":*": null,
              ":+": null,
              ":|": null,
            },
            str:
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename",
          },
        "gr := grammar #\ngr := grammar # rename": {
          candidates: ["gr := grammar #", "gr := grammar # rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: "gr := grammar rename #",
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: "gr := grammar #\ngr := grammar # rename",
        },
        "gr := literal #\ngr := literal # rename": {
          candidates: ["gr := literal #", "gr := literal # rename"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: "gr := literal rename #",
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: "gr := literal #\ngr := literal # rename",
        },
        'gr := "(" # gr ")"\ngr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename':
          {
            candidates: [
              'gr := "(" # gr ")"',
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := "(" gr # ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr",
              ":)": null,
              ":?": null,
              ":*": null,
              ":+": null,
              ":|": null,
            },
            str:
              'gr := "(" # gr ")"\n' +
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename",
          },
        'gr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename\ngr := gr # "*"\ngr := gr # "+"\ngr := gr # "?"\ngr := gr # "|" gr\ngr := gr # gr':
          {
            candidates: [
              'gr := gr # "?"',
              'gr := gr # "*"',
              'gr := gr # "+"',
              'gr := gr # "|" gr',
              "gr := gr # gr",
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr\n" +
                "gr := gr gr #",
              ":)": null,
              ":?": 'gr := gr "?" #',
              ":*": 'gr := gr "*" #',
              ":+": 'gr := gr "+" #',
              ":|":
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr "|" # gr',
            },
            str:
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename\n" +
              'gr := gr # "*"\n' +
              'gr := gr # "+"\n' +
              'gr := gr # "?"\n' +
              'gr := gr # "|" gr\n' +
              "gr := gr # gr",
          },
        "gr := grammar rename #": {
          candidates: ["gr := grammar rename #"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: "gr := grammar rename #",
        },
        "gr := literal rename #": {
          candidates: ["gr := literal rename #"],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: "gr := literal rename #",
        },
        'gr := "(" gr # ")"\ngr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename\ngr := gr # "*"\ngr := gr # "+"\ngr := gr # "?"\ngr := gr # "|" gr\ngr := gr # gr':
          {
            candidates: [
              'gr := "(" gr # ")"',
              'gr := gr # "?"',
              'gr := gr # "*"',
              'gr := gr # "+"',
              'gr := gr # "|" gr',
              "gr := gr # gr",
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr\n" +
                "gr := gr gr #",
              ":)": 'gr := "(" gr ")" #',
              ":?": 'gr := gr "?" #',
              ":*": 'gr := gr "*" #',
              ":+": 'gr := gr "+" #',
              ":|":
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr "|" # gr',
            },
            str:
              'gr := "(" gr # ")"\n' +
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename\n" +
              'gr := gr # "*"\n' +
              'gr := gr # "+"\n' +
              'gr := gr # "?"\n' +
              'gr := gr # "|" gr\n' +
              "gr := gr # gr",
          },
        'gr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename\ngr := gr # "*"\ngr := gr # "+"\ngr := gr # "?"\ngr := gr # "|" gr\ngr := gr # gr\ngr := gr gr #':
          {
            candidates: [
              "gr := gr gr #",
              'gr := gr # "?"',
              'gr := gr # "*"',
              'gr := gr # "+"',
              'gr := gr # "|" gr',
              "gr := gr # gr",
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr\n" +
                "gr := gr gr #",
              ":)": null,
              ":?": 'gr := gr "?" #',
              ":*": 'gr := gr "*" #',
              ":+": 'gr := gr "+" #',
              ":|":
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr "|" # gr',
            },
            str:
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename\n" +
              'gr := gr # "*"\n' +
              'gr := gr # "+"\n' +
              'gr := gr # "?"\n' +
              'gr := gr # "|" gr\n' +
              "gr := gr # gr\n" +
              "gr := gr gr #",
          },
        'gr := gr "?" #': {
          candidates: ['gr := gr "?" #'],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: 'gr := gr "?" #',
        },
        'gr := gr "*" #': {
          candidates: ['gr := gr "*" #'],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: 'gr := gr "*" #',
        },
        'gr := gr "+" #': {
          candidates: ['gr := gr "+" #'],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: 'gr := gr "+" #',
        },
        'gr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename\ngr := gr "|" # gr':
          {
            candidates: [
              'gr := gr "|" # gr',
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr "|" gr #\n' +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr",
              ":)": null,
              ":?": null,
              ":*": null,
              ":+": null,
              ":|": null,
            },
            str:
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename\n" +
              'gr := gr "|" # gr',
          },
        'gr := "(" gr ")" #': {
          candidates: ['gr := "(" gr ")" #'],
          nextMap: {
            grammar: null,
            literal: null,
            rename: null,
            ":(": null,
            gr: null,
            ":)": null,
            ":?": null,
            ":*": null,
            ":+": null,
            ":|": null,
          },
          str: 'gr := "(" gr ")" #',
        },
        'gr := # "(" gr ")"\ngr := # gr "*"\ngr := # gr "+"\ngr := # gr "?"\ngr := # gr "|" gr\ngr := # gr gr\ngr := # grammar\ngr := # grammar rename\ngr := # literal\ngr := # literal rename\ngr := gr "|" gr #\ngr := gr # "*"\ngr := gr # "+"\ngr := gr # "?"\ngr := gr # "|" gr\ngr := gr # gr':
          {
            candidates: [
              'gr := gr "|" gr #',
              'gr := gr # "?"',
              'gr := gr # "*"',
              'gr := gr # "+"',
              'gr := gr # "|" gr',
              "gr := gr # gr",
              "gr := # grammar",
              "gr := # literal",
              "gr := # grammar rename",
              "gr := # literal rename",
              'gr := # "(" gr ")"',
              'gr := # gr "?"',
              'gr := # gr "*"',
              'gr := # gr "+"',
              'gr := # gr "|" gr',
              "gr := # gr gr",
            ],
            nextMap: {
              grammar: "gr := grammar #\ngr := grammar # rename",
              literal: "gr := literal #\ngr := literal # rename",
              rename: null,
              ":(":
                'gr := "(" # gr ")"\n' +
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename",
              gr:
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr # "*"\n' +
                'gr := gr # "+"\n' +
                'gr := gr # "?"\n' +
                'gr := gr # "|" gr\n' +
                "gr := gr # gr\n" +
                "gr := gr gr #",
              ":)": null,
              ":?": 'gr := gr "?" #',
              ":*": 'gr := gr "*" #',
              ":+": 'gr := gr "+" #',
              ":|":
                'gr := # "(" gr ")"\n' +
                'gr := # gr "*"\n' +
                'gr := # gr "+"\n' +
                'gr := # gr "?"\n' +
                'gr := # gr "|" gr\n' +
                "gr := # gr gr\n" +
                "gr := # grammar\n" +
                "gr := # grammar rename\n" +
                "gr := # literal\n" +
                "gr := # literal rename\n" +
                'gr := gr "|" # gr',
            },
            str:
              'gr := # "(" gr ")"\n' +
              'gr := # gr "*"\n' +
              'gr := # gr "+"\n' +
              'gr := # gr "?"\n' +
              'gr := # gr "|" gr\n' +
              "gr := # gr gr\n" +
              "gr := # grammar\n" +
              "gr := # grammar rename\n" +
              "gr := # literal\n" +
              "gr := # literal rename\n" +
              'gr := gr "|" gr #\n' +
              'gr := gr # "*"\n' +
              'gr := gr # "+"\n' +
              'gr := gr # "?"\n' +
              'gr := gr # "|" gr\n' +
              "gr := gr # gr",
          },
      },
      entryState:
        'gr := # "(" gr ")"\n' +
        'gr := # gr "*"\n' +
        'gr := # gr "+"\n' +
        'gr := # gr "?"\n' +
        'gr := # gr "|" gr\n' +
        "gr := # gr gr\n" +
        "gr := # grammar\n" +
        "gr := # grammar rename\n" +
        "gr := # literal\n" +
        "gr := # literal rename",
      NTClosures: {
        gr: [
          "{ gr: `grammar` }",
          "{ gr: `literal` }",
          "{ gr: `grammar rename` }",
          "{ gr: `literal rename` }",
          '{ gr: `"(" gr ")"` }',
          '{ gr: `gr "?"` }',
          '{ gr: `gr "*"` }',
          '{ gr: `gr "+"` }',
          '{ gr: `gr "|" gr` }',
          "{ gr: `gr gr` }",
        ],
      },
      firstSets: { gr: ["grammar", "literal", '"("', "gr"] },
      followSets: {
        gr: [
          '")"',
          '"?"',
          '"*"',
          '"+"',
          '"|"',
          "gr",
          "grammar",
          "literal",
          '"("',
          "rename",
        ],
        grammar: [
          "rename",
          '")"',
          '"?"',
          '"*"',
          '"+"',
          '"|"',
          "gr",
          "grammar",
          "literal",
          '"("',
        ],
        literal: [
          "rename",
          '")"',
          '"?"',
          '"*"',
          '"+"',
          '"|"',
          "gr",
          "grammar",
          "literal",
          '"("',
        ],
        rename: [
          '")"',
          '"?"',
          '"*"',
          '"+"',
          '"|"',
          "gr",
          "grammar",
          "literal",
          '"("',
          "rename",
        ],
        "": [
          "gr",
          "grammar",
          "literal",
          '"("',
          '")"',
          '"?"',
          '"*"',
          '"+"',
          '"|"',
          "rename",
        ],
      },
      cascadeQueryPrefix: undefined,
    },
  },
};
