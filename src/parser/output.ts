import type { ExtractKinds, GeneralToken } from "../lexer";
import type { ASTNode } from "./ast";

export type AcceptedParserOutput<
  NTs extends string,
  ASTData,
  ErrorType,
  TokenType extends GeneralToken,
  Global,
> = {
  accept: true;
  /**
   * Current AST nodes.
   */
  buffer: readonly ASTNode<
    NTs | ExtractKinds<TokenType>,
    NTs,
    ASTData,
    ErrorType,
    TokenType,
    Global
  >[];
  /**
   * Newly generated AST nodes by the current parsing call with error.
   * Empty list if no error generated by the current parsing call.
   */
  errors: readonly ASTNode<
    NTs | ExtractKinds<TokenType>,
    NTs,
    ASTData,
    ErrorType,
    TokenType,
    Global
  >[];
};

export const rejectedParserOutput = Object.freeze({ accept: false });
export type RejectedParserOutput = typeof rejectedParserOutput;

export type ParserOutput<
  NTs extends string,
  ASTData,
  ErrorType,
  TokenType extends GeneralToken,
  Global,
> =
  | RejectedParserOutput
  | AcceptedParserOutput<NTs, ASTData, ErrorType, TokenType, Global>;
